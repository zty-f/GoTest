// Code generated by gen-go-errors. DO NOT EDIT.

package xerr

import (
	fmt "fmt"
	errors "test/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// biz error
// 系统:mall 10
// 模块:频道 00
func IsMallChannelColumnNotMatch(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Code == 1000000
}

// biz error
// 系统:mall 10
// 模块:频道 00
func ErrorMallChannelColumnNotMatch(format string, args ...interface{}) *errors.Error {
	if format == "" {
		return errors.New(errors.Stat_FAILED, 1000000, "栏目Id不在对应频道下")
	}
	return errors.New(errors.Stat_FAILED, 1000000, fmt.Sprintf(format, args...))
}

func IsMallChannelStyleNotMatch(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Code == 1000001
}

func ErrorMallChannelStyleNotMatch(format string, args ...interface{}) *errors.Error {
	if format == "" {
		return errors.New(errors.Stat_FAILED, 1000001, "栏目类型不为教师风采")
	}
	return errors.New(errors.Stat_FAILED, 1000001, fmt.Sprintf(format, args...))
}

func IsMallChannelPkgNotValid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Code == 1000002
}

func ErrorMallChannelPkgNotValid(format string, args ...interface{}) *errors.Error {
	if format == "" {
		return errors.New(errors.Stat_FAILED, 1000002, "此栏目下不存在需要考试的课包")
	}
	return errors.New(errors.Stat_FAILED, 1000002, fmt.Sprintf(format, args...))
}

// 模块:详情页 01
func IsMallDetailCourseNotValid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Code == 1001000
}

// 模块:详情页 01
func ErrorMallDetailCourseNotValid(format string, args ...interface{}) *errors.Error {
	if format == "" {
		return errors.New(errors.Stat_FAILED, 1001000, "获取不到此课程内容，请挑选其它课程～")
	}
	return errors.New(errors.Stat_FAILED, 1001000, fmt.Sprintf(format, args...))
}

// 模块:B端登录 10
func IsMallAdminUserNotLoginIn(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Code == 1010000
}

// 模块:B端登录 10
func ErrorMallAdminUserNotLoginIn(format string, args ...interface{}) *errors.Error {
	if format == "" {
		return errors.New(errors.Stat_FAILED, 1010000, "用户未登录")
	}
	return errors.New(errors.Stat_FAILED, 1010000, fmt.Sprintf(format, args...))
}

func IsMallAdminUserNotAuthority(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Code == 1010001
}

func ErrorMallAdminUserNotAuthority(format string, args ...interface{}) *errors.Error {
	if format == "" {
		return errors.New(errors.Stat_FAILED, 1010001, "用户没权限")
	}
	return errors.New(errors.Stat_FAILED, 1010001, fmt.Sprintf(format, args...))
}

// 模块:老师详情页 02
func IsMallTeacherDetailNotValid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Code == 1002000
}

// 模块:老师详情页 02
func ErrorMallTeacherDetailNotValid(format string, args ...interface{}) *errors.Error {
	if format == "" {
		return errors.New(errors.Stat_FAILED, 1002000, "老师还未上传介绍～去看看其他老师吧")
	}
	return errors.New(errors.Stat_FAILED, 1002000, fmt.Sprintf(format, args...))
}
