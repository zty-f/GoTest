// Code generated by gen-go-errors. DO NOT EDIT.

package xerr

import (
	fmt "fmt"
	errors "test/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// https://yach-doc-shimo.zhiyinlou.com/docs/5xkGMnDVyycmNO3X/ <【待定稿】错误码规范>
// common error
func IsInternalError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Code == 100
}

// https://yach-doc-shimo.zhiyinlou.com/docs/5xkGMnDVyycmNO3X/ <【待定稿】错误码规范>
// common error
func ErrorInternalError(format string, args ...interface{}) *errors.Error {
	if format == "" {
		return errors.New(errors.Stat_FAILED, 100, "数据请求失败")
	}
	return errors.New(errors.Stat_FAILED, 100, fmt.Sprintf(format, args...))
}

func IsParamsFatal(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Code == 101
}

func ErrorParamsFatal(format string, args ...interface{}) *errors.Error {
	if format == "" {
		return errors.New(errors.Stat_FAILED, 101, "参数错误")
	}
	return errors.New(errors.Stat_FAILED, 101, fmt.Sprintf(format, args...))
}

func IsParamMiss(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Code == 102
}

func ErrorParamMiss(format string, args ...interface{}) *errors.Error {
	if format == "" {
		return errors.New(errors.Stat_FAILED, 102, "缺少参数")
	}
	return errors.New(errors.Stat_FAILED, 102, fmt.Sprintf(format, args...))
}

func IsContentEmpty(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Code == 103
}

func ErrorContentEmpty(format string, args ...interface{}) *errors.Error {
	if format == "" {
		return errors.New(errors.Stat_FAILED, 103, "暂无内容，敬请期待")
	}
	return errors.New(errors.Stat_FAILED, 103, fmt.Sprintf(format, args...))
}

func IsRecordNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Code == 104
}

func ErrorRecordNotFound(format string, args ...interface{}) *errors.Error {
	if format == "" {
		return errors.New(errors.Stat_FAILED, 104, "无数据")
	}
	return errors.New(errors.Stat_FAILED, 104, fmt.Sprintf(format, args...))
}

func IsDbCommonError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Code == 105
}

func ErrorDbCommonError(format string, args ...interface{}) *errors.Error {
	if format == "" {
		return errors.New(errors.Stat_FAILED, 105, "db error")
	}
	return errors.New(errors.Stat_FAILED, 105, fmt.Sprintf(format, args...))
}

func IsUserNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Code == 106
}

func ErrorUserNotFound(format string, args ...interface{}) *errors.Error {
	if format == "" {
		return errors.New(errors.Stat_FAILED, 106, "用户不存在")
	}
	return errors.New(errors.Stat_FAILED, 106, fmt.Sprintf(format, args...))
}

func IsExistSameData(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Code == 108
}

func ErrorExistSameData(format string, args ...interface{}) *errors.Error {
	if format == "" {
		return errors.New(errors.Stat_FAILED, 108, "存在相同数据")
	}
	return errors.New(errors.Stat_FAILED, 108, fmt.Sprintf(format, args...))
}

func IsRedisCommonError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Code == 109
}

func ErrorRedisCommonError(format string, args ...interface{}) *errors.Error {
	if format == "" {
		return errors.New(errors.Stat_FAILED, 109, "redis error")
	}
	return errors.New(errors.Stat_FAILED, 109, fmt.Sprintf(format, args...))
}

func IsDbStatusError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Code == 110
}

func ErrorDbStatusError(format string, args ...interface{}) *errors.Error {
	if format == "" {
		return errors.New(errors.Stat_FAILED, 110, "数据状态异常")
	}
	return errors.New(errors.Stat_FAILED, 110, fmt.Sprintf(format, args...))
}
