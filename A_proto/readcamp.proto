syntax = "proto3";

package readcamp;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

message GeneralPagination {
  int64 limit = 1;
  int64 offset = 2;
}
message GeneralPaginationByPageSize {
  int64 page = 1;
  int64 size = 2;
}

message LectureStudyReportRequest {
  message LectureInfo {
    enum StudyContentType {
      UNKNOWNStudyContentType = 0;
      DAODU = 1;
      YUANSHENG = 2;
    }
    // 哪一节课的id
    uint32 lecture_id = 1;
    // 学习时长，单位s。
    int32 duration = 2;
    // 视频/音频播放进度，单位s。
    int32 play_pos = 3;
    // 学习内容类型：1：导读，2：原生。原生视频后端只统计学习时长，不统计学习进度。
    StudyContentType type = 4;
  }
  LectureInfo lecture_info = 1;
  // 来自哪个页面：inclass：上课页面；practice：磨耳朵页面
  string source = 2;
}

message LectureStudyReportResponse {}

message GetUserStudyStatisticsRequest {}

message UserStudyStatistics {
  // 累计阅读量（单位：本）
  int32 book_count = 1;
  // 累计阅读天数（单位：天）
  int32 day_count = 2;
  // 连续阅读天数（单位：天）
  int32 continuous_day_count = 3;
  // 累计阅读时长（单位：s）
  int32 study_duration_secs = 4;
  // 成就：如「学富五车」
  string achievement = 5;
  // 累计单词量
  int32 total_vocabulary = 6;
  // 总的星星数
  int32 total_stars = 7;
  // 累计磨耳朵时长 (单位: s)
  int32 pratice_duration_secs = 8;
}

message GetUserStudyStatisticsDetailReq {
  // 枚举 en、cn 默认英文
  string course_lang = 1;
}

message UserStudyStatisticsDetail {
  // 阅读天数
  int32 read_day_cnt = 1;
  // 词汇量
  int32 vocabulary_cnt = 2;
  // 已阅读本书
  int32 book_cnt = 3;
  // 磨耳朵时长
  int32 moerduo_duration = 4;
  // 阅读时长
  int32 read_duration = 5;
}

message GetUserStudyStatisticsShareRequest {}

message GetUserStudyStatisticsShareResponse{
  // 名人名言
  message Quote {
    // 已废弃。但为兼容旧版本，此字段保留。
    string content = 1;
    string chinese_content = 2;
    string english_content = 3;
    // 作者
    string author = 4;
  }
  UserStudyStatistics study_statistics  = 1;
  Quote quote = 2;
  // 分享二维码链接
  string url = 3;
}

message GetUserStudyDurationRequest {
  // 从哪一天开始（包含这一天，如20220512）
  int32 from = 2;
  // 从哪一天结束（包含这一天，如20220513）
  int32 to = 3;
}

message GetUserStudyDurationResponse {
  message UserStudyDurationItem {
    // 哪一天（如20220512）
    int32 daytime = 1;
    // 学习时长，单位s。
    int32 duration = 2;
  }
  repeated UserStudyDurationItem items = 1;
}

message ImageResource {
  // 图片链接
  string url = 1;
}

message AnimationResource {
  // 动图链接(json格式)
  string url = 1;
}

message AudioResource {
  // 音频链接
  string url = 1;
  // 音频时长
  int32 duration_secs = 2;
}

message VideoResource {
  // 视频链接
  string url = 1;
  // 视频时长
  int32 duration_secs = 2;
  // 封面图片链接
  string cover_url = 3;
  // 字幕文件
  string srt_url = 4;
}

message MediaResource {
  // 媒体类型。取值为 image, audio 或者 video。当 type="image" 时，image 字段即是图片信息，以此类推。
  string type = 1;
  // 图片资源
  ImageResource image = 2;
  // 音频资源
  AudioResource audio = 3;
  // 视频资源
  VideoResource video = 4;
}

message ImageCrtResource {
  // 图片uri
  string uri = 1;
}

message AudioCrtResource {
  // 音频uri
  string uri = 1;
  // 音频时长
  int32 duration_secs = 2;
}

message VideoCrtResource {
  // 视频uri
  string uri = 1;
  // 视频时长
  int32 duration_secs = 2;
  // 视频封面uri
  string cover_uri = 3;
}

message MediaCrtResource {
  // 媒体类型。取值为 image, audio 或者 video。当 type="image" 时，image 字段即是图片信息，以此类推。
  string type = 1;
  // 图片资源
  ImageCrtResource image = 2;
  // 音频资源
  AudioCrtResource audio = 3;
  // 视频资源
  VideoCrtResource video = 4;
}

enum CampStatus {
  // 无效状态
  UnknownCampStatus = 0;
  // 初始状态
  camp_init = 1;
  // 可用
  camp_available = 2;
  // 不可用
  camp_disabled = 3;
}

message Camp {
  int32 id = 1;
  // 训练营名称
  string name = 2;
  // 训练营描述
  string description = 3;
  // 训练营头图信息
  ImageResource front_picture = 4;
  // 训练营状态: 1: 初始状态, 2:可用, 3:不可用
  CampStatus status = 5;
  // 创建时间
  int64 created_at = 6;
  // 更新时间
  int64 updated_at = 7;
}

message Package {
  // 套餐id
  int64 package_id = 1;
  // 套餐价格(单位: 分)
  int64 price = 2;
}

enum CourseStatus {
  // 无效状态
  UnknownCourseStatus = 0;
  // 初始状态
  course_init = 1;
  // 已绑定套餐
  course_binded = 2;
  // 可用
  course_available = 3;
  // 不可用
  course_disabled = 4;
}

enum CourseLevel {
  // 体验营
  Level_trail = 0;
  // L1
  level_L1 = 1;
  // L2
  level_L2 = 2;
  // L3
  level_L3 = 3;
  // L4
  level_L4 = 4;
  // L5
  level_L5 = 5;
  // L6
  level_L6 = 6;
  // L7
  level_L7 = 7;
  // L8
  level_L8 = 8;
  // 分销课、赠送课等他其他
  Level_L100 = 100;
}

message Course {
  int32 id = 1;
  // 课程名称
  string name = 3;
  // 分级: 0:体验营, 1:L1, 2:L2, 3:L3, 4:L4, 5:L5, 6:L6, 7:L7, 100:L100
  CourseLevel level = 4;
  // 课程描述
  string description = 5;
  // 课程头图信息
  ImageResource front_picture = 6;
  // 训练营id
  int32 camp_id = 7;
  // 套餐信息
  Package package = 8;
  // 课程状态: 1: 初始状态, 2:已绑定套餐, 3: 可用, 4:不可用
  CourseStatus status = 9;
  // 创建时间
  int64 created_at = 10;
  // 更新时间
  int64 updated_at = 11;
  // 购买链接
  string buy_url = 12;
  // 已废弃，不保证准确性，请使用外层的 owned 字段。当前用户是否可访问
  bool owned = 99; // info: true if owned by specified user
  // 课程类型：1：正价课(level=1/2/3/4)，2：体验课(level=0)，3：分销课(level=100)，4：赠送课(level=100)， 5：拓课包
  int32 course_type = 13;
  // 课程包含套系列表
  repeated string series_list = 14;
  // 开课人数
  int32 user_count = 15;
  // 课程分类 ["中文","英文","阅读主线营","阅读拓展营","学术考试营"]
  repeated string category_tags = 16;
  // 课程结业证书
  string cert_template_url = 17;
}

enum LectureStatus {
  // 无效状态
  UnknownLectureStatus = 0;
  // 锁定
  lecture_locked = 1;
  // 可用(已解锁)
  lecture_available = 2;
  // 不可用(不可见)
  lecture_disabled = 3;
}

enum LectureLevel {
  // UNKNOWN LEVEL
  lecture_level_unknown = 0;
  // L1
  lecture_level_L1 = 1;
  // L2
  lecture_level_L2 = 2;
  // L3
  lecture_level_L3 = 3;
  // L4
  lecture_level_L4 = 4;
  // L5
  lecture_level_L5 = 5;
}

message InteractionConf {
  repeated InteractionPointConf points_conf = 1;
}

message InteractionPointConf {
  // 点位的唯一标识，用于增删改
  int32 id = 1;
  // 点位信息，单位：ms
  int32 point_ms = 2;
  // 点位的内容信息
  string content = 3;
  // 点位配置类型， 用户录音：recording，选择题：multiple_choice
  string type = 4;
  // type = recording 时的配置
  InteractionRecordingConf recording_conf = 5;
  // type = multiple_choice 时的配置，可能为 null
  InteractionMultipleChoiceConf multiple_choice_conf = 6;
  // type = drag_completion
  InteractionDragConf drag_completion_conf = 7;
  // type = multiple_choice_new
  InteractionMultipleChoiceNewConf multiple_choice_new_conf = 8;
}

message InteractionRecordingConf {
  // 录音超时时间
  int32 timeout = 1;
}

message InteractionMultipleChoiceConf {
  // 标准录音，可能不存在标准录音，此时为 null。
  AudioResource standard_recording = 1;
  // 选项图片
  repeated ImageResource selected_images = 2;
  // 正确选项的索引，从0开始
  int32 correct_index = 3;
}

message InteractionMultipleChoiceNewConf {
  // 标准录音，可能不存在标准录音，此时为 null。
  AudioResource standard_recording = 1;
  // 正确选项的索引，从0开始
  int32 correct_index = 2;
  // 新选项
  repeated ChoiceOption choice_options = 3;
  // 尺寸
  int32 size = 4;
  // 底部距离
  int32 bottom_distance = 5;
}

message InteractionDragConf {
  // 背景图片
  DragImgConf bg_img = 1;
  // 目标填空区域
  repeated SizeInfo targets = 2;
  // 选项
  repeated DragConfChoiceInfo choices = 3;
  // 提交按钮
  DragConfSubmitBtn submit_btn = 4;
}

message DragConfChoiceInfo {
  DragImgConf img = 1;
  SizeInfo location = 2;
  // 对应答案位置
  repeated int64 target_index = 3;
}

message DragConfSubmitBtn {
  // 图片
  DragImgConf img = 1;
  SizeInfo location = 2;
}

message DragImgConf {
  string url = 1;
  SizeInfo size = 2;
}

message SizeInfo {
  int64 x = 1;
  int64 y = 2;
  int64 w = 3;
  int64 h = 4;
}

message Lecture {
  int32 id = 1;
  // 课节名称
  string name = 2;
  // 课节描述：RAZ
  string description = 3;
  // 课节头图信息
  ImageResource front_picture = 4;
  // 课程id
  int32 course_id = 5;
  // 导读资源信息
  MediaResource guide_resource = 6;
  // 原音资源信息
  MediaResource original_resource = 7;
  // 已学习量
  int32 studied_number = 8;
  // 已作废，优先使用 UserLecture 中的 status 字段。课节状态: 1: 锁定, 2: 可用(已解锁), 3: 不可用
  LectureStatus status = 9;
  // 创建时间
  int64 created_at = 10;
  // 更新时间
  int64 updated_at = 11;
  // 课节编号
  int32 lecture_number = 12;
  // 词汇量
  int32 vocabulary = 13;
  // 难度
  string grade = 14;
  // 套系
  string series = 15;
  // 蓝思值
  string lexile = 16;
  // 标签列表
  repeated string tag_list = 17;
  // 适合年龄
  string ages = 18;
  // 条形码
  string bar_code = 19;
  // 喜欢人数
  int32 like_number = 20;
  // 学习人数。进入此课节的人数。区别于上面的 studied_number，后者代表已「学完」此课节的人数。
  int32 study_number = 21;
  // 评价人数。此课节总评价数，即使有些评论是仅自己可见
  int32 checkin_number = 22;
  // 课节级别，合法的level是0-4，其中0是导学课，非这个范围的level说明该课节没有级别概念
  int32 level = 23;
  // 绘本跟读资源的id
  int64 book_id = 24;
  // 「练一练」绘本 id
  int64 lianyilian_book_id = 25;
  // 「玩一玩」绘本 id
  int64 wanyiwan_book_id = 26;
  // 新词数量
  int64 new_words = 27;
  // 导读的交互讲解配置，为 null 代表没有此配置
  InteractionConf guide_interaction_conf = 28;
  // wpm 对应的文本信息
  string wpm = 29;
  // 是否存在题目练习
  bool has_questions = 30;
  // 是否展示口语表达
  bool has_speaking_express = 31;
  // 课节别名
  string alias_name = 32;
  // 课节编号别名
  string alias_lecture_num = 33;
  // 是否展示创意写作
  bool has_creative_write = 34;
  // 自拼规则
  string zp_rule = 35;
}

enum LectureModuleType {
  Unknown = 0;
  // 学规则
  LearnRule = 1;
  // 听讲解（导读）
  Guide = 2;
  // 玩一玩（中文）
  WanYiWan         = 3;
  // 玩一玩（自拼）
  WanYiWanZP       = 4;
  // 练一练（英语）
  LianYiLian       = 5;
  // 练一练（自拼）
  LianYiLianZP     = 6;
  // 智能写作
  IntelligentWrite = 7;
  // 创意表达
  SpeakingExpress  = 8;
  // 跟读
  FollowRead       = 9;
  // 原音
  Original         = 10;
  // 我的作品
  MyProducts       = 11;
  // 创意写作
  CreativeWrite    = 12;
  // 随堂练
  ModuleTypePractice         = 13;
  // 随堂测
  ModuleTypeTest             = 14;
  // 拓展阅读
  ExtendRead       = 15;
}

message LectureModule {
  int64 id = 1;
  // 课节id
  int64 lecture_id = 2;
  // 模块类型 1-学规则，2-听讲解（导读），3-玩一玩，4-玩一玩（自拼），5-练一练，6-练一练（自拼），7-智能写作，8-创意表达，9-跟读，10-原音，11-我的作品，12-创意写作，13-随堂练，14-随堂测，15-相关课程、
  LectureModuleType m_type = 3;
  // 模块名
  string m_name = 4;
  // 模块配置
  LectureModuleBaseConf conf = 5;
  int64 sort = 6;
  int64 ct = 7;
  int64 ut = 8;
}

message LectureModuleBaseConf {
  string content_conf = 1;
  LectureModuleRouterConf router_conf = 2;
}

message LectureModuleRouterConf {
  // 路由信息
  string router = 1;
  // 动作：play,h5_link,app_link
  string action = 2;
}

message BatchUpsertLectureModulesReq {
  repeated LectureModule modules = 1;
}

message GetLectureModulesReq {
  int64 lecture_id = 1;
}

message GetLectureModulesRes {
  repeated LectureModule modules = 1;
}

message AppLectureModule {
  message AppLectureModuleIcon {
    // 左上角
    string left_up_color = 1;
    // 主图标
    string main_icon = 2;
    // 星星色
    string star_color = 3;
    // 背景色 #ffffff
    string bg_color = 4;
  }

  int64 id = 1;
  // 课节id
  int64 lecture_id = 2;
  // 模块类型 1-学规则，2-听讲解（导读），3-玩一玩，4-玩一玩（自拼），5-练一练，6-练一练（自拼），7-智能写作，8-创意表达，9-跟读，10-原音，11-我的作品，12-创意写作，13-随堂练，14-随堂测，15-相关课程
  LectureModuleType m_type = 3;
  // 模块名
  string m_name = 4;
  // 图标
  AppLectureModuleIcon icon_conf = 5;
  // 学习进度（星星数）-1-不展示星星
  int64 cur_progress = 6;
  // 配置信息
  LectureModuleBaseConf conf = 7;
}

message GetAppLectureModulesReq {
  int64 lecture_id = 1;
  int64 lecture_module_id = 2;
  // 模块类型 1-学规则，2-听讲解（导读），3-玩一玩，4-玩一玩（自拼），5-练一练，6-练一练（自拼），7-智能写作，8-创意表达，9-跟读，10-原音，11-我的作品，12-创意写作，13-随堂练，14-随堂测，15-相关课程
  LectureModuleType lecture_module_type = 3;
}

message GetAppLectureModulesRes {
  repeated AppLectureModule modules = 1;
}

message BatchGetLectureOrPicBookReq {
  repeated int64 lecture_ids = 1;
  repeated int64 picture_book_ids = 2;
}

message BatchGetLectureOrPicBookRes {
  repeated Lecture lecture_infos = 1;
  repeated PicturebookInfo picture_book_infos = 2;
}

message ReportLectureModuleProgressReq {
  // 课节id
  int64 lecture_id = 1;
  // 课节模块id
  int64 module_id = 2;
  // 模块类型 1-学规则，2-听讲解（导读），3-玩一玩，4-玩一玩（自拼），5-练一练，6-练一练（自拼），7-智能写作，8-创意表达，9-跟读，10-原音，11-我的作品，12-创意写作，13-随堂练，14-随堂测，15-相关课程
  LectureModuleType m_type = 3;
  // 学习进度 0-100，0表示没有开始，会自动忽略
  int64 progress = 4;
  // 学习时长,单位秒
  int64 duration_sec = 5;
}

message GetDynamicUtmSourceReq {
  string oaid = 1;
  string imei = 2;
  string h_ch = 3;
}
message GetDynamicUtmSourceRes {
  string utm_source = 1;
}

message CampCrtRequest {
  // 训练营名称
  string name = 1;
  // 训练营描述
  string description = 2;
  // 训练营头图信息
  ImageCrtResource front_picture = 3;
}

message CampUptRequest {
  // 训练营id
  int32 camp_id = 1;
  // 训练营名称
  string name = 2;
  // 训练营描述
  string description = 3;
  // 训练营头图信息
  ImageCrtResource front_picture = 4;
}

message CampUptStatusRequest {
  // 训练营id
  int32 camp_id = 1;
  // 训练营状态: 2:可用, 3:不可用
  CampStatus status = 2;
}

message CampGetRequest {
  // 训练营id
  int32 camp_id = 1;
}

message CampSearchRequest {
  // 训练营名称
  string camp_name = 1;
}

message CampGetResponse {
  // 训练营信息
  Camp camp = 1;
}

message CampListRequest {
  // 名称
  string name = 1;
  int64 offset = 2;
  int64 limit = 3;
}

message CampListResponse {
  // 训练营信息
  repeated Camp items = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}

enum CourseType {
  // 无效类型
  UnknownCourseType = 0;
  // 正价课
  course_type_formal = 1;
  // 体验课
  course_type_trial = 2;
  // 分销课
  course_type_distribution = 3;
  // 赠送课
  course_type_gift = 4;
}

message CourseExtra {
  // 预估价格，单位：分
  int32 price = 1;
}

message CourseCrtRequest {
  // 课程名称
  string name = 1;
  // 分级: 0:体验营, 1:L1, 2:L2, 3:L3, 4:L4, 5:L5, 6:L6, 7:L7, 8:L8, 100:L100
  CourseLevel level = 2;
  // 课程描述
  string description = 3;
  // 课程头图信息
  ImageCrtResource front_picture = 4;
  // 训练营id
  int32 camp_id = 5;
  // 套餐信息
  int64 package_id = 6;
  // 购买链接
  string buy_url = 7;
  // 包含的套系列表
  repeated string series_list = 8;
  // 课程类型：1：正价课(level=1/2/3/4)，2：体验课(level=0)，3：分销课(level=100)，4：赠送课(level=100)， 5：拓课包
  CourseType course_type = 9;
  // 一些相对不重要的信息
  CourseExtra extra = 10;
  // 分类标签 (中文，英文，阅读主线营，阅读拓展营，学术考试营）
  repeated string category_tags = 11;
  // 课程结业证书
  ImageCrtResource cert_template_picture = 12;
}

message CourseUptRequest {
  // 课程id
  int32 course_id = 1;
  // 课程名称
  string name = 2;
  // 分级: 0:体验营, 1:L1, 2:L2, 3:L3, 4:L4, 5:L5, 6:L6, 7:L7, 8:L8 100:L100
  CourseLevel level = 3;
  // 课程描述
  string description = 4;
  // 课程头图信息
  ImageCrtResource front_picture = 5;
  // 训练营id
  int32 camp_id = 6;
  // 套餐信息
  int64 package_id = 7;
  // 购买链接
  string buy_url = 8;
  // 包含的套系列表
  repeated string series_list = 9;
  // 课程类型：1：正价课(level=1/2/3/4)，2：体验课(level=0)，3：分销课(level=100)，4：赠送课(level=100)， 5：拓课包
  CourseType course_type = 10;
  // 一些相对不重要的信息
  CourseExtra extra = 11;
  // 分类标签 (中文，英文，阅读主线营，阅读拓展营，学术考试营）
  repeated string category_tags = 12;
  // 课程状态 1: 初始化 2: 已绑定套餐 3: 可用 4：不可用  备注 (暂只有小程序返回课程才会过滤)
  CourseStatus status = 13;
  // 课程结业证书
  ImageCrtResource cert_template_picture = 14;
}

message CourseGetRequest {
  // 课程id
  int32 course_id = 1;
}

message CourseSearchRequest {
  // 课程名称
  string course_name = 1;
}

message CourseGetResponse {
  // 课程信息
  Course course = 1;
}

message CourseListRequest {
  // 训练营id
  int32 camp_id = 1;
  int64 offset = 2;
  int64 limit = 3;
  // 名称
  string name = 4;
}

message CourseListResponse {
  // 课程信息
  repeated Course items = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}

message AdminCourseListRequest {
  int64 offset = 1;
  int64 limit = 2;
  // 按 course_type 搜索：0：不搜索，1：正价课，2：体验课，3：分销课，4：赠送课，5：拓课包
  int32 course_type = 3;
  string course_name = 4;
}

message AdminCourseListResponse {
  repeated Course courses = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}

message AdminCourseGetRequest {
  int32 course_id = 1;
}

message AdminLectureListRequest {
  // 课程id
  int32 course_id = 1;
  int64 offset = 2;
  int64 limit = 3;
  // 描述信息
  string description = 4;
  // 名称
  string name = 5;
  // 套系
  string series = 6;
  // 状态
  LectureStatus status = 7;
}

message AdminLectureListResponse {
  repeated Lecture lectures = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}

message AdminLectureGetRequest {
  int32 lecture_id = 1;
}

message LectureCrtRequest {
  // 课节名称
  string name = 1;
  // 课节编号
  int32 lecture_number = 2;
  // 课节描述：RAZ
  string description = 3;
  // 课节头图信息
  ImageCrtResource front_picture = 4;
  // 课程id
  int32 course_id = 5;
  // 导读资源信息
  MediaCrtResource guide_resource = 6;
  // 原音资源信息
  MediaCrtResource original_resource = 7;
  // 已学习量
  int32 studied_number = 8;
  // 课节 level, 1:L1, 2:L2...
  LectureLevel level = 9;
  // 词汇量
  int32 vocabulary = 10;
  // 难度
  string grade = 11;
  // 套系
  string series = 12;
  // 蓝思值
  string lexile = 13;
  // 标签列表
  repeated string tag_list = 14;
  // 适合年龄
  string ages = 15;
  // 条形码
  string bar_code = 16;
  // 跟读模块book_id
  int64 book_id = 17;
  // 「练一练」模块 book_id
  int64 lianyilian_book_id = 18;
  // 「玩一玩」模块 book_id
  int64 wanyiwan_book_id = 19;
  // 新词数
  int32 new_words = 20;
  // wpm文本
  string wpm = 21;
  // 是否存在题目练习
  bool has_questions = 30;
  // 是否展示口语表达(创意表达)
  bool has_speaking_express = 31;
  // 是否展示创意写作
  bool has_creative_write = 32;
  // 自拼规则
  string zp_rule = 33;
}

message LectureUptRequest {
  // 课节id
  int32 lecture_id = 1;
  // 课节编号
  int32 lecture_number = 2;
  // 课节名称
  string name = 3;
  // 课节描述：RAZ
  string description = 4;
  // 课节头图信息
  ImageCrtResource front_picture = 5;
  // 课程id
  int32 course_id = 6;
  // 导读资源信息
  MediaCrtResource guide_resource = 7;
  // 原音资源信息
  MediaCrtResource original_resource = 8;
  // 已学习量
  int32 studied_number = 9;
  // 课节 level, 1:L1, 2:L2...
  LectureLevel level = 10;
  // 词汇量
  int32 vocabulary = 11;
  // 难度
  string grade = 12;
  // 套系
  string series = 13;
  // 蓝思值
  string lexile = 14;
  // 标签列表
  repeated string tag_list = 15;
  // 适合年龄
  string ages = 16;
  // 条形码
  string bar_code = 17;
  // 跟读模块book_id
  int64 book_id = 18;
  // 「练一练」模块 book_id
  int64 lianyilian_book_id = 19;
  // 「玩一玩」模块 book_id
  int64 wanyiwan_book_id = 20;
  // 新词数
  int32 new_words = 21;
  // wpm文本
  string wpm = 22;
  // 课节名称
  string alias_name = 23;
  // 课节编号别名 （用作自定义 “第X课” 文本渲染）
  string alias_lecture_num = 24;
  // 是否存在题目练习: 0 不配置，1：不存在，2：存在
  int32 has_questions = 30;
  // 是否展示口语表达(创意表达): 0 不配置 1：不展示 2：展示
  int32 has_speaking_express = 31;
  // 是否展示创意写作: 0 不配置 1：不展示 2：展示
  int32 has_creative_write = 32;
  // 自拼规则
  string zp_rule = 33;
}

message LectureUnlockRequest {
  // 课节id
  int32 lecture_id = 1;
}

message LectureBatchUnlockRequest {
  // 课节ids
  repeated int32 lecture_ids = 1;
  // 课节状态
  LectureStatus status = 2;
}

message LectureBatchUnlockResponse {
  // 成功课节ids
  repeated int32 success_ids = 1;
  // 失败课节ids
  repeated int32 failed_ids = 2;
}

message LectureGetRequest {
  // 课节id
  int32 lecture_id = 1;
}

message LikeLectureRequest{
  int32 lecture_id = 1;
}

message CancelLikeLectureRequest {
  int32 lecture_id = 1;
}

message SearchRequest {
  message QueryItem {
    // 按哪个字段查询，可选项：bar_code（条形码）, image (图像搜索)
    string field = 1;
    // 待查询字段的值，为空说明不作为搜索项。图像搜索时，这里需要传用户图片uri
    string value = 2;
  }
  // 查询任意字符串，可不传或传空，为空时不作为搜索项
  string query = 1;
  // 单独查询某些字段
  repeated QueryItem items = 2;
  int64 limit = 3;
  int64 offset = 4;
}

message SearchResponse {
  repeated UserLecture lectures = 1;
  int64 offset = 2;
  // 图像搜索功能，此字段无效
  int64 total = 3;
  // 图像搜索功能，此字段无效
  bool more = 4;
}

message FreeLectureGetRequest {}

message LectureSearchRequest {
  // 课节名称
  string lecture_name = 1;
}

message LectureGetResponse {
  // 课节信息
  Lecture lecture = 1;
}

message LectureListRequest {
  // 课程id
  int32 course_id = 1;
  // 描述信息
  string description = 2;
  int64 offset = 3;
  int64 limit = 4;
  // 名称
  string name = 5;
  // 套系
  string series = 6;
}

message LectureListResponse {
  // 课节信息
  repeated Lecture items = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}

message GetUserCoursesRequest {
  int64 offset = 1;
  int64 limit = 2;
}

message BPLecture {
  // 课节id
  int32 id = 1;
  // 课节名字
  string name = 2;
  // 课节描述：RAZ
  string description = 3;
  // 课节头图信息
  ImageResource front_picture = 4;
  // 课程id
  int32 course_id = 5;
  // 导读资源信息
  MediaResource guide_resource = 6;
  // 原音资源信息
  MediaResource original_resource = 7;
  // 课节编号
  int32 lecture_num = 8;
  // 课节编号别名
  string alias_lecture_num = 9;
}

message BPGetUserLectureListRequest {
  int64 offset = 1;
  int64 limit = 2;
  int32 course_id = 3;
}

message BPGetUserLectureListResponse {
  repeated BPLecture items = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}

message BPGetUserProfileResponse {
  // 用户id
  int64 uid = 1;
  // 手机号
  string phone = 2;
  // 用户名
  string name = 3;
  // 头像
  string avatar = 4;
  // 有系统课
  bool has_formal_course = 5;
  // 有科普课
  bool has_science_course = 6;
}

message BPAuthQRCodeReq {
  enum BPAuthScene  {
    UNKNOWN_AUTH_SCENE = 0;
    // 听力熊
    LISTEN_BEAR = 1;
    // 牛听听
    NIU_LISTEN = 2;
  }
  // 授权场景
  BPAuthScene auth_scene = 1;
  // 设备id
  string h_did = 2;
}

message BPAuthQRCodeRes {
  // 二维码或小程序码url
  string qrcode_url = 1;
}


message BPBatchReportUserStudyReq {
  message Record {
    enum StudyScene {
      UNKNOWN_STUDY_SCENE = 0;
      // 听力熊
      LISTEN_BEAR = 1;
      // 牛听听
      NIU_LISTEN = 2;
    }
    enum StudyResourceType {
      UNKNOWN_RESOURCE_TYPE = 0;
      DAODU = 1;
      YUANSHENG = 2;
    }
    // 课程id
    int32 course_id  = 1;
    // 课节
    int32 lecture_id = 2;
    // 学习场景
    StudyScene study_scene = 3;
    // 学习资源类型
    StudyResourceType study_resource_type = 4;
    // 单次学习时长
    int32 duration = 5;
    // 完成进度(0-100取整)
    int32 progress = 6;
    // 学习时间点 用过记录当前动作发生的时间
    int32 study_time_stamp = 7;
    // 用户id 用户多账号，听力熊侧用户离线学习数据多账号间无法隔离。
    int64 uid = 8;
  }
  repeated Record records = 1;
}

message BPBatchReportUserStudyResponse {
  // 课程id
  int32 course_id  = 1;
  // 课节
  int32 lecture_id = 2;
  // 学习场景
  int32 study_scene = 3;
  // 学习资源类型
  int32 study_resource_type = 4;
  // 单次学习时长
  int32 duration = 5;
  // 完成进度(0-100取整)
  int32 progress = 6;
  // 学习时间点 用过记录当前动作发生的时间
  int32 study_time_stamp = 7;
  // 用户id 用户多账号，听力熊侧用户离线学习数据多账号间无法隔离。
  int64 uid = 8;
}


message UserCourse {
  Course course = 1;
  // 整个课程的学习进度：0-100
  int32 studyed_rate = 2;
  // 是否已开课
  bool owned = 3;
  // 可选。最近正在学习的课节
  int32 studying_lecture_id = 4;
  // 是否已购买
  bool bought = 5;
  // 开课时间
  int64 course_start_at = 6;
}

message GetUserCoursesResponse {
  // 课程信息
  repeated UserCourse items = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}

message BPGetUserCoursesResponse {
  message BPUserCourse {
    int32 id = 1;
    // 课程名称
    string name = 2;
    // 分级: 0:体验营, 1:L1, 2:L2, 3:L3, 4:L4, 5:L5, 6:L6, 7:L7, 100:L100
    CourseLevel level = 3;
    // 课程描述
    string description = 4;
    // 课程头图信息
    ImageResource front_picture = 5;
    // 课程类型：1：正价课(level=1/2/3/4)，2：体验课(level=0)，3：分销课(level=100)，4：赠送课(level=100)， 5：拓课包
    int32 course_type = 6;
  }
  // 课程信息
  repeated BPUserCourse items = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}

message UserLecture {
  Lecture lecture = 1;
  // 学习进度：0-100
  int32 studyed_rate = 2;
  // 就目前的设计来看，studyed_rate >= 95 算完成。这个由后端来判断，方便后续逻辑变更。
  bool is_study_finish = 3;
  // 学习次数
  int32 study_count = 4;
  // 已废弃，优先使用 status 字段（status 为 1 未购买，不为 1 已购买）。是否购买。未购买的话，lecture.Resource 为 null
  bool owned = 5;
  // 已学习完成次数
  int32 finished_count = 6;
  // 导读课播放进度（单位：s）
  int32 guide_play_pos = 7;
  // 当前用户看到的课节状态：1：未购买；2：资源未ready；3：未解锁；4：可上课；5：已下架
  int32 status = 8;
  // 可选，当 status == 3 时有效。解锁时间戳。
  int64 unlock_timestamp = 9;
  // 是否喜欢
  bool liked = 10;
  // 使用哪个版本上课。0：默认版本；1: 22.09.21体验课改版版本
  int32 inclass_version = 11;
}

message UserLectureWithCourse {
  // 课节信息
  UserLecture user_lecture = 1;
  // 所属课程信息
  UserCourse user_course = 2;
}

message GetUserLecturesResponse {
  // 课节信息
  repeated UserLecture items = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}

message GetBookshelfLectureListRequest {
  // 目前仅支持: already_read
  string bookshelf_type = 1;
  int64 offset = 2;
  int64 limit = 3;
}

message GetBookshelfLectureListResponse {
  repeated UserLecture items = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}

message CheckinListRequest {
  int32 lecture_id = 1;
  // 合法的取值包括: text, image, video
  repeated string checkin_types = 2;
  // 仅支持两个取值: ct, like_count。默认为 ct。
  string sort_by = 3;
  int64 offset = 4;
  int64 limit = 5;
}

message User {
  int64 id = 1;
  string name = 2;
  string avatar = 3;
}

message Checkin {
  int32 id = 1;
  int32 lecture_id = 2;
  User user = 3;
  string content = 4;
  repeated MediaResource resources = 5;
  // 是否被禁(预留字段)
  bool banned = 6;
  // 点赞数
  int32 like_count = 7;
  // 创建时间
  int64 created_at = 8;
  // 更新时间
  int64 updated_at = 9;
}

message UserCheckin {
  Checkin checkin = 1;
  // 是否点过赞
  bool liked = 2;
}

message CheckinListResponse {
  // 此字段即将废弃，请使用 items 字段。
  repeated Checkin checkins = 1;
  repeated UserCheckin items = 2;
  int64 offset = 3;
  int64 total = 4;
  bool more = 5;
}

message UserCheckinListRequest {
  int64 offset = 1;
  int64 limit = 2;
}

message UserCheckinListResponse {
  repeated UserCheckin items = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}

message PostCheckinRequest {
  int32 lecture_id = 1;
  string content = 2;
  // resource 里的 url，应传入 uri
  repeated MediaResource resources = 4;
}

message GetCheckinByIdRequest {
  int32 id = 1;
  // 如果 forge 为 true，则将纯文字打卡伪装为图片类型的打卡
  bool forge = 2;
}

message LikeCheckinRequest {
  int32 checkin_id = 1;
}

message CancelLikeCheckinRequest {
  int32 checkin_id = 1;
}

message ShareCheckinRequest {
}

message ShareCheckinResponse {
  // 学习统计
  message StudyStatistics {
    // 今天读完的数量
    int32 today_book_count = 1;
    // 今天阅读时长(单位: 秒)
    int32 today_duration_secs = 2;
    // 累计阅读天数
    int32 day_count = 3;
    // 今天磨耳朵时长
    int32 today_practice_secs = 4;
  }

  StudyStatistics study_statistics = 1;
  // 链接
  string url = 3;
}

message AuditLog {
  int32 id = 1;
  // 操作者
  string op_user = 2;
  // 操作类型
  string action = 3;
  // 新值
  string new_value = 4;
  // 旧值
  string old_value = 5;
  // 目标id
  int32 target_id = 6;
  // 操作时间
  int64 created_at = 7;
}

message AuditLogListRequest {
  // 操作者
  string op_user = 1;
  // 操作类型
  string action = 2;
  int64 offset = 3;
  int64 limit = 4;
  // 统计时间
  repeated int64 ts = 5;
}

message AuditLogListResponse {
  // 审计日志信息
  repeated AuditLog items = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}

message AuditLogGetRequest {
  // 审计日志id
  int32 auditlog_id = 1;
}

message AuditLogGetResponse {
  // 审计日志信息
  AuditLog auditlog = 1;
}

message CourseUserIdAddRequest {
  // 课程id
  int32 course_id = 1;
  // 用户id
  int64 user_id = 2;
  // 订单id
  int64 order_id = 3;
}

message CourseUserIdDeleteRequest {
  // 课程id
  int32 course_id = 1;
  // 用户id
  int64 user_id = 2;
}

message CourseUserChangeReq {
  // 用户id
  int64 user_id = 1;
  // 旧课程id
  int32 old_course_id = 2;
  // 新课程id
  int32 new_course_id = 3;
}

message CourseMember {
  int32 id = 1;
  // 课程id
  int32 course_id = 2;
  // 用户id
  int64 user_id = 3;
  // 学习进度
  int32 studied_rate = 4;
  // 订单id
  int64 order_id = 5;
  // 备注信息
  string remark_info = 6;
  // 创建时间
  int64 created_at = 7;
  // 更新时间
  int64 updated_at = 8;
}

message CourseUserSetPeriodRequest {
  // 课程id
  int32 course_id = 1;
  // 用户id
  int64 user_id = 2;
  // 班期，形如 "20220711"
  string period = 3;
}

message CourseUserSetPeriodResponse {}

message ByteDanceAdPageConversionCallbackRequest {
  // 来自：https://event-manager.oceanengine.com/docs/8650/all_events/
  string event_type = 1;
  // __CLICKID__ 宏的值
  string click_id = 2;
  // 事件发生时的时间戳(ms)
  int64 timestamp_ms = 3;
}

message ByteDanceAdPageConversionCallbackResponse {}

message ReportUserLevelRequest {
  // 1: L1, 2:L2, 3: L3, 4: L4
  LectureLevel level = 1;
  // 用户答题结果，和产品约定好的，方便统计。格式类似：{"Age":"3岁","Reading":"200-500本","Raz":"B-C","Heinemann":"GK","Oxford":"3级","Lexile":"201-300L","AR":""}
  map<string, string> extra = 2;
}

message ReportUserLevelResponse {}

enum UserEventType {
  invalid_event_type = 0;
  // 查看落地页
  view_landing_page = 1;
  // 点击报名按钮
  click_signup_button = 2;
  // 点击支付按钮
  click_paying_button = 3;
  // 支持成功事件
  paying_success = 4;
  // 点击学习报告
  click_study_report = 5;
  // 完成学习体验课跟读
  finish_trial_lecture_follow_me = 6;
  // 点击TinaGPT
  click_tinagpt = 7;
  // 点击预约直播
  click_appointment_live = 8;
  // 点击去学习
  click_to_study = 9;
  // 点击我的课程
  click_my_course = 10;
  // 打开阅读营App
  open_readcamp_app = 11;

}

message ReportUserEventRequest {
  // 事件类型：1：查看落地页，2：点击报名按钮，3：点击支付按钮，4：支付成功事件，7: 点击tinaGPT，8:点击预约直播，9:点击去学习，10:点击我的课程,11:打开阅读营App
  UserEventType event_type = 1;
}

message UserEventHistory {
  int64 id = 1;
  // 用户id
  int64 uid = 2;
  // 事件类型
  UserEventType event_type = 3;
  // 位置信息
  string location = 4;
  // 设备名
  string device_name = 5;
  // 创建时间戳
  int64 ct = 6;
  // 更新时间戳
  int64 ut = 7;
}

message AdminQueryUserEventHisReq {
  // 用户id
  int64 uid = 1;
  int64 limit = 2;
  int64 offset = 3;
  repeated int64 event_type = 4;
}

message AdminQueryUserEventHisRes {
  repeated UserEventHistory items = 1;
  int64 offset = 2;
  bool more = 3;
  int64 total = 4;
}

message SetUserLevelRequest {
  // 客户 user_id。不管在企微还是平台，都可以拿到 uid，
  int64 user_id = 1;
  // level, 1: Level1, 2: Level2...
  int32 level = 2;
}

message SetUserLevelResponse {}

message QueryUserLevelRequest {}

message QueryUserLevelResponse {
  // 0:未定级，1:L1, 2:L2, 3:L3, 4: L4
  int32 user_level = 1;
  map<string, string> extra = 2;
}

message GetQWUserInfoRequest {
  // 客户企微 id
  string external_user_id = 1;
}

message LogisticsAddressInfo {
  // 收件人名字
  string username = 1;
  // 收件手机号
  string phonenumber = 2;
  // 省份
  string province = 3;
  // 城市
  string city = 4;
  // 区
  string area = 5;
  // 门牌号地址
  string address = 6;
}

message QwInvitation {
  message QwInvitee {
    // 被邀请人id
    int64 invitee_id = 1;
    // 体验课购买时间
    int64 trial_own_time = 2;
    // 体验课是否完课(体验课用户级别四课节导读进度90%及以上)
    bool trial_finished = 3;
    // 是否购买正价课
    bool formal_bought = 4;
    // 正价课是否全退
    bool formal_refunded = 5;
  }
  // 邀请人id
  int64 inviter_id = 1;
  // 邀请关系
  repeated QwInvitee qw_invitees = 2;
  // 可参与周周有礼任务次数
  int32 weekly_gift_left_count = 3;
}

message GetQWUserInfoResponse {
  message LevelInfo {
    // 1:L1, 2:L2, 3:L3, 4: L4
    int32 user_level = 1;
    // 和user_level上报格式相同，用户填写的问卷信息
    map<string, string> extra = 2;
  }
  message UserBase {
    // 伴鱼内部 uid
    int64 uid = 1;
    // 手机号，中间四位模糊化了，如 188****9191
    string phone = 2;
    // 用户定级信息：0：未定级，1：L1, 2:L2, 3: L3, 4:L4
    LevelInfo level_info = 3;
    // 用户评级信息，可能得结果为：空字符串，SS,S,A,B,C。其中空字符串代表未评级。
    string leads_level = 4;
    // 注册时间戳（s）
    int64 register_timestamp = 5;
    // 注册来源
    string register_source = 6;
    // 是否绘本 vip
    bool is_picturebook_vip = 7;
    // 物流地址信息
    LogisticsAddressInfo logistics_address = 8;
    // 宝宝名，用户未设置，则为空字符串
    string baby_name = 9;
    // 用户头像
    string avatar = 10;
    // 用户昵称
    string nickname = 11;
    // 是否下载app
    bool is_download_app = 12;
  }
  message LectureInfo {
    // 课节的级别，0是导学课
    int32 lecture_level = 1;
    // 课节的学习进度 0-100
    int32 studied_rate = 2;
    // lecture number
    int32 lecture_number = 3;
  }
  message TrialCourseInfo {
    // 课节学习进度列表
    repeated LectureInfo lectures = 1;
    // 下单时间戳（s）
    int64 order_timestamp = 2;
    // 班期，如0704
    string course_period = 3;
  }
  message CourseInfo {
    // 课程 id
    int32 course_id = 1;
    // 下单时间戳（s）
    int64 order_timestamp = 2;
    // 课程中文名
    string course_name = 3;
    // 课程类型
    CourseType course_type = 4;
  }
  message LeadsLevelTags {
    // AI课-是否体验营用户
    bool is_aicourse_experience_user = 1;
    // AI课-是否正式营用户
    bool is_aicourse_system_user = 2;
    // 少儿-是否付费用户
    bool is_kid_paying_user = 3;
    // 少儿-用户级别
    string kid_user_level = 4;
    // 少儿-是否有预约体验课
    bool had_appointed_kid_audition = 5;
    // 绘本-是否vip
    bool is_picturebook_vip = 6;
    // 绘本-是否终身 vip
    bool is_picturebook_forever_vip = 7;
  }
  message TeacherInfo {
    // 老师id，字符串类型
    string teacher_id = 1;
  }
  // 学习规划
  message StudyPlan {
    // 学习规划状态: 0=未申请, 1=已申请待规划, 2=已规划
    int32 status = 1;
  }
  message UserEvaluation {
    int32 evaluation_id = 1;
    int32 course_id = 2;
    int32 course_level = 3;
  }
  UserBase user_info = 1;
  TrialCourseInfo trial_course_info = 2;
  repeated CourseInfo bought_courses_list = 3;
  LeadsLevelTags leads_level_tags = 4;
  repeated Order orders = 5;
  QwInvitation qw_invitation = 6;
  TeacherInfo teacher = 7;
  StudyPlan study_plan = 8;
  repeated UserEvaluation user_evaluations = 9;
  // 用户统计信息
  UserStudyStatistics statistics = 10;
  // 首次正式课购买时间
  int32 first_formal_bought_time = 11;
}

message GetTeacherDynamicQrcodeRequest {
  // 接口调用来源，order_success：购买成功页
  string scene = 1;
}

message GetTeacherDynamicQrcodeResponse {
  string qrcode_url = 1;
  // 老师的微信昵称
  string wechat_nickname = 2;
  // 学生的手机号
  string student_fuzzy_phone = 3;
}

message BanCheckinRequest {
  int32 checkin_id = 1;
}

message BanCheckinResponse {}

message UnBanCheckinRequest {
  int32 checkin_id = 1;
}

message UnBanCheckinResponse {}

message BeginStudyingLectureRequest {
  // 课节编号
  int32 lecture_id = 1;
}

message BeginStudyingLectureResponse {}

message GetUserStatusRequest {}

message GetUserStatusResponse {
  message UserCourseStatus {
    // 是否仅购买了体验课
    bool has_only_bought_trial_course = 1;
    // 体验课开课时间戳，仅在用户购买了体验课的条件下有效
    int64 trial_course_start_timestamp = 2;
    // 是否弹出正价课购买页
    // 此字段废弃，删除前一律返回 false
    bool is_popup_formal_course_purchase = 3;
    // 体验课课节是否全部解锁
    bool all_trial_lectures_unlocked = 4;
    // 是否弹出学习规划申请提示
    bool is_popup_study_plan_apply = 5;
    // 是否有正价课开课
    bool has_open_formal_course = 6;
  }
  message UserTeacherStatus {
    // 是否已经添加老师微信
    bool has_added_teacher = 1;
    // 如果已添加，会返回老师的id回来。返回字符串，否则会溢出
    string teacher_id = 2;
  }
  message WechatOfficialAccountStatus {
    // 是否关注微信公众号
    bool is_following = 1;
  }
  message FreeLectureStatus {
    // 导学课 lecture_id
    int32 free_lecture_id = 1;
    // 学习进度：0-100
    int32 studyed_rate = 2;
    // 是否学完
    bool is_study_finish = 3;
  }
  UserCourseStatus course_status = 1;
  UserTeacherStatus teacher_status = 2;
  WechatOfficialAccountStatus wechat_official_account_status = 3;
  FreeLectureStatus free_lecture_status = 4;
}

message GetTeacherCoursePeriodsRequest {}

message GetTeacherCoursePeriodsResponse {
  message TeacherCoursePeriodInfo {
    // 班期，如0704
    string course_period = 1;
    // 班级 id，用于接下来请求学生列表用
    int64 class_id = 2;
    // 课程 id，这个是 AI 课那边的课程id。
    int64 course_id = 3;
  }
  // 班期已按开课时间从大到小排序。
  repeated TeacherCoursePeriodInfo course_periods = 1;
}

message GetStudentsInClassRequest {
  // 班级 id （class_id和uid必须二选一，class_id的优先级更高）
  int64 class_id = 1;
  // 要搜索的uid （class_id和uid必须二选一，class_id的优先级更高）
  int64 uid = 2;
  // 可选，是否添加老师微信：0：不做筛选；1：已添加；2：未添加
  int32 has_added_teacher = 3;
  // 可选，今日是否完课：0：不做筛选；1：今日已完课；2：今日未完课
  int32 has_today_lecture_finished = 4;
  // 必选，根据「完课天数」筛选：-1：不做筛选，0-4：使用筛选（注意，不传相当于传0，会做筛选）
  int32 finished_day_count = 5;
  // 可选，根据「第n课节是否已完成」筛选时，选择的哪节课：0：导读课，1：第一节... 是否筛选取决于 has_lecture_finished 字段
  int32 queried_lecture_number = 6;
  // 可选，queried_lecture_number 字段的筛选条件：0：不做筛选，1：已完成，2：未完成...
  int32 has_lecture_finished = 7;
  // 用户是否定级：0：不做筛选；1：未定级，2：已定级
  int32 has_level = 8;
  // 末次活跃城市等级筛选：-1：不做筛选。其他筛选项：0-6(用户中心城市级别枚举)
  int64 city_level = 9;
  // 套餐搜索，0: 不做搜索；497103259887884: Tina阅读营9.9元体验课; 502619776925966:【内部TMK专属】0元体验课; 525055204147468: Raz 30天课; 525935068944654:【历史分销用户转Leads】Raz 30天课(老); 494040223445262: Tina阅读营5天体验课; 504737907349772:Tina阅读营0元体验课
  int64 package_id = 10;
  // 是否包含tmk 套餐，默认 false，不包含。
  bool include_tmk_package = 11;
  // 是否用转介绍过滤，默认false，不使用
  bool has_invitation = 12;
  // 一级渠道id
  int32 l1_id = 13;
  // 二级渠道id
  int32 l2_id = 14;
  // 是否购买正价课筛选：0：不做筛选；1：7天内转化；2：30天内转化；3：30天以上转化；4：未转化(未购买正价课)
  int32 bought_formal = 15;

  // 电销相关：0: 默认，默认不展示电销leads；1：展示全部leads；2：只展示电销；3：不展示电销
  int32 show_eng_leads = 16;

  int64 limit = 17;
  int64 offset = 18;

  // 是否使用渠道筛选，默认false，不使用(将废弃)
  bool use_utm_source = 19;
  // 使用渠道筛选时的渠道值，use_utm_source=true时才生效(utm_souce可为空表示无渠道值)(将废弃)
  string utm_source = 20;
  // 用户下载app： 0：默认 1：未下载 2：已下载
  int32 user_download_app = 21;
  // 可选 体验课课程id （生产新体验课：150007， 旧体验课60001，默认使用老的体验课进行查询过滤）
  int32 trial_course_id = 22;
}

message GetStudentsInClassResponse {
  message StudentInfo {
    int64 uid = 1;
    // 头图 url
    string avatar = 2;
    // 伴鱼内昵称
    string nickname = 3;
    // 11位手机号，需要考虑为空的情况。至少有两种情况为空：1. 未绑定手机号；2. 绑定的手机号未非国内手机号
    string phone = 4;
    // 用户定级，0：未定级；1：L1...
    int32 level = 5;
    // 末次活跃城市等级
    string city_level = 6;
    // 是否加了老师微信
    bool has_added_teacher = 7;
    // 老师对学生的备注。如果未加好友，则此字段为空。
    string remark = 8;
    // 企微 id，用于跳转用户微信会话
    string external_user_id = 9;
    // 老师对该学生的外呼跟进记录
    string webcall_remark = 10;
    // 为转介绍leads时展示邀请人uid
    int64 inviter_id = 11;
    // 可参与周周有礼任务次数
    int32 weekly_gift_left_count = 12;
    // 学习规划状态: 0=未申请, 1=已申请待规划, 2=已规划
    int32 study_plan_status = 13;
    // 是否一对一英语付费
    bool is_1v1_eng_order = 14;
    // 是否新数付费
    bool is_math_order = 15;
    // 是否绘本VIP付费
    bool is_pic_vip_order = 16;
    // 是否AI课付费
    bool is_ai_order = 17;
  }
  repeated StudentInfo students = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}

message OrderListRequest {
  // 商城单过滤条件：0：不做过滤，1：待确认地址
  int32 shopmall_status_filter = 1;
  int64 offset = 2;
  int64 limit = 3;
}

message Order {
  // 订单号
  string id = 1;
  // 套餐 id
  string package_id = 2;
  // 套餐名称
  string package_desc = 3;
  // 套餐描述
  string package_remark = 10;
  // 图片 url (从套餐的业务自定义字段 ShowDetail 解析而来)
  string image_url = 11;
  // 订单金额
  int32 total_price = 4;
  // 实际支付金额
  int32 price = 5;
  // 支付订单号
  string pay_order = 6;
  // 当前订单状态:0初始化状态；20: 订单已完成 -10:部分退款；-20:子订单全部退款
  int32 status = 7;
  // 订单对应的商城实物订单状态。用于前端判断用户是否需要确认。
  // 当且仅当返回值为「待赠送」、「付费未发货」时，需要用户确认。
  // 此处返回值来自于 https://gitlab.pri.ibanyu.com/server/shopmall/service/blob/master/logic/const.go#L71-110
  string shopmall_order_status_str = 12;
  // 创建时间
  int64 ct = 8;
  // 修改时间
  int64 ut = 9;
}

message OrderListResponse {
  repeated Order orders = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}

message ConfirmAddressRequest {
  string order_id = 1;
  LogisticsAddressInfo address_info = 2;
  // 被延迟的物流
  DelayDeliverySelector delayed_delivery = 3;
  UserOrderExtra order_extra = 4;
}

message GetOrderToConfirmAddressDetailRequest {
  // 订单id，字符串类型。
  string order_id = 1;
}

message UserOrderExtra {
  // 用户备注信息
  string remark = 1;
}

message DelayDeliverySelector {
  // L1-L4。用户看到的待延迟的单不是order层面的，也不是物流单shopmall_order层面的，而是介于二者中间的L1/L2/L3/L4，这里也不能直接使用级别信息，可能有的课程没有级别。所以使用这个名字
  repeated string delayed_item_remark = 1;
}

message GetOrderToConfirmAddressDetailResponse {
  LogisticsAddressInfo address_info = 1;
  DelayDeliverySelector delay_delivery_selector = 2;
  Order order = 3;
}


message GiveCouponRequest {
  // 学生 uid
  int64 student_uid = 1;
  // 优惠券批次号。交易平台配置的（https://sea.pri.ibanyu.com/finance_admin/couponManage/couponCofig?offset=0&limit=20）
  int64 coupon_commodity_id = 2;
  // 发券理由，用于备注，可不传
  string note = 3;
}

message GiveCouponResponse {}

message GiveFreeGiftRequest {
  // 学生 uid
  int64 student_uid = 1;
  // 赠品 id，这里获取：https://sea.pri.ibanyu.com/store/gift/exchange?channel=99&enabletype=1&options=0&gtype=99&source=0
  int64 gid = 2;
  // 库存id，这里获取：https://sea.pri.ibanyu.com/store/gift/repository/repoManagement?offset=0&limit=20
  string sku = 3;
  // 发券理由，用于备注，可不传
  string note = 4;
}

message GiveFreeGiftResponse {}

message AdminGetShopmallOrdersRequest {
  // 订单 id
  string order_id = 1;
}

message AdminGetShopmallOrdersResponse {
  // 物流单详情
  repeated LogisticsOrderInfo shopmall_orders = 1;
}

message GetUserTrialCourseStatusRequest {}

message BookLivecastObj {
  // 直播id
  string booked_livecast_id = 1;
  // 渠道
  string source = 2;
}

message BookLivecastRequest {
  // 邀请码
  string invite_code = 1;
  // unionId
  string union_id = 2;
  // openId
  string open_id = 3;
  // 解密ticket
  string encrypted_ticket = 4;
  // 直播id列表，后续删除
  repeated string livecast_ids = 5;
  // 直播对象列表
  repeated BookLivecastObj book_livecasts = 6;
  // 阅读营的token，唯一标识一个uid，时效5min
  string readcamp_token = 7;
}

message GetUidTokenRequest {}

message GetUidTokenResponse {
  // 唯一标识的token
  string readcamp_token = 1;
}

message BookLivecastResponse {}

message OwnCoinsRequest {
  // 直播id列表
  repeated string livecast_ids = 1;
}

message OwnCoinsResponse {
  // 成功获取积分数
  int64 own_coins = 1;
}

message GetUserTrialCourseStatusResponse {
  // 是否购买了体验课,true：是，false：否。
  bool has_bought_trial_course = 1;
  // 是否正在进行中
  bool is_in_progress = 2;
  // 是否已经结束（如果购买了体验课，没在进行中，也没有结束，说明还未开始）
  bool has_finished = 3;
}

// 拷贝自：https://gitlab.pri.ibanyu.com/server/goldcoin/pub/blob/master/idl/GoldCoin.proto
message CreateCoinTypeRequest {
  //虚拟币名称英文
  string group_id = 1;
  //虚拟币名称中文
  string group_desc = 2;
  // 备注
  string remark = 3;
  // 现金价值
  int64 real_value = 4;
  //使用规则说明
  string use_rule = 5;
  //默认有效期
  int64 default_expire = 6;
  // 归属业务线
  repeated int32 busi_source = 7;
  //虚拟币编码，这一项的有无决定了是创建还是更新
  uint64 id = 8;
}

message CreateCoinTypeResponse {
  // 虚拟币名称英文
  string group_id = 1;
}


message UserCoinDetailItem {
  // 流水号。后端角度看，是audit表的id字段
  int64 batch_id = 1;
  //本次操作货币变化量(增减都是正数)
  int64 goldcoin_count = 2;
  // 操作类型：1:发放 2：扣减
  int64 event_type = 3;
  // 操作说明
  string remark = 4;
  // 本次操作后的货币剩余总量
  int64 amount = 5;
  //货币过期时间
  int64 expire = 6;
  // 当前流水创建时间戳（s）
  int64 ct = 7;
  // 用于幂等校验，保证唯一性的 id。
  string request_id = 8;
}

message GetUserCoinSummaryRequest {}

message GetUserCoinSummaryResponse {
  // 积分总量
  int64 total_coins = 1;
}

message GetUserCoinDetailRequest {
  int64 offset = 1;
  int64 limit = 2;
}

message GetUserCoinDetailResponse {
  repeated UserCoinDetailItem details = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}


message AdminGetUserCoinSummaryRequest {
  // 用户id
  int64 uid = 1;
}

message AdminGetUserCoinSummaryResponse {
  // 积分总量
  int64 total_coins = 1;
}

message AdminGetUserCoinDetailRequest {
  int64 offset = 1;
  int64 limit = 2;
  // 用户id
  int64 uid = 3;
}

message QueryBookLivecastsRequest {
  string open_id = 1;
  // 待查询的直播列表
  repeated string livecast_ids = 2;
}

message QueryBookLivecastsResponse {
  // 已预约的直播列表，后续删除
  repeated string booked_livecast_ids = 1;
  // 已预约的直播和渠道列表
  repeated BookLivecastObj booked_livecast = 2;
}

message GetWeeklyPlanRequest {}

message WeeklyPlan {
  // 阅读新书的数量
  int32 new_book_count = 1;
  // 复习书的数量
  int32 review_book_count = 2;
  // 听英语的时长(小时)
  double listening_hours = 3;
}

message GetWeeklyPlanResponse {
  // 周计划-计划
  WeeklyPlan plan = 1;
  // 周计划-当周完成统计
  WeeklyPlan statistics = 2;
}

message SetWeeklyPlanResponse {}

message QueryBookLivecastsWithSourceRequest {
  string open_id = 1;
  // 可不传，默认 20 个。
  int64 limit = 2;
  // 可不传，默认0
  int64 offset = 3;
}

message QueryBookLivecastsWithSourceResponse {
  // 已预约的直播和渠道列表
  repeated BookLivecastObj booked_livecasts = 1;
  // 没有分页需求，暂时不加 total/more/offset 字段
}

message UserCourseDetail {
  // 课程的详细信息以及用户的学习情况
  UserCourse user_course = 1;
  // 课程内课节的信息以及用户的学习情况
  repeated UserLecture user_lectures = 2;
  // offset, total, more 都是针对的 lectures
  int64 offset = 3;
  int64 total = 4;
  bool more = 5;
}

message ListPracticeCoursesRequest {}

message ListPracticeCoursesResponse {
  repeated Course courses = 1;
}

message ListPracticeLecturesRequest {
  // type 取值: course|liked|recently_study_finished。
  // 仅当 type=course 时，course_id 必传。
  // 当 type=recently_study_finished 时，不支持分页(目前最多返回 50 条)。
  string type = 1;
  int32 course_id = 2;
  // 如果为 0，则自第一页开始返回。
  // 如果非 0，则返回自 since_lecture_id 开始的一页。
  int32 since_lecture_id = 3;
  // 如果为 true 则返回的结果中不包括 since_lecture_id 对应的 Lecture。
  bool exclude_since_lecture_id = 4;
  // next_page|previous_page, default=next_page。用于控制获取上一页还是下一页。
  string direction = 5;
  int64 offset = 6;
  int64 limit = 7;
  // 默认全部, 支持 "中文"、"英文"
  string category_tag = 8;
  // 1 近1天，15 近15天
  int64 last_days_num = 9;
}

message ListPracticeLecturesResponse {
  repeated UserLecture lectures = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}

message GetUserRecommendListRequest {}
message GetUserRecommendListResponse {
  message RecommendList {
    // 是否展示推荐列表
    bool is_show_recommend = 1;
    // 如果展示，新书列表
    repeated UserLecture new_lectures = 2;
    // 如果展示，review 书籍列表
    repeated UserLecture review_lectures = 3;
  }

  message CoursesList {
    // 按用户的滑动顺序需要展示的课程列表。
    repeated Course courses = 1;
    // 用户已购买课程列表。（顺序和courses可能不一致，因为用户可能并不会购买所有courses，最好做个map映射）
    repeated UserCourse user_courses = 2;
    // courses列表第一个课程中用户正在学习的课节
    UserLecture user_studying_lecture = 3;
  }

  message UserInfo {
    // 用户级别：0：未定级，1：L1，2：L2，3：L3, 4: L4
    int32 user_level = 1;
  }

  // 优先查看 recommend_list.is_show_recommend 判断是否展示推荐模块
  RecommendList recommend_list = 1;
  CoursesList courses_list = 2;
  UserInfo user_info = 3;
}

message GetCourseCategoryTagsRequest {}

message GetCourseCategoryTagsResponse {
  // 一级类目
  repeated string category_no1 = 1;
  // 二级类目
  repeated string category_no2 = 2;
}



message GetUserCourseReviewListRequest {
  int32 course_id = 1;
}

message GetUserCourseReviewListResponse {
  // 待复习的课节列表
  repeated UserLecture lectures = 1;
}

// 这里新开了一个接口，没有复用 lectures/list 接口，因为我们希望用户每次拿到的信息都是准确的。比如用户又学习了 n 节课才去看首页课程，这个时候用户的学习进度和课节定位应该都是最新的，而不是刚进app时候的状态。
message GetUserCourseDetailRequest {
  int32 course_id = 1;
  // 套系名，如"RAZ"
  string series = 2;
  int64 limit = 3;
  int64 offset = 4;
}

message GetUserTeacherRequest {}

message GetUserStudyingLectureRequest {}

message GetAppMainPageConfigRequest {}

message GetAppMainPageConfigResponse {
  message ActivityConf {
    // 排行榜讲解完成经验
    int64 rank_guide_exp = 1;
  }
  // 是否弹窗购买体验课
  bool is_popup_purchase_trial_course = 1;
  // 是否使用交互讲解模式
  bool use_interaction = 2;
  // 是否展示引导图片
  bool show_guide = 3;
  // 记忆素材复习数量阈值
  int32 user_memory_target_recall_num = 4;
  // 记忆素材新学数量阈值
  int32 user_memory_target_new_num = 5;
  // 排行榜展示状态 0:不展示，1:参加 2:不参加
  int32 show_rank_state = 6;
  // 活动配置信息
  ActivityConf activity_conf = 7;
}

message SetUserSettingsRequest {
  // 是否使用交互讲解，0：不配置，1：使用，2：不使用
  int32 use_interaction = 1;
  // 记忆素材复习数量阈值('记忆素材复习数量阈值'和'记忆素材新学数量阈值'需同时设置)
  int32 user_memory_target_recall_num = 2;
  // 记忆素材新学数量阈值('记忆素材复习数量阈值'和'记忆素材新学数量阈值'需同时设置)
  int32 user_memory_target_new_num = 3;
}

message GetUserTeacherResponse {
  // 是否已添加老师微信。这里暂不返回老师二维码，因为获取老师二维码太慢了，最好由用户触发获取
  bool has_added_teacher = 1;
}

message PackageCourse {
  int32 id = 1;
  // 套餐id
  int64 package_id = 2;
  // 课程id列表
  repeated int32 course_ids = 3;
  // 套餐备注
  string remark_info = 4;
  // 是否匹配套餐可见，获取全量套餐id不受此限制
  bool visible = 5;
  // 创建时间
  int64 created_at = 6;
  // 更新时间
  int64 updated_at = 7;
  // 套餐名称
  string package_name = 8;
  // 课程列表
  repeated Course courses = 9;
  // 标签列表
  repeated string tags = 10;
  // 创建人
  string creator = 11;
}

message UserPackageCourse {
  int32 id = 1;
  // 套餐id
  string package_id = 2;
  // 套餐备注
  string remark_info = 3;
  // 课程列表
  repeated Course courses = 4;
  // 创建时间
  int64 created_at = 5;
  // 更新时间
  int64 updated_at = 6;
}

message PackageCourseAddRequest {
  // 套餐id
  int64 package_id = 1;
  // 课程id列表
  repeated int32 course_ids = 2;
  // 套餐备注
  string remark_info = 3;
  // 标签列表: 用户可见正价课:user_formal, 含体验课/分销课:trial, 正价课:formal
  repeated string tags = 4;
}

message PackageCourseUpdateRequest {
  int32 id = 1;
  // 套餐id
  int64 package_id = 2;
  // 课程id列表
  repeated int32 course_ids = 3;
  // 套餐备注
  string remark_info = 4;
  // 标签列表: 用户可见正价课:user_formal, 含体验课/分销课:trial, 正价课:formal
  repeated string tags = 5;
  // 立即开课 1:是 2:否
  int32 visible = 6;

}

message PackageCoursGetRequest {
  int32 id = 1;
}

message PackageCoursGetByPackageRequest {
  // 套餐id
  int64 package_id = 1;
}

message PackageCoursListRequest {
  // 按tag搜索，不传不做过滤
  string tag = 1;
  int64 offset = 2;
  int64 limit = 3;
  // 套餐id
  int64 package_id = 4;
  // 套餐名字
  string package_name = 5;
  // 课程id
  repeated int32 course_ids = 6;
  // 创建人 名字+工号
  string creator = 7;
}

message PackageCourseListResponse {
  repeated PackageCourse package_courses = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}

message UserFormalPackageCoursListRequest {}

message UserFormalPackageCourseListResponse {
  repeated UserPackageCourse user_package_courses = 1;
}

message PackageCourseTagListRequest {}

message PackageCourseTagListResponse {
  repeated string tags = 1;
}

message PackageCoursDelRequest {
  int32 id = 1;
}

message QueryYouzanOrdersRequest {
  enum FilterWithHasTeacher {
    NoFilter = 0;
    HasTeacher = 1;
    HasNoTeacher = 2;
  }
  // 可选。是否根据老师筛选，0：不筛选，1：有老师，2：没有老师
  FilterWithHasTeacher has_teacher = 1;
  // 必选。订单起始时间，如：2022-09-01 09:30:30
  string order_begin_time = 2;
  // 必选。订单结束时间，如：2022-09-01 09:30:30
  string order_end_time = 3;
  // 可选。搜索任意字符串
  string any_key = 4;
  // 必传。不传默认20
  int64 limit = 5;
  // 必传。不传默认0
  int64 offset = 6;
}

message QueryYouzanOrdersResponse {
  message Item {
    YzOrderInfo order_info = 1;
    // 订单明细。用户付款一次，里面可能包含多个 Order。
    repeated YzOrder orders = 2;
    // 收货地址相关
    YzAddressInfo address_info = 3;
    // 付款相关
    YzPayInfo pay_info = 4;
    // 用户相关
    YzBuyerInfo buyer_info = 5;
    // 订单归属的老师。注意只是邮箱前缀
    string teacher = 6;
    // 谁分配的老师，readcamp 代表后端自动分配
    string opuser = 7;
    // 物流手机号对应的伴鱼uid，可能为0
    int64 user_id = 8;
    // 生成的sale_order信息
    YzSaleOrderInfo package_info = 9;
    // 是否拥有 sale_order package 可选择，以下内部单
    bool has_sale_order_package = 10;

  }

  repeated Item items = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}

message ResendOuterOrderSMSReq{
  // 订单来源
  OrderSource source = 1;
  // 订单 id
  string order_id = 2;
  // 批量订单 id
  repeated string order_ids = 3;
}

message QueryOuterOrderReq {
  // 可选 订单来源
  OrderSource source = 1;
  // 可选。是否根据老师筛选，0：不筛选，1：有老师，2：没有老师
  int64 has_teacher = 2;
  // 必选。订单起始时间，如：2022-09-01 09:30:30
  string order_begin_time = 3;
  // 必选。订单结束时间，如：2022-09-01 09:30:30
  string order_end_time = 4;
  // 可选。搜索任意字符串
  string any_key = 5;
  // 必传。不传默认20
  int64 limit = 6;
  // 必传。不传默认0
  int64 offset = 7;
  // 订单状态 100-支付成功 200-退费
  OuterOrderTradeState trade_state = 8;
  // 订单归属
  string teacher_op_name = 9;
  // 用户归属
  string user_teacher_op_name = 10;
}

message QueryOuterOrderRes {
  message Item {
    // 订单信息
    OuterOrderInfo order_info = 1;
    // 订单详情
    repeated OuterOrderDetail order_details = 2;
    // 收货信息
    OuterOrderAddressInfo address_info = 3;
    // 付款信息
    OuterOrderPayInfo pay_info = 4;
    // 用户相关信息
    OuterOrderBuyerInfo buyer_info = 5;
    // 订单归属的老师。注意只是邮箱前缀
    string teacher = 6;
    // 谁分配的老师，readcamp 代表后端自动分配
    string opuser = 7;
    // 物流手机号对应的伴鱼uid，可能为0
    int64 user_id = 8;
    // 内部sale_order信息
    OuterOrderSaleOrderInfo package_info = 9;
    // 是否拥有 sale_order package 可选择，以下内部单
    bool has_sale_order_package = 10;
    // 用户归属的老师
    string user_teacher_op_name = 11;
  }

  repeated Item items = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}

message UploadYouzanOrderExcelRequest{

}
message UploadYouzanOrderExcelResponse {
  string msg = 1;
}

message UploadOuterOrderExcelReq {
  // 订单来源 5-抖店
  OrderSource source = 1;
}

message UploadOuterOrderExcelRes {
  string msg = 1;
}

message UpdateYouzanOrderTeacherRequest {
  string tid = 1;
  // 老师邮箱前缀
  string teacher = 2;
  // 绑定的user_id。teacher和user_id两者必传一个
  int64 user_id = 3;
}

message UpdateOuterOrderTeacherReq {
  string order_id = 1;
  // 老师邮箱前缀
  string teacher = 2;
  // 绑定的user_id
  int64 user_id = 3;
  // 订单来源
  OrderSource source = 4;
}

message YzSaleOrderInfo {
  // 关联的package_id
  int64 package_id = 1;
  // package的描述信息
  string package_remark = 2;
  // 订单id(字符串类型，否则前端溢出)
  string order_id = 3;
}

message YzOrderInfo {
  // 支付时间
  string pay_time = 1;
  // 订单号。本次支付的订单号
  string tid = 2;
  // 订单来源
  OrderSource source = 3;
  // 订单状态 100-支付成功 200-已退费 210-部分退费
  OuterOrderTradeState trade_state = 4;
  // 订单skuid
  int64 sku_id = 5;
}

message YzOrder {
  // 商品名
  string title = 1;
  // 订单明细id
  string oid = 2;
  // 当前订单最终均摊价格
  string payment = 3;
}

message YzAddressInfo {
  // 收货人姓名
  string name = 1;
  // 收货人电话
  string phone = 2;
  // 收货省份
  string province = 3;
  // 收货城市
  string city = 4;
  // 收货区
  string district = 5;
  // 收货详细地址
  string address = 6;
}

message YzPayInfo {
  // 最终支付价格。 payment=orders.payment的总和
  string payment = 1;
  // 有赞支付流水号，注意是个数组，虽然不知道为啥
  repeated string transaction = 2;
  // 外部支付流水号，注意是个数组，估计是可能一次付款的来源有多个地方
  repeated string outer_transactions = 3;
  // 已退款金额，单位：元
  string refund_payment = 4;
}

message YzBuyerInfo {
  // 昵称
  string nickname = 1;
  // 手机号
  string phone = 2;
  // 有赞用户id
  string yz_open_id = 3;
}

message OuterOrderInfo {
  // 支付时间
  string pay_time = 1;
  // 订单Id
  string order_id = 2;
  // 订单来源
  OrderSource source = 3;
  // 订单状态 100-支付成功 200-已退费 210-部分退费
  OuterOrderTradeState trade_state = 4;
  // 订单skuid
  string sku_id = 5;
}

message OuterOrderDetail {
  // 商品名
  string title = 1;
  // 订单明细id
  string oid = 2;
  // 当前订单最终均摊价格
  string payment = 3;
  // 分佣信息
  repeated OuterOrderCommissionInfo commission_infos = 4;
}

message OuterOrderCommissionInfo {
  // 达人Id
  string finder_id = 1;
  // 达人昵称
  string nick_name = 2;
  // 分佣金额，单位：分
  int64 amount = 3;
}

message OuterOrderPayInfo {
  // 最终支付价格。 单位：元
  string payment = 1;
  // 已退款金额。单位：元
  string refund_payment = 2;
}

message OuterOrderBuyerInfo {
  // 昵称
  string nickname = 1;
  // 手机号
  string phone = 2;
}

message OuterOrderAddressInfo {
  // 收货人姓名
  string name = 1;
  // 收货人电话
  string phone = 2;
  // 收货省份
  string province = 3;
  // 收货城市
  string city = 4;
  // 收货区
  string district = 5;
  // 收货详细地址
  string address = 6;
}

message OuterOrderSaleOrderInfo {
  // 关联的package_id
  int64 package_id = 1;
  // package的描述信息
  string package_remark = 2;
  // 订单id(字符串类型，否则前端溢出)
  string order_id = 3;
}

message GetOuterOrderReq {
  // 必选，订单id
  string order_id = 1;
  // 必选，订单来源
  OrderSource source = 2;
}

message GetOuterOrderRes {
  // 订单id
  string order_id = 1;
  // 订单来源
  OrderSource source = 2;
  // 下单时间
  string pay_time = 3;
  // 商品名称
  string product_name = 4;
  // 支付金额 单位：元
  string payment = 5;
}

message YouzanCashbackOrder {
  YzOrderInfo order_info = 1;
  // 订单明细
  YzOrder order = 2;
  // 收货地址相关
  YzAddressInfo address_info = 3;
  // 付款相关
  YzPayInfo pay_info = 4;
  // 用户相关
  YzBuyerInfo buyer_info = 5;
}

message YouzanCashbackListRequest {
  // 必选。订单起始时间，如：2022-09-01 09:30:30
  string order_begin_time = 1;
  // 必选。订单结束时间，如：2022-09-01 09:30:30
  string order_end_time = 2;
  // 可选。手机号
  string phone = 3;
  // 可选。tid
  string tid = 4;
  // 可选。订单类型：1：科普营订单 2：10元返现订单
  int32 order_type = 5;
  // 必传。不传默认20
  int64 limit = 6;
  // 必传。不传默认0
  int64 offset = 7;
}

message YouzanCashbackOrders {
  repeated YouzanCashbackOrder items = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}

message YouzanCashbackGetRequest {
  int32 id = 1;
}

message YouzanWhitePhoneRequest {
  // 手机号(11位)
  string phone = 1;
  // 有赞用户id
  string yz_open_id = 2;
}

message YouzanWhitePhoneResponse {
  // 手机号(11位)
  string phone = 1;
  // 备注
  string remark_info = 2;
  // 创建时间
  int64 created_at = 3;
}

message InviteCourse {
  // 课程id
  int32 course_id = 1;
  // 课程状态: bought(已购买) owned(已开课) refunded(已退课)
  string course_status =2;
}

message Invitation {
  // 邀请者id
  int64 inviter_id = 1;
  // 被邀请者信息
  User invitee = 2;
  // 渠道
  string source = 3;
  // 课程及状态列表
  repeated InviteCourse courses = 4;
  // 状态: 1:已邀请 2:已发放积分 3:全部退款
  int32 status = 5;
  // 体验课购买时间
  int64 trial_time = 6;
  // 体验课是否完课
  bool trial_finished = 7;
  // 正价课开课时间，记录首个课程开课时间
  int64 owned_time = 8;
  // 退课时间，记录全部课程都退课时间
  int64 refund_time = 9;
  // 创建时间
  int64 created_at = 10;
  // 更新时间
  int64 updated_at = 11;
  // (废弃)被邀请者id
  int64 invitee_id = 12;
  // (废弃)被邀请者头像
  string invitee_pic = 13;
}

message InvitationListRequest {
  int64 offset = 1;
  int64 limit = 2;
}

message InvitationListResponse {
  repeated Invitation items = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}

message EvaluateRecordingRequest {
  int32 lecture_id = 1;
  // 页面来源，interaction：互动讲解；followme: 跟读
  string source = 2;
  // 对应哪一句，在课节信息中可以拿到
  string uuid = 3;
  // 孩子的录音信息
  AudioResource audio = 4;
  // 配置id
  int32 conf_id = 5;
}

message EvaluateRecordingResponse {
  // 分数段，0表示小于60分，1表示60-70分，2表示70-80分，3表示80分以上
  int32 rank = 1;
  // 分数：0-100
  int32 score = 2;
}

message ReportRecordingRequest {
  // 课节 id (source = interaction时生效)
  int32 lecture_id = 1;
  // 学习内容
  string content = 2;
  // 录音信息
  AudioResource recording = 3;
  // 标准发音
  AudioResource standard = 4;
  // 评分分数段，0表示小于60分，1表示60-70分，2表示70-80分，3表示80分以上
  int32 rank = 5;
  // 评分具体分数。
  int32 score = 6;
  // 绘本跟读的book_id (source = picbook_followme时生效)
  int64 book_id = 7;
  // 绘本跟读的page_id (source = picbook_followme时生效)
  int64 page_id = 8;
  // 上报来源：interaction: 改版体验课交互讲解；picbook_followme：绘本跟读
  string source = 9;
  // TODO: 待删除。进度0-100：当前页 / 总页数 的计算结果。
  int32 finished_rate = 10;
  // 绘本跟读，一个book包含多少pages数量
  int32 total_pages = 11;
}

message LectureFollowMeItem {
  // 这部分内容的唯一标识
  string uuid = 1;
  // 跟读内容
  string content = 2;
  // 跟读内容对应音频
  AudioResource audio = 3;
  // 图片信息
  ImageResource image = 4;
}

message LectureFollowMe {
  repeated LectureFollowMeItem items = 1;
}

message UserLectureFollowMeItem {
  LectureFollowMeItem follow_me = 1;
  // 用户录音
  AudioResource recording = 2;
  // 用户录音的评分：0表示小于60分，1表示60-70分，2表示70-80分，3表示80分以上
  int32 rank = 3;
}

message UserLectureFollowMe {
  repeated UserLectureFollowMeItem items = 1;
  // 上次练习到的位置，items字段的索引，从0开始。
  int32 pos = 2;
}

message ImageSelector {
  ImageResource image = 1;
  bool is_correct = 2;
}
message LectureExerciseItem {
  // 当前内容唯一标识
  string uuid = 1;
  // 游戏玩法，choose:选择正确答案
  string type = 2;
  // 单词内容
  string content = 3;
  // 内容对应音频
  AudioResource audio = 4;
  // 图片选项(4个)
  repeated ImageSelector selected_images = 5;
}

message LectureExercise {
  repeated LectureExerciseItem items = 1;
}

message UserLectureExercise {
  repeated LectureExerciseItem items = 1;
  // 上次练习到的位置，items字段的索引，从0开始。
  int32 pos = 2;
}

message GetUserLectureFollowMeRequest {
  int32 lecture_id = 1;
}

message GetUserLectureExerciseRequest {
  int32 lecture_id = 1;
}

message GetLectureProgressRequest {
  int32 lecture_id = 1;
}

message GetLectureProgressResponse {
  // 导读课资源学习进度,0-100
  int32 guide_studyed_rate = 1;
  // 导读课是否已完成
  bool has_guide_studyed_finished = 2;
  // 原生资源学习进度,0-100
  int32 original_studyed_rate = 3;
  // 原生资源是否学习完成
  bool has_original_studyed_finished = 4;
  // 跟读模块完成进度,0-100
  int32 follow_me_rate = 5;
  // 跟读模块是否完成
  bool has_follow_me_finished = 6;
  // 练一练模块完成进度,0-100
  int32 exercise_rate = 7;
  // 练一练模块模块是否完成
  bool has_exercise_finished = 8;
}

message ReportUserLectureExercisePosRequest {
  int32 lecture_id = 1;
  string uuid = 2;
}

message UpdateLectureExtraRequest {
  int32 lecture_id = 1;
  int32 course_id = 2;
  LectureFollowMe follow_me = 3;
  LectureExercise exercise = 4;
}

message GetStudyReportRequest {
  // 无需用户登录，在任何地方均可打开学习报告页面
  int64 user_id = 1;
  int32 lecture_id = 2;
}

message StudyingRecord {
  // 学习内容
  string content = 1;
  // 录音信息
  AudioResource recording = 2;
  // 标准发音
  AudioResource standard = 3;
  // 评分分数段，0表示小于60分，1表示60-70分，2表示70-80分，3表示80分以上
  int32 rank = 4;
  // 来源。目前互动讲解部分无标准发音。interaction：互动讲解；followme: 跟读
  string source = 5;
}

message GetStudyReportResponse {
  UserLecture user_lecture = 1;
  repeated StudyingRecord records = 2;
  // 平均得分 0-3
  int32 avg_rank = 3;
  // 用户统计信息
  UserStudyStatistics statistics = 4;
}

message ApplyCashbackRequest {
  // 手机号
  string phone = 1;
  // 验证码
  string code = 2;
  // open_id
  string open_id = 3;
}

message MedalResource {
  // 静态图
  ImageResource static_img = 1;
  // 动态图
  AnimationResource dynamic_img = 2;
}

message Medal {
  // ID
  int32 medal_id = 1;
  // 套系
  string series = 2;
  // 档次
  int32 grade = 3;
  // 名字
  string name = 4;
  // 需要达成的阈值
  int32 threshold = 5;
  // 描述
  string description = 6;
  // 资源
  MedalResource resource = 7;
}

message UserMedal {
  // 勋章元信息
  Medal medal = 1;
  // 用户是否拥有这个勋章
  bool owned = 2;
  // 是否展示给用户过
  bool has_showed = 3;
  // 发放时间
  int64 ct = 4;
  // 当前进展值(会限制最大只到threshold)
  int32 progress = 5;
}

message GetUserMedalsToShowRequest {
}

message GetUserMedalsToShowResponse {
  // 要展示的勋章列表
  repeated UserMedal to_show_medals = 1;
  // 用户获得的勋章总数
  int32 owned_medals_number = 2;
}

message GetUserMedalsRequest {
}

message GetUserMedalsResponse {
  // 用户勋章详情
  repeated UserMedal user_medals = 1;
}
message GetAllMedalListReq {
  int64 limit = 1;
  int64 offset = 2;
  // 搜索
  string key = 3;
}
message GetAllMedalListRes {
  message AdminMedal {
    int64 id = 1;
    // 系列
    string series = 2;
    // 档次
    int32 grades = 3;
    // 名称
    string name = 4;
    // 达成阈值
    int32 threshold = 5;
    // 描述
    string description = 6;
    // 动效、静态图
    MedalResource resource = 7;
    // 创建时间
    int64 ct = 8;
    // 更新时间
    int64 ut = 9;
  }
  repeated AdminMedal items = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}

message VerificationBook {
  // id
  int32 id = 1;
  // 课程id
  int32 course_id = 2;
  // 课程名称
  string course_name = 3;
  // 书单核验名称
  string name = 4;
  // 条形码
  string bar_code = 5;
  // 课时
  string lecture_range = 6;
  // 批次
  string delivery_batch = 7;
  // 备注
  string remark_info = 8;
  // 创建时间
  int64 created_at = 9;
  // 更新时间
  int64 updated_at = 10;
}

message UserVerificationBook {
  // 书单核验条目
  VerificationBook verfication_book = 1;
  // 用户是否核验
  bool owned = 2;
  // 核验时间
  int64 created_at = 3;
}

message CreateVerificationBookRequest {
  // 课程id(必须)
  int32 course_id = 1;
  // 课程名称(必须)
  string course_name = 2;
  // 书单核验名称(必须)
  string name = 3;
  // 条形码(必须)
  string bar_code = 4;
  // 起始课时(必须)
  int32 lecture_start = 5;
  // 结束课时(必须)
  int32 lecture_end = 6;
  // 批次(必须)
  int32 delivery_batch = 7;
  // 备注
  string remark_info = 8;
}

message UpdateVerificationBookRequest {
  // id(必须)
  int32 id = 1;
  // 课程id
  int32 course_id = 2;
  // 课程名称
  string course_name = 3;
  // 书单核验名称
  string name = 4;
  // 条形码
  string bar_code = 5;
  // 起始课时
  int32 lecture_start = 6;
  // 结束课时
  int32 lecture_end = 7;
  // 批次
  int32 delivery_batch = 8;
  // 备注
  string remark_info = 9;
}

message GetVerificationBookRequest {
  // id
  int32 id = 1;
}

message ListVerificationBooksRequest {
  // 课程id
  int32 course_id = 1;
  // 课程名称
  string course_name = 2;
  // 条形码
  string bar_code = 3;
  int64 offset = 4;
  int64 limit = 5;
}

message ListVerificationBooksResponse {
  repeated VerificationBook items = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}

message CreateUserVerificationBookRequest {
  // 条形码(必须)
  string bar_code = 1;
}

message ListUserVerificationBooksRequest {}

message UserVerificationBookCourseGroup {
  // 课程名称
  string course_name = 1;
  repeated UserVerificationBook items = 2;
}

message ListUserVerificationBooksResponse {
  repeated UserVerificationBookCourseGroup items = 1;
}

message QueryOrderAssignRequest {
  // 搜索的关键词
  string key = 1;
  // 订单起始时间，如：2022-09-01 09:30:30
  string order_begin_time = 2;
  // 订单结束时间，如：2022-09-01 09:30:30
  string order_end_time = 3;
  // 异常状态搜索：0：不查询，1：无异常，2：发货异常，3：签收异常
  int32 exception_type = 4;
  // 导出状态搜索：0：不查询，1：未导出，2：延缓发货；3：已导出
  int32 exported_status = 5;
  // 订单来源：0：不查询，1：站内订单；2：有赞订单
  int32 order_source = 6;
  // package_id 筛选项，不传不做过滤。
  int64 package_id = 7;
  int64 offset = 8;
  int64 limit = 9;
  // 订单归属
  string teacher_op_name = 10;
  // 用户归属
  string user_teacher_op_name = 11;
}



message LogisticsOrderInfo {
  // 物流单订单id
  int64 eid = 1;
  // 物流id
  string logistics_id = 2;
  // 包裹名
  string package_name = 3;
  // 物流公司，如中通
  string ems_name = 4;
  // 物流单状态：1: 待确认地址；2：出库中，3：暂无物流信息；4：在路上，5：已签收，6：问题件，7：已取消
  int32 status = 5;
  // 不同物流单类型：1-4，目前一个主订单（sale_order）包含4种物流单类型，也可以理解为批次，可被用于缓发。
  int32 order_type = 6;
  // 当前订单的级别：1-4
  int32 level = 7;
  // 异常信息，没有则为空
  string exception_msg = 8;
  // 状态描述
  string status_desc = 9;
  // 物流单的备注信息，与主订单的区别在于，会包含换货的问题
  string remark = 10;
  // 商品id
  int64 gid = 11;
}

// 换绑 outerorder skuid
message ChangeOuterOrderSkuReq {
  string order_id = 1;
  OrderSource source = 2;
  string new_sku_id = 3;
  string old_sku_id = 4;
}


// 销售单分配详情
message SaleOrderAssignItem {
  message UserBase {
    // 用户名
    string name = 1;
    // uid
    int64 user_id = 2;
  }
  message AssignInfo {
    int64 leads_uid = 1;
    // 订单归属老师
    string teacher = 2;
    // 谁分配的，系统自动分配时，为readcamp
    string opuser = 3;
    // 用户归属老师
    string user_teacher_op_name = 4;
  }
  message OrderStatus {
    // 一个map，如：运输中: 4, 未导出：2
    map<string, int32> order_status_info = 1;
    // 异常个数，单独拿了出来，需要标红显示
    int32 exception_count = 2;
  }
  message Extra {
    // 备注信息
    string remark = 1;
  }
  message OrderInfo {
    // 商品名
    string item_name = 1;
    // 支付金额，单位：分
    int32 price = 2;
    // 订单id
    string order_id = 3;
    // 支付方式：微信，支付宝
    string pay_type = 4;
    // 下单时间，单位：秒
    int64 pay_ts = 5;
    // 交易状态
    int32 trade_state = 6;
    // 退款金额
    int32 refund_price = 7;
  }
  OrderInfo order_info = 1;
  LogisticsAddressInfo address_info = 2;
  UserBase user_info = 3;
  AssignInfo assign_info = 4;
  Extra extra_info = 5;
  OrderStatus order_status = 6;
  repeated LogisticsOrderInfo logistics_order_info = 7;
  SaleOrderCourseInfo course_info = 8;
}

message SaleOrderCourseInfo {
  repeated int64 open_course_ids = 1;
  repeated int64 noopen_course_ids = 2;
}

message QueryOrderAssignResponse {
  repeated SaleOrderAssignItem items = 1;
  // 总金额，单位：分
  int64 total_price = 2;
  int64 offset = 3;
  // 总个数
  int64 total = 4;
  bool more = 5;
}

message SetSaleOrderExportedRequest {
  // 物流单的订单id列表，后端会将这个列表内的数据都设置为已导出状态
  repeated int64 eids = 1;
  // 是否取消导出，默认false，即设置为导出。
  bool cancel_exported = 2;
}

message UpdateSaleOrderRemarkRequest {
  // sale order 的 order_id
  string order_id = 1;
  // 新的备注
  string remark = 2;
}

message UpdateSaleOrderAssignRequest {
  // sale order 的order_id
  string order_id = 1;
  string teacher = 2;
  // teacher 和 leads_uid 两者必有一个不为空
  int64 leads_uid = 3;
}

message UpdateLogisticsOrderDelayDeliveryRequest {
  // 物流单的订单id列表
  repeated int64 eids = 1;
  // 是否delayed，true：设置为delay，false：取消delay。
  bool isDelayed = 2;
}

message GetYouzanPackagesInfoRequest {
  // 有赞订单的订单 id
  string tid = 1;
}

message YouzanItemPackage {
  // 商品id
  int64 item_id = 1;
  // 套餐id
  int64 package_id = 2;
  // 套餐名
  string package_name = 3;
}

message GetYouzanPackagesInfoResponse {
  // 当前有赞单可选择的套餐信息
  repeated YouzanItemPackage packages = 1;
}

message GetOuterOrderPackagesInfoReq {
  // 订单id
  string order_id = 1;
  // 订单来源
  OrderSource source = 2;
}

message GetOuterOrderPackagesInfoRes {
  message PackageInfo {
    // 套餐id
    int64 package_id = 1;
    // 套餐名
    string package_name = 2;
  }
  // 可选择的套餐信息
  repeated PackageInfo packages = 1;
}


message PlaceYouzanSaleOrderRequest {
  // 有赞订单 id
  string tid = 1;
  // 用户选择的套餐id
  int64 package_id = 2;
  // 用户手机号
  string phone = 3;
}

message ConfirmOuterOrderPackageReq {
  // 外部订单 id
  string order_id = 1;
  // 套餐 id
  int64 package_id = 2;
  // 订单来源 OrderSource 枚举
  OrderSource source = 3;
  // 用户手机号
  string phone = 4;
}

// 很多地方都会用到的一个字段，定义为枚举
enum OrderSource {
  // 不使用0，方便支持搜索功能（0代表不搜索）
  UnknownSource = 0;
  // 内部订单
  Inner = 1;
  // 有赞订单
  Youzan = 2;
  // 小鹅通 废弃
  // Xiaoetong = 3;
  // 视频号
  Shipinhao = 3;
  // 抖店订单
  Doudian = 5;
  // 小红书
  XHS = 6;
}

// 外部订单表 outer_order-订单状态
enum OuterOrderTradeState {
  UnknownTradeState = 0; // 不使用
  TradePaidSuccess = 100; // 支付成功
  Refund = 200; // 退款
  RefundPart = 210; // 部分退款
}

message OrderSourceInfo {
  OrderSource source = 1;
  // source 对应的描述信息
  string desc = 2;
}

message PlaceSaleOrderRequest {
  // 使用 order_source 接口选择
  OrderSource source = 1;
  // 原订单id
  string original_order_id = 2;
  // 原支付金额（单位: 分）
  int32 price = 3;
  // 选择下单的 package_id
  int64 package_id = 4;
  // 备注信息
  string remark = 5;
  // 地址信息
  LogisticsAddressInfo address = 6;
}

message PlaceSaleOrderPackageSelector {
  // 外部订单源的 sku
  string sku = 1;
  // 套餐id
  int64 package_id = 2;
  // 套餐名
  string package_name = 3;
}

message PlaceSaleOrderPackagesRequest {
}

message PlaceSaleOrderPackagesResponse {
  repeated PlaceSaleOrderPackageSelector packages = 1;
}

message ListOrderSourcesRequest {
}

message ListOrderSourcesResponse {
  repeated OrderSourceInfo order_sources = 1;
}

message ListOrderActionsRequest {
  // 订单 id
  string order_id = 1;
  int64 limit = 2;
  int64 offset = 3;
}

message SaleOrderAction {
  int64 user_id = 1;
  string order_id = 2;
  // action 类型
  string action = 3;
  // action对应的新值描述。可能为空字符串
  string new_value = 4;
  // action之前的旧值描述。可能为空字符串
  string old_value = 5;
  // 操作人。如果为用户操作，则为uid；如果是系统自动操作，则为readcamp。
  string opuser = 6;
  // 操作时间，格式：2022-12-11 13:13:12
  string ct = 7;
}
message ListOrderActionsResponse {
  repeated SaleOrderAction actions = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}

message AddSkuPackageMappingRequest {
  // 使用 order_source 接口选择
  OrderSource source = 1;
  // sku
  string sku = 2;
  // sku的备注信息
  string sku_remark = 3;
  // 兑换码批次
  repeated int64 category_ids = 4;
}

message OrderCategory {
  // 兑换码批次id
  int64 category_id = 1;
  // 兑换码批次描述
  string category_desc = 2;
  // package_id
  int64 package_id = 3;
}

message SkuPackageMapppingItem {
  // 订单源信息
  OrderSourceInfo source = 1;
  // sku
  string sku = 2;
  // sku 备注信息
  string sku_remark = 3;
  // 兑换码信息
  repeated OrderCategory categories = 4;
  // 创建时间
  int64 ct = 5;
  // 修改时间
  int64 ut = 6;
  // 创建人
  string creator = 7;
}

message ListSkuPackageMappingRequest {
  int64 limit = 1;
  int64 offset = 2;
  // 订单来源
  OrderSource source = 3;
  // sku_id
  string sku_id = 4;
  // 创建人 名字+工号
  string creator = 5;
}

message ListSkuPackageMappingResponse {
  repeated SkuPackageMapppingItem items = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}

message GetCategoryRequest {
  // 兑换码批次id
  int64 category_id = 1;
}

message UpdateYouzaItemPackageRequest {
  int32 id = 1;
  // 有赞商品id
  int64 youzan_item_id = 2;
  // 内部package_id
  int64 package_id = 3;
  // 兑换码批次id
  int64 category_id = 4;
}

message WeeklyGift {
  int32 id = 1;
  User user = 2;
  // 第几周，形如 202201, 202234
  int32 week = 3;
  // 海报创建时间戳
  int64 poster_create_time = 4;
  // 截图的 url
  string snapshot_url = 5;
  // 截图上传时间戳
  int64 snapshot_upload_time = 6;
  // 截图上传人(仅老师操作时有效)
  string snapshot_upload_opuser = 7;
  // 状态: 0=海报已生成, 1=截图已上传(即待审核), 2=审核通过, 3=审核不通过
  int32 status = 8;
  // 发放的星币数量，审核通过才有
  int32 coin = 9;
  // 失败原因，审核不通过才有
  string fail_reason = 10;
  // 访问次数
  int32 visit_count = 11;
  // 创建时间戳
  int64 created_at = 12;
  // 更新时间戳
  int64 updated_at = 13;
  // 结束时间戳
  int64 end_at = 14;
}

message GetCurrentWeeklyGiftRequest {}

message CreateWeeklyGiftRequest {}

message UploadWeeklyGiftSnapshotRequest {
  // 周周有礼id
  int32 id = 1;
  // 截图的 uri (注意，不是 url)
  string snapshot_uri = 2;
}

message AdminGetCurrentWeeklyGiftRequest {
  // 周周有礼用户id
  int64 user_id = 1;
}

message AdminCreateWeeklyGiftRequest {
  // 周周有礼用户id
  int64 user_id = 1;
}

message AdminUploadWeeklyGiftSnapshotRequest {
  // 周周有礼id(仅当管理员角色上传过期记录时使用，默认不使用)
  int32 id = 1;
  // 截图的 uri (注意，不是 url)
  string snapshot_uri = 2;
  // 截图所属用户
  int64 user_id = 3;
}

message ReferralPosterVisitReportRequest {
  int32 id = 1;
  string h_did = 2;
}

message WeeklyGiftVisitReportRequest {
  int32 id = 1;
  string h_did = 2;
}

message WeeklyGiftListRequest {
  int64 offset = 1;
  int64 limit = 2;
}

message WeeklyGiftListResponse {
  repeated WeeklyGift items = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}

message AdminWeeklyGiftListRequest {
  // 状态：0： 海报已生成；1：截图已上传(即待审核)；2：审核通过；3：审核不通过
  repeated int32 statuses = 1;
  // 用户id
  int64 user_id = 2;
  // 创建起始时间
  int64 create_time_begin = 3;
  // 创建结束时间
  int64 create_time_end = 4;
  int64 offset = 5;
  int64 limit = 6;
  // （废弃）截图上传起始时间
  int64 snapshot_upload_time_begin = 7;
  // （废弃）截图上传结束时间
  int64 snapshot_upload_time_end = 8;
}

message AdminWeeklyGiftListResponse {
  repeated WeeklyGift items = 1;
  int64 offset = 3;
  int64 total = 4;
  bool more = 5;
}

message WeeklyGiftReviewRequest {
  int32 id = 1;
  bool pass = 2; // 是否审核通过
  string fail_reason = 3; // (仅不通过时有效)，不通过的原因
}

message WeeklyGiftLeftCountRequest {}

message WeeklyGiftLeftCountResponse {
  // 用户id
  int64 user_id = 1;
  // 周周有礼剩余有效次数
  int32 left_count = 2;
}

message BookmarkHistory {
  int32 id = 1;
  // 用户id
  int64 user_id = 2;
  // 被邀请者id
  int64 invitee_id = 3;
  // 书签动作类型 1:被邀请者体验课完课发放 2:被邀请者购买正价课 3:被邀请者退课正价课 4:使用书签抽奖 5:过期 6:自然月首次周周有礼发放
  int32 action_type = 4;
  // 书签数量(对应type) 被邀请者体验课完课发放:4 被邀请者购买正价课:15 被邀请者退课正价课:-x 使用书签抽奖:-x 过期:-全部 自然月首次周周有礼发放:1
  int32 num = 5;
  // 使用书签抽奖时关联抽奖记录
  repeated int32 draw_ids = 6;
  // 创建时间戳
  int64 created_at = 7;
  // 更新时间戳
  int64 updated_at = 8;
}

message BookmarkDraw {
  int32 id = 1;
  // 用户id
  int64 user_id = 2;
  // 被邀请者id
  int64 invitee_id = 3;
  // 中奖类型 1:门票 2:红包 3:退费 4:退票
  int32 draw_type = 4;
  // 数量(对应中奖类型) 门票:1 红包:20x 退费:20x 退票:1
  int32 num = 5;
  // 创建时间戳
  int64 created_at = 6;
  // 更新时间戳
  int64 updated_at = 7;
}

message UserPayInfo {
  int32 id = 1;
  // 用户id
  int64 user_id = 2;
  // 收款人姓名
  string user_name = 3;
  // 收款银行
  string bank = 4;
  // 银行卡号
  string card_no = 5;
  // 身份证号
  string id_no = 6;
  // 创建时间戳
  int64 created_at = 7;
  // 更新时间戳
  int64 updated_at = 8;
}

message BookmarkUser {
  // 手机号后4位
  string last_phone = 1;
  // 头像
  string avatar = 2;
  // 书签总量
  int32 bookmark_count = 3;
  // 排名
  int32 rank = 4;
  // 可用书签量
  int32 bookmark_avail_count = 5;
}

message BookmarkRankListRequest {
  int64 offset = 1;
  int64 limit = 2;
}

message BookmarkRankListResponse {
  repeated BookmarkUser items = 1;
  // 用户id
  int64 user_id = 2;
  // 当前用户排行榜信息
  BookmarkUser bookmark_user = 3;
  // 剩余门票数
  int32 left_ticket_num = 4;
  int64 offset = 5;
  int64 total = 6;
  bool more = 7;
}

message BookmarkAndDraw {
  // 手机号后4位
  string last_phone = 1;
  // 类型: 1:获得书签 2:抽中红包 3:抽中门票
  int32 action_type = 2;
  // 数量
  int32 num = 3;
}

message BookmarkAndDrawListRequest {}

message BookmarkAndDrawListResponse {
  repeated BookmarkAndDraw items = 1;
}

message BookmarkHistoryListRequest {
  int64 offset = 1;
  int64 limit = 2;
}

message BookmarkHistoryListResponse {
  repeated BookmarkHistory items = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}

message BookmarkDrawListRequest {
  int64 offset = 1;
  int64 limit = 2;
}

message BookmarkDrawListResponse {
  repeated BookmarkDraw items = 1;
  // 红包总现金
  int32 total_red_package = 2;
  // 门票数量
  int32 ticket_num = 3;
  int64 offset = 4;
  int64 total = 5;
  bool more = 6;
}

message BookmarkDrawRequest {}
message BookmarkDrawAllRequest {}
message BookmarkDrawAllResponse {
  // 红包
  BookmarkDraw red_package = 1;
  // 门票
  BookmarkDraw ticket = 2;
}

message UserPayInfoCreateRequest {
  // 收款人姓名
  string user_name = 1;
  // 收款银行
  string bank = 2;
  // 银行卡号
  string card_no = 3;
  // 身份证号
  string id_no = 4;
}
message UserPayInfoGetRequest {}

message Feedback {
  int32 id = 1;
  User user = 2;
  // 反馈类别: course=课程问题，software=软件问题，delivery=发货问题
  string category = 3;
  // 反馈内容
  string content = 4;
  // 附带资源(目前只有图片)
  repeated MediaResource resources = 5;
  // 回复(多次回复时，将覆盖之前的 reply)
  string reply = 6;
  // 回复人
  string reply_opuser = 7;
  // 回复更新时间
  int64 reply_update_at = 8;
  // 创建时间
  int64 created_at = 9;
  // 更新时间
  int64 updated_at = 10;
}

message UserFeedbackListRequest {
  int64 offset = 1;
  int64 limit = 2;
}
message UserFeedbackListResponse {
  repeated Feedback feedbacks = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}

message AddFeedbackRequest {
  // 反馈类别: course=课程问题，software=软件问题，delivery=发货问题
  string category = 3;
  // 反馈内容
  string content = 4;
  // 附带资源, resource 里的 url，应传入 uri
  repeated MediaResource resources = 5;
}

message AdminFeedbackListRequest {
  int64 offset = 1;
  int64 limit = 2;
}
message AdminFeedbackListResponse {
  repeated Feedback feedbacks = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}

message AdminReplyFeedbackRequest {
  int32 feedback_id = 1;
  string reply = 2;
}

message UserCouponCreateRequest {}

message UserCouponCreateResponse {}

message AdminUserCourseLecturesDetailRequest {
  int64 user_id = 1;
  int32 course_id = 2;
}

message AdminUserCourseLecturesDetailResponse {
  message Lecture {
    int32 id = 1;
    string name = 2;
    int32 guide_study_duration_s = 3;
    int32 original_study_duration_s = 4;
    int32 finished_rate = 5;
    int32 lecture_num = 6;
  }
  repeated Lecture lectures = 1;
}

message AdminUserSearchRequest {
  string query = 1;
}

message UserConversionCourseDetail {
  // 课程类型：1：大课，5：小课（定义为5，没有定义为2，是因为需要和course结构中的course_type对应）
  int32 course_type = 1;
  // 一次购买了多少课程
  int32 course_number = 2;
  // 购买时间戳
  int64 bought_ts = 3;
}

message UserConversion {
  // 第一次购买课程信息，可能为null
  UserConversionCourseDetail first_bought_course = 1;
  // 上次购买课程信息，可能为null
  UserConversionCourseDetail last_bought_course = 2;
  // 第一次手动开课的课程信息，可能为null
  UserConversionCourseDetail first_manual_owned_course = 3;
  // 上次手动开课的课程信息，可能为null
  UserConversionCourseDetail last_manual_owned_course = 4;
  // 大课包课程总数
  int32 total_formal_course_number = 5;
  // 小课包课程总数
  int32 total_extension_course_number = 6;
  // 用户已购买的大课包数量
  int32 has_bought_formal_course_number = 7;
  // 用户已购买的小课包数量
  int32 has_bought_extension_course_number = 8;
}

message AdminUserSearchResponse {
  message UserBaseInfo {
    int64 id = 1;
    string name = 2;
    string avatar = 3;
    string wechat_nickname = 4;
    string device_info = 5;
    string teacher = 6;
    string trial_course_period = 7;
    // 脱敏手机号
    string phone = 8;
  }
  message Course {
    int32 id = 1;
    string name = 2;
    int64 created_at = 3;
    // 开课备注
    string remark = 4;
    // 课程完成度
    int32 finished_rate = 5;
    // 当前完成度，定义为：已学完的课节中，max(lecture_number) / count(lectures)
    int32 curr_finished_rate = 6;
    // 平均每日学习的课节数
    int32 avg_daily_lectures = 7;
    // 平均每日学习的时长
    int32 avg_daily_duration_s = 8;
    // 是否允许调课
    bool can_change_course = 9;
  }
  message Order {
    // 订单号
    string id = 1;
    // 套餐 id
    string package_id = 2;
    // 套餐名称
    string package_desc = 3;
    // 订单金额
    int32 total_price = 4;
    // 实际支付金额
    int32 price = 5;
    // 当前订单状态:0初始化状态；20: 订单已完成 -10:部分退款；-20:子订单全部退款
    int32 status = 6;
    // 创建时间
    int64 created_at = 7;
    // 订单备注信息
    string remark = 8;
  }
  // TODO：转移到外部使用
  message UserConversionCourseDetail {
    // 课程类型：1：大课，5：小课（定义为5，没有定义为2，是因为需要和course结构中的course_type对应）
    int32 course_type = 1;
    // 一次购买了多少课程
    int32 course_number = 2;
    // 购买时间戳
    int64 bought_ts = 3;
  }
  // TODO：使用外部的UserConversion
  message UserConversion {
    // 第一次购买课程信息，可能为null
    UserConversionCourseDetail first_bought_course = 1;
    // 上次购买课程信息，可能为null
    UserConversionCourseDetail last_bought_course = 2;
    // 第一次手动开课的课程信息，可能为null
    UserConversionCourseDetail first_manual_owned_course = 3;
    // 上次手动开课的课程信息，可能为null
    UserConversionCourseDetail last_manual_owned_course = 4;
    // 大课包课程总数
    int32 total_formal_course_number = 5;
    // 小课包课程总数
    int32 total_extension_course_number = 6;
    // 用户已购买的大课包数量
    int32 has_bought_formal_course_number = 7;
    // 用户已购买的小课包数量
    int32 has_bought_extension_course_number = 8;
  }
  message QwFriendInfo {
    // 老师op_name。
    string teacher_op_name = 1;
    // 添加时间
    int64 created_at = 2;
    // 添加方式: 主动添加, 被动添加, 内部成员共享/管理员分配
    string add_method = 3;
  }

  message InviterInfo {
    // 手机号
    string phone = 1;
    int64 uid = 2;
    // 用户名
    string name = 3;
    // 城市
    string city = 4;
    // 省份
    string province = 5;
    // 转化情况
    int64 transform_type = 6;
    // 体验课下单时间
    int64 trial_course_ts = 7;
    // 订单id
    string order_id = 8;
  }
  message InvitationInfo {
    // 推荐人id
    int64 inviter_id = 1;
    // 是否koc
    bool is_koc = 2;
    // 推荐人
    string inviter_name = 3;
    // 推荐列表
    repeated InviterInfo inviter_infos =4;
  }
  message UserInfo {
    UserBaseInfo base_info = 1;
    repeated Course courses = 2;
    repeated Order orders = 3;
    repeated LogisticsOrderInfo shopmall_orders = 4;
    UserConversion conversion = 5; // 用户转化相关
    repeated QwFriendInfo qw_friends = 6;
    // 转介绍相关
    InvitationInfo invitation_info = 7;
  }
  repeated UserInfo users = 1;
}

message AdminUserStudyDurationDailyRequest {
  // user_id的获取可以从 「/admin/base/readcamp/user_search」接口拿到，所以需要等后者完成再调用本接口
  int64 user_id = 1;
  // 开始时间：2023-03-22（包含）
  string begin_time = 2;
  // 结束时间：2023-05-22（包含）
  string end_time = 3;
}

message DailyDuration {
  // 日期如：20230112
  int32 daytime = 1;
  // 当天学习时长（s）
  int32 study_duration_s = 2;
  // 活跃档次：0-3。越大表示用户越活跃
  int32 active_grade = 3;
}

message AdminUserStudyDurationDailyResponse {
  // TODO: 待迁移
  message DailyDuration {
    // 日期如：20230112
    int32 daytime = 1;
    // 当天学习时长（s）
    int32 study_duration_s = 2;
    // 活跃档次：0-3。越大表示用户越活跃
    int32 active_grade = 3;
  }
  // 按时间顺序正序返回
  repeated DailyDuration durations = 1;
}

message AdminUserStudyDailyRequest {
  // user_id的获取可以从 「/admin/base/readcamp/user_search」接口拿到，所以需要等后者完成再调用本接口
  int64 user_id = 1;
  int64 offset = 2;
  int64 limit = 3;
}

message AdminUserStudyDailyResponse {
  message Lecture {
    int32 lecture_id = 1;
    int32 lecture_number = 2;
    string lecture_name = 3;
  }
  message Course {
    int32 course_id = 1;
    string course_name = 2;
    // 用户当前课程学习时长(s)
    int32 study_duration_s = 3;
    // TODO：待删除。这一天这个课程学习了哪些课节。
    repeated int32 lecture_ids = 4;
    // 这一天这个课程学习了哪些课节
    repeated Lecture lectures = 5;
  }
  message StudyScene {
    // 上课页面的学习时长（s）
    int32 inclass_study_duration_s = 1;
    // 磨耳朵场景的学习时长（s）
    int32 practice_study_duration_s = 2;
  }
  message StudyContent {
    // 导读学习时长（s）
    int32 guide_study_duration_s = 1;
    // 原音学习时长（s）
    int32 original_study_duration_s = 2;
  }
  message Item {
    // 日期：如 20230322
    int32 daytime = 1;
    // 当天学习时长(s)
    int32 study_duration_s = 2;
    // 课程情况
    repeated Course course = 3;
    // 上课场景
    StudyScene study_scene = 4;
    // 上课内容
    StudyContent study_content = 5;
  }
  repeated Item items = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}

message AdminQueryFormalUserCenterRequest {
  // 要查询的字符串：uid 或者手机号，为空不做筛选
  string key = 1;
  // 老师邮箱前缀，为空不做筛选
  string teacher_opname = 2;
  // 已购买正价课的课程个数，空数组不做筛选
  repeated int32 has_bought_formal_course_number = 3;
  // 已购买小课包的课程个数，空数组不做筛选
  repeated int32 has_bought_extension_course_number = 4;
  // 开课时间，如20220405，需要是一个周一。为0不做筛选
  int32 course_start_day = 5;
  // 添加老师的状态，0：不做筛选，1：已添加；2：未添加；3：未绑定
  int32 add_teacher_status = 6;
  // 待搜索的 uid 列表
  repeated int64 user_ids = 7;
  // 用户购买的正价课列表（与的关系）
  repeated int32 has_bought_course_ids = 8;
  int64 limit = 9;
  int64 offset = 10;
}

message AdminQueryFormalUserCenterResponse {
  message UserBase {
    // 伴鱼内用户名
    string name = 1;
    int64 user_id = 2;
    // 微信昵称
    string wechat_name = 3;
    // 微信头像，可能为空
    string wechat_avatar = 4;
  }
  message TeacherInfo {
    // 老师邮箱前缀
    string teacher_opname = 1;
    // 是否已添加老师
    bool has_add_teacher = 2;
    // 老师对uid的备注信息
    string teacher_uid_remark = 3;
  }
  message Item {
    UserBase user = 1;
    UserConversion conversion = 2;
    repeated DailyDuration duration = 3;
    TeacherInfo teacher = 4;
    // 预估消费金额，单位：分
    int32 estimated_cost = 5;
    // 关联的uids
    repeated int64 associated_uids = 6;
  }
  repeated Item items = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}

message AdminAssociateUidRequest {
  // 原来的user_id
  int64 user_id = 1;
  // 被关联的uid
  int64 associated_uid = 2;
}

message GetCodeRequest {
  // 兑换码
  string code = 1;
}

message CodeInfo {
  // 是否包含实物单
  bool has_shopmall_order = 1;
  // 是否包含体验课
  bool has_trial_course = 2;
}

message GetCodeResponse {
  CodeInfo code = 1;
}

message UpdateInteractionConfRequest {
  // 行为：insert: 插入，update: 更新，delete: 删除
  string op = 1;
  int32 lecture_id = 2;
  // 点位配置
  InteractionPointConf point_conf = 3;
}

message UpdateInteractionConfResponse {
  int32 lecture_id = 1;
  InteractionConf interaction_conf = 2;
}

message WechatCustomerServiceRequest {}
message WechatCustomerServiceResponse {
  // 企业 ID
  string corp_id = 1;
  // 客服链接
  string customer_service_url = 2;
}

message GetCustomerServiceChatGPTPromtRequest {}
message GetCustomerServiceChatGPTPromtResponse {
  // role=system 的 promt
  string system_prompt = 1;
  // role=assistant 的 promt
  string assistant_prompt = 2;
  // 用户历史消息条数
  int32 user_history_message_count = 3;
  // 生成的回复的最大 token 数量
  int32 max_tokens = 4;
}

message SetCustomerServiceChatGPTPromtRequest {
  // role=system 的 promt
  string system_prompt = 1;
  // role=assistant 的 promt
  string assistant_prompt = 2;
  // 用户历史消息条数
  int32 user_history_message_count = 3;
  // 生成的回复的最大 token 数量
  int32 max_tokens = 4;
}

message ReadcampTeacher {
  // id(组织架构id)
  int64 id = 1;
  // 名称(如“黄冰”)
  string name = 2;
  // opname(如huangbing18876)
  string op_name = 3;
  // 部门id
  int64 department_id = 4;
}
message ListReadcampTeacherRequest {}
message ListReadcampTeacherResponse {
  // 老师列表
  repeated ReadcampTeacher teachers = 1;
}

message UserAggregateInfo {
  message UserBaseInfo {
    // 昵称
    string name = 1;
    // 头像
    string avatar = 2;
    // 微信昵称
    string wechat_nickname = 3;
    // 注册时间
    int64 register_time = 4;
    // 手机号
    string phone = 5;
  }
  // uid
  int64 uid = 1;
  UserBaseInfo user_base_info = 2;
  // 老师op_name
  string teacher = 3;
  // 体验课班期(格式"20230102")
  string trial_course_period = 4;
  // 是否购买正价课
  bool bought_formal_courses = 5;
  // 购买课程id列表
  repeated int32 bought_courses = 6;
  // 累计消费金额(单位:分)
  int64 total_price = 7;
  // 累计学习时长(单位:秒)
  int32 study_duration = 8;
  // 其他信息
  map<string, string> user_extra_info = 9;
  // 外呼备注
  string webcall_remark = 10;
  // 外呼次数
  int32 webcall_count = 11;
  // 已完成的自己级别的课节数
  int32 finish_lecture_count = 12;
  // 是否已添加老师微信
  bool has_added_teacher = 13;
}

message ListUserAggregateInfoRequest {
  // uid或手机号(非+86开头)
  string key = 1;
  // 购买课程id
  int32 bought_course_id = 2;
  // 老师op_name(模糊搜索)
  string teacher = 3;
  // 体验课班期(格式"20230102")
  string trial_course_period = 4;
  // 外呼次数搜索
  repeated int32 webcall_count = 5;
  // 分配老师的起始时间
  int64 user_teacher_ct_begin = 6;
  // 分配老师的结束时间
  int64 user_teacher_ct_end = 7;

  // 可选，是否添加老师微信：0：不做筛选；1：已添加；2：未添加
  int32 has_added_teacher = 8;
  // 可选，根据「第n课节是否已完成」筛选时，选择的哪节课：0：导读课，1：第一节... 是否筛选取决于 has_lecture_finished 字段
  int32 queried_lecture_number = 9;
  // 可选，queried_lecture_number 字段的筛选条件：0：不做筛选，1：已完成，2：未完成...
  int32 has_lecture_finished = 10;
  // 可选，已完成自己级别的体验课课节数
  repeated int32 finish_lecture_counts = 11;

  int64 offset = 12;
  int64 limit = 13;
}

message ListUserAggregateInfoResponse {
  repeated UserAggregateInfo user_aggregate_info = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}

message AppUpdateConfig {
  message UpdateConfig {
    string min_version = 1;
    string max_version = 2;
    // 推荐次数: once | multiple_times。仅用于推荐更新时。
    string recommend_times = 3;
  }
  // 最新版本
  string newest_version = 1;
  // 更新文案
  string description = 2;
  // for Android only
  string apk_url = 3;
  // for Android only
  string apk_md5 = 4;
  // 强制更新
  UpdateConfig force_update = 5;
  // 推荐更新
  UpdateConfig recommend_update = 6;
  // 主动更新
  UpdateConfig manual_update = 7;
}

message GetAppUpdateConfigRequest {}
message GetAppUpdateConfigResponse {
  AppUpdateConfig android = 1;
  AppUpdateConfig ios = 2;
}
message SetAppUpdateConfigRequest {
  // android | ios
  string app = 1;
  AppUpdateConfig config = 2;
}

message SendAddWechatSmsRequest {
  int64 user_id = 1;
}

message BatchSendAddWechatSmsRequest {
  repeated int64 uids = 1;
}

message BatchSendAddWechatSmsResponse {
  // 发送详情信息，比如多少在发送中，多少命中限流等。
  string message = 1;
}

message ReportInteractionMultipleChoiceResultRequest {
  int32 lecture_id = 1;
  // 点位配置 id。
  int32 point_conf_id = 2;
  // 用户的选项，图片url。
  string user_choose = 3;
  // 点位内容。需要上报，后端配置可能被更新，前后端可能存在短暂不一致现象。
  string content = 4;
  // 用户选择是否正确。
  bool is_correct = 5;
  // 用户作答时长(ms)。
  int32 duration_ms = 6;
}

message GrouponUserShowInfo {
  // uid
  int64 user_id = 1;
  // 手机号后4位
  string last_phone = 2;
  // 头像
  string avatar = 3;
}

message GrouponMember {
  int32 id = 1;
  // 参团人信息
  GrouponUserShowInfo member = 2;
  // 拼团id
  int32 groupon_id = 3;
  // 团员拼团交易中台订单id
  string order_id = 4;
  // 参团时间戳
  int64 ct = 5;
  // 更新时间戳
  int64 ut = 6;
}

message Groupon {
  int32 id = 1;
  // 团长信息
  GrouponUserShowInfo creator = 2;
  // 拼团活动id
  int32 groupon_activity_id = 3;
  // 拼团类型: 1:3人团 2:1人团
  int32 groupon_type = 4;
  // 团长开团交易中台订单id
  string order_id = 5;
  // 状态: 1有效 2拼团成功 3超时失败
  int32 status = 6;
  // 参团成员
  repeated GrouponMember members = 7;
  // 开团时间戳
  int64 ct = 8;
  // 成团时间戳
  int64 ot = 9;
  // 更新时间戳
  int64 ut = 10;
}

message GetGrouponByCreatorRequest {
  // 团长uid
  int64 creator_id = 1;
  // 套餐id
  int64 package_id = 2;
}

message GetGrouponByIdRequest {
  // 拼团id
  int32 groupon_id = 1;
}

message GetGrouponQrCodeRequest {
  // 拼团id
  int32 groupon_id = 1;
}

message GetGrouponQrCodeResponse {
  // 拼团带参二维码url
  string qrcode_url = 1;
}

message SuccessGroupon {
  // uid
  int64 user_id = 1;
  // 手机号后4位
  string last_phone = 2;
}

message RecentSuccessGrouponRequest {}

message RecentSuccessGrouponResponse {
  repeated SuccessGroupon items = 1;
}

message CheckUserJoinGrouponRequest {
  // 拼团id
  int32 groupon_id = 1;
}

message CheckUserJoinGrouponResponse {
  // uid
  int64 user_id = 1;
  // 是否可参团
  bool can_join = 2;
  // 已有团id(can_join为false且groupon_id大于0时才有意义)
  int32 groupon_id = 3;
}

message CheckUserCanCreateGrouponRequest {
  // 套餐id
  int64 package_id = 1;
}

message CheckUserCanCreateGrouponResponse {
  // uid
  int64 user_id = 1;
  // 是否可开团
  bool can_create = 2;
  // 已有团id(can_create为false时才有意义)
  int32 groupon_id = 3;
}

message GetGrouponActivityRequest {
  // 拼团活动id
  int32 groupon_activity_id = 1;
}

message GrouponActivity {
  int32 id = 1;
  // 拼团活动名称
  string name = 2;
  // 绘本课程id
  int64 out_course_id = 3;
  // 套餐id
  int64 package_id = 4;
  // 拼团类型: 1:3人团 2:1人团
  int32 groupon_type = 5;
  // 状态: 1有效 2无效
  int32 status = 6;
  // 开团时间戳
  int64 ct = 7;
  // 更新时间戳
  int64 ut = 8;
}

message GetGrouponCreatorTeacherByMemberRequest {
  // 拼团id
  int32 groupon_id = 3;
}

message GetGrouponCreatorTeacherByMemberResponse {
  // 老师的teacher_id(没有老师时为空)
  string teacher_id = 1;
}

message Teacher {
  int32 id = 1;
  // 老师的邮箱前缀
  string op_name = 2;
  // 在职/离职状态。1=在职, 2=离职
  int32 status = 3;
  // 是否轮询
  bool polling = 4;
  // 是否已删除
  bool deleted = 5;
  // 分配阈值
  int32 threshold = 6;
  // 创建时间
  int64 created_at = 7;
  // 更新时间
  int64 updated_at = 8;
  // 角色 sale: 销售 class：班主任 other：其他
  repeated string role_tags = 9;
}

message TeacherListRequest {
  // 0:全部 1:在职 2:离职
  int32 status = 1;
  int64 offset = 2;
  int64 limit = 3;
  // 顾问名字 (仅支持拼音+工号)
  string key = 4;
  // 是否移除 0:正常 1:已删除
  int32 deleted = 5;
  // 顾问id
  int64 teacher_id = 6;
  // 角色标签
  repeated string role_tags = 7;
}

// 老师企微好友情况
message TeacherQwFriendInfo {
  // 好友数量
  int32 friend_count = 1;
  // 正价课好友数量
  int32 formal_course_friend_count = 2;
}

message TeacherAssignStatus {
  // 当前班期已分配正价课用户个数
  int32 formal_count = 1;
  // 当前班期已分配体验课用户个数
  int32 trial_count = 2;
}

message TeacherInfo {
  Teacher teacher = 1;
  // 老师企微好友情况
  TeacherQwFriendInfo friend_info = 2;
  // 已分配状态
  TeacherAssignStatus assign_status = 3;
}

message TeacherListResponse {
  repeated TeacherInfo teachers = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}

message AddTeacherRequest {
  string op_name = 1;
  // 分配阈值
  int32 threshold = 2;
  // 角色: sale: 销售，class：班主任 other：其他
  repeated string role_tags = 3;
}

message DeleteTeacherRequest {
  int32 teacher_id = 1;
}

message TransferTeacherUserRequest {
  // 转出的老师
  int32 from_teacher_id = 1;
  // 转移方式: polling | to_teacher | to_teachers
  string transfer_method = 2;
  // （已废弃）转入的老师。仅当 transfer_method = to_teacher 时有效。
  int32 to_teacher_id = 3;
  // 转入的老师列表，仅当 transfer_method = to_teachers 时有效
  repeated int32 to_teacher_ids = 4;
}

message ListConfirmingTeacherUsersRequest {
  // 状态: pending | done
  string status = 1;
  int64 offset = 2;
  int64 limit = 3;
}

message ListConfirmingTeacherUsersResponse {
  message QwFriendInfo {
    // 老师op_name。这里获取不到老师的微信昵称
    string teacher_op_name = 1;
    // 添加时间
    int64 created_at = 2;
    // 添加方式: 主动添加, 被动添加, 内部成员共享/管理员分配
    string add_method = 3;
    // 会话轮次
    int32 session_count = 4;
  }
  message TeacherUser {
    int32 id = 1;
    User user = 2;
    // 微信昵称
    string wechat_nickname = 3;
    // 下单方式
    string order_source = 4;
    // 企微好友情况
    repeated QwFriendInfo qw_friends = 5;
    // 收货地址
    LogisticsAddressInfo logistics_address = 6;
    // 归属顾问，为空时即是「待确认」状态
    string teacher_op_name = 7;
    // 创建时间
    int64 created_at = 8;
    // 更新时间
    int64 updated_at = 9;
    // 是否绑定过企微id
    bool has_binded_qw_user_id = 10;
    message Course {
      // 课程id
      int32 id = 1;
      // 课程名
      string name = 2;
      // 课程类型：1：正价课(level=1/2/3/4)，2：体验课(level=0)，3：分销课(level=100)，4：赠送课(level=100)， 5：拓课包
      int32 course_type = 3;
    }
    // 课程信息
    repeated Course courses = 11;
  }
  repeated TeacherUser users = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}

message ConfirmUserTeacherRequest {
  int64 user_id = 1;
  int32 teacher_id = 2;
}

message TeacherThreshold {
  // 老师分配阈值
  int32 threshold = 1;
}

message ManagerTeacherRequest {
  // 老师 id
  int32 teacher_id = 1;
  // 轮训开关：0，不配置；1：打开；2：关闭
  int32 poll_switch = 2;
  // 老师分配阈值，不传此字段为不配置，传了此字段即需要配置
  TeacherThreshold threshold = 3;
  // 在职状态 1:在职 2:离职
  int32 status = 4;
  // 是否移除 0:正常 1:已移除
  int32 deleted = 5;
  // 角色 sale: 销售 class：班主任 other：其他
  repeated string role_tags = 6;
}

message GetTrialCourseCalendarUrlRequest {}
message GetTrialCourseCalendarUrlResponse {
  string calendar_url = 1;
}

message ReportUserLectureExerciseRequest {
  // 场景：exercise: 练一练, wanyiwan：玩一玩
  string scene = 1;
  int32 lecture_id = 2;
  // 完成的进度：0-100，由 已完成的页数 / 总页数 计算得到
  int32 finished_rate = 3;
}

message GetUserLectureProgressRequest {
  int32 lecture_id = 1;
}

message GetUserLectureProgressResponse {
  // 导读的星星数
  int32 guide_stars = 1;
  // 原音的星星数
  int32 original_stars = 2;
  // 跟读的星星数
  int32 followme_stars = 3;
  // 练一练的星星数
  int32 exercise_stars = 4;
  // 玩一玩的星星数
  int32 wanyiwan_stars = 5;
  // 总的星星数
  int32 total_stars = 6;
  // 创意写作星星数
  int32 creative_write_stars = 7;
}

message GetUserLecturePrepareProgressRequest {
}

message GetUserLecturePrepareProgressResponse {
  // 是否已学完了导学课
  bool has_studied_guide = 1;
  // 是否预约过直播
  bool has_booked_livecast = 2;
  // 是否订阅过公众号
  bool has_subscribe_official_account = 3;
  // 是否订阅过日历
  bool has_subscribe_calendar = 4;
  // 是否添加过老师微信
  bool has_added_teacher = 5;
  // 总的星星数
  int32 total_stars = 6;
  // 每一项的需要发放的星星数量
  int32 item_stars = 7;
}

message GetUserCourseStatusRequest {}

message GetUserCourseStatusResponse {
  // uid
  int64 user_id = 1;
  // 是否为阅读营新用户（新用户表现为在阅读营未购买过任何课程）
  bool is_readcamp_new = 2;
  // 是否为阅读营正价课购买用户（有正价课开课的一定是购买）
  bool formal_bought = 3;
  // 是否为阅读营正价课开课用户
  bool formal_own = 4;
  // 首次正式课购买时间
  int32 first_formal_bought_time = 5;
  // 体验营开课时间 unix
  int32 trial_course_time = 6;
  // 是否有扩展课
  bool has_extension_course = 7;
}

message TmkRecallCreateOrderRequest {
  string uid_token = 1;
  string utm_source = 2;
}
message TmkRecallCreateOrderResponse {
  // 登录授权码
  string auth_code = 1;
}

message AdminOrderProductListRequest {
}

message ShopmallOrderProduct {
  // 货物id 【交易中心】的product_id
  int64 id = 1;
  // 货物描述
  string desc = 2;
  // 商城的商品id 对应【交易中心】EquityUniqueid
  int64 gid = 3;

}

message AdminOrderProductListResponse {
  // 废弃
  repeated ShopmallOrderProduct products = 1;
  // 废弃
  repeated ShopmallOrderProduct products_v2 = 2;
  message ShopmallOrderProducts {
    repeated ShopmallOrderProduct products = 1;
  }
  // 套餐id对应的商品列表
  map<int64, ShopmallOrderProducts> group_products = 3;
}

message AdminUpdateShopmallOrderProductRequest {
  // shopmall_order 的 id
  int64 eid = 1;
  // 要更换的 product_id
  int64 product_id = 2;
}

message AdminUpdateShopmallOrderProductResponse {
  // 货物的新的备注信息
  string remark = 1;
}

message ChangeUserTeacherRequest {
  int64 user_id = 1;
  // 新的老师的 id
  int32 new_teacher_id = 2;
  // 支持批量分配
  repeated int64 user_ids = 3;
}

message LeadsOrder {
  // 订单id
  string order_id = 1;
  // 用户id
  int64 user_id = 2;
  // 套餐id
  int64 package_id = 3;
  // 套餐名称
  string package_name = 4;
  // 营期
  int64 course_period = 5;
  // 渠道
  string utm_source = 6;
  // 渠道名称
  string utm_source_name = 7;
  // 一级渠道名称
  string l1_name = 8;
  // 二级渠道名称
  string l2_name = 9;
  // 三级渠道名称
  string l3_name = 10;
  // 老师
  string teacher = 11;
  // 下单时间
  string order_time = 12;
  // 是否加微
  bool add_qw = 13;
  // 是否定级
  bool has_level = 14;
  // 状态
  int32 status = 15;
}

message SearchLeadsOrderRequest {
  // 可选。用户id(非0时忽略订单起始和结束时间)
  int64 user_id = 1;
  // 可选。套餐id列表
  repeated int64 package_ids = 2;
  // 可选。一级渠道id(与渠道列表互斥)
  int32 l1_id = 3;
  // 可选。二级渠道id(与渠道列表互斥)
  int32 l2_id = 4;
  // 可选。渠道列表(与一级、二级渠道互斥)
  repeated string utm_sources = 5;
  // 可选。老师op_name
  string teacher = 6;
  // 订单起始时间
  int64 order_begin_ts = 7;
  // 订单结束时间
  int64 order_end_ts = 8;
  int64 offset = 9;
  int64 limit = 10;
  // 三级渠道id
  int32 l3_id = 11;
  // 一级渠道id列表
  repeated int64 l1_ids = 12;
  // 二级级渠道id列表
  repeated int64 l2_ids = 13;
  // 三级渠道id列表
  repeated int64 l3_ids = 14;
}

message SearchLeadsOrderResponse {
  repeated LeadsOrder items = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}

message LeadsAggregateInfo {
  // 日期
  string day = 1;
  // 套餐id
  int64 package_id = 2;
  // 套餐名称
  string package_name = 3;
  // 营期
  int64 course_period = 4;
  // 渠道
  string utm_source = 5;
  // 渠道名称
  string utm_source_name = 6;
  // leads数
  int32 leads_count = 7;
}

message LeadsOrderSummaryRequest {
  // 可选。套餐id
  int64 package_id = 1;
  // 可选。渠道列表
  repeated string utm_sources = 2;
  string order_end_time = 3;
  // 订单起始时间
  int64 order_begin_ts = 4;
  // 订单结束时间
  int64 order_end_ts = 5;
}

message LeadsOrderSummaryResponse {
  repeated LeadsAggregateInfo items = 1;
  int64 total = 2;
}

message GetChatGPTDebugSettingsResquest {}

message GetChatGPTDebugSettingsResponse {
  // role=system 的 promt
  string default_system_prompt = 1;
  // role=assistant 的 promt
  string default_assistant_prompt = 2;
  // 用户历史消息条数
  int32 default_user_history_message_count = 3;
  // 生成的回复的最大 token 数量
  int32 default_max_tokens = 4;
  // 语料库列表
  repeated string corpuses = 5;
}

message DeleteChatGPTCorpusRequest {
  // 语料库名称
  string name = 1;
}

message GetChatGPTDebugHistoryMessagesRequest {
  // message 视为已按照 created_at 排好序。
  // before_msg_id 为可选字段。
  // 获取第一页时不传，获取上一页(即更早的)历史消息时，以本页第一条 msg 的 id 作为 before_msg_id。
  int32 before_msg_id = 1;
  int64 limit = 2;
}

message GetChatGPTDebugHistoryMessagesResponse {
  repeated ChatGPTDebugMessage messages = 1;
  bool more = 4;
}

message ChatGPTDebugMessage {
  int32 id = 1;
  string op_user = 2;
  // 用户发的消息
  string msg = 3;
  // chatgpt 的回复
  string reply = 4;
  int64 created_at = 5;
  int64 updated_at = 6;
}

message ChatGPTSendMessageRequest {
  // role=system 的 promt
  string system_prompt = 1;
  // role=assistant 的 promt
  string assistant_prompt = 2;
  // 用户历史消息条数
  int32 user_history_message_count = 3;
  // 生成的回复的最大 token 数量
  int32 max_tokens = 4;
  // 语料库
  string corpus = 5;
  string msg = 6;
}

message EvaluationKnowledge {
  // 词汇
  string vocabulary = 1;
  // 短语
  string phrase = 2;
  // 句型
  string sentence = 3;
}

message LexileRange {
  int32 min = 1;
  int32 max = 2;
}

message CreateLectureEvaluationRequest {
  string name = 1;
  int32 course_id = 2;
  // 多少课节之后
  int32 position = 3;
  int64 book_id = 4;
  // 头图的uri
  ImageCrtResource front_pic = 5;
  // 评测相关的知识点
  EvaluationKnowledge knowledge = 6;
  // 蓝思值范围
  LexileRange lexile_range = 7;
  // 题目个数
  int32 question_number = 8;
  // cocos场景列表，前端可不传，如果为空，默认为 learn,record
  string scene_list = 9;
}

message ListLectureEvaluationRequest {
  int64 limit = 1;
  int64 offset = 2;
}

message AdminLectureEvaluation {
  int32 id = 1;
  int32 course_id = 2;
  string course_name = 3;
  string name = 4;
  ImageResource front_pic = 5;
  int64 book_id = 6;
  int32 position = 7;
  // 已完成人数
  int32 finished_count = 8;
  // 评测相关知识点
  EvaluationKnowledge knowledge = 9;
  // 蓝思值范围
  LexileRange lexile_range = 10;
  // 题目个数
  int32 question_number = 11;
  // 维度列表：1: 听力，2：阅读，3：句型，4：词汇，5：口语
  repeated QuestionDimension dimensions = 12;
  // cocos场景列表
  string scene_list = 13;
  int64 created_at = 14;
  int64 updated_at = 15;
}

message ListLectureEvaluationResponse {
  repeated AdminLectureEvaluation evaluations = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}

message ModifyLectureEvaluationRequest {
  // 测评id
  int32 evaluation_id = 1;
  // 不为空则为待修改的值
  string name = 2;
  // 不为0则为待修改的值
  int32 course_id = 3;
  // 不为0则为待修改的值
  int32 position = 4;
  // 不为0则为待修改的值
  int64 book_id = 5;
  // 不为空则为待修改的值
  ImageCrtResource front_pic = 6;
  // 不为空则为待修改的值，整体修改。
  EvaluationKnowledge knowledge = 7;
  // 不为空则为待修改的值
  LexileRange lexile_range = 8;
  // 不为0则为待修改的值
  int32 question_number = 9;
  // cocos场景列表，前端可不传，如果为空，默认为 learn,record
  string scene_list = 10;
}

message QuestionDimension {
  // 每个题目的维度列表
  repeated int32 dimensions = 1;
}

message ModifyLectureEvaluationDetailRequest {
  //评测id
  int32 evaluation_id = 1;
  // 1: 听力，2：阅读，3：句型，4：词汇，5：口语
  repeated QuestionDimension dimensions = 2;
}

message GetEvaluationReporterRequest {
  int64 user_id = 1;
  int32 evaluation_id = 2;
}
message GetEvaluationReporterResponse {
  message User {
    // 优先宝宝名，没有宝宝名，使用用户名
    string name = 1;
    // 用户头像
    string avatar = 2;
  }
  message Course {
    // 课程级别
    int32 level = 1;
  }
  message EvaluationResult {
    int32 score = 1;
    // 超过多少百分比
    int32 percent = 2;
    // 蓝思值
    int32 lexile = 3;
    // 各维度评分：1: 听力，2：阅读，3：句型，4：词汇，5：口语
    map<int32, int32> dimension_score = 4;
    // 建议
    string suggestion = 5;
    // 测评结束时间，因为选择题和跟读不在一个场景下，拿不到总的时长
    string end_time = 7;
  }
  message Evaluation {
    // 测评知识点
    EvaluationKnowledge knowledge = 1;
  }
  User user = 1;
  Course course = 2;
  EvaluationResult evaluation_res = 3;
  Evaluation evaluation = 4;
  // 用户录音相关
  repeated UserRecording user_recordings = 5;
}

message ListCourseEvaluationsRequest {
  int32 course_id = 1;
}
message Evaluation {
  int32 id = 1;
  ImageResource front_pic = 2;
  int64 book_id = 3;
  // 位于哪个 lecture_number 之后
  int32 position = 4;
  // 场景列表
  string scene_list = 5;
}
message UserEvaluation {
  Evaluation evaluation = 1;
  bool has_finished = 2;
  // 是否能够进入测试
  bool can_evaluation = 3;
  // 如果已完成，分数值
  int32 score = 4;
  // 分数值超过的百分比
  int32 percent = 5;
  // baby名，存在的话为baby名，不存在的话，为用户名
  string baby_name = 6;

}
message ListCourseEvaluationsResponse {
  repeated UserEvaluation evaluations = 1;
}

message UserRecording {
  // 文本内容
  string content = 1;
  // 录音信息
  AudioResource recording = 2;
  // 标准发音
  AudioResource standard = 3;
  // 评分分数段，0表示小于60分，1表示60-70分，2表示70-80分，3表示80分以上
  int32 rank = 4;
  // 评分具体分数。
  int32 score = 5;
}
message LectureEvaluationItem {
  // 分数：选择题正确100，错误0。录音题即为score字段
  int32 score = 1;
  // 如果存在录音，保存录音信息
  UserRecording user_recording = 2;
}

message ReportLectureEvaluationRequest {
  int32 evaluation_id = 1;
  // 用户答题结果。
  repeated LectureEvaluationItem items = 2;
}

message WPMResult {
  int32 lecture_id = 1;
  // 总词数
  int32 total_word_cnt = 2;
  // 正确数
  int32 correct_word_cnt = 3;
  // 错误数
  int32 wrong_word_cnt = 4;
  // 读的不好的单词
  repeated string bad_words = 5;
  // 录音信息，注意上传使用的busiType：readcamp_recording，url需要按uri传递
  AudioResource recording = 6;
  // wpm值
  int32 wpm = 7;
}

message StudyPlanApplyRequest {}

message Poster {
  int32 id = 1;
  User user = 2;
  // 场景: -99:新手任务（原周周有礼）  1:DK 2:中文 3:DK6 4:july
  int32 scene = 3;
  // 截图的 url
  string snapshot_url = 4;
  // 截图上传人(仅老师操作时有效)
  string snapshot_upload_opuser = 5;
  // 状态: 0=海报已生成, 1=截图已上传(即待审核), 2=审核通过, 3=审核不通过
  int32 status = 6;
  // 失败原因，审核不通过才有
  string fail_reason = 7;
  // 截图上传时间戳
  int64 snapshot_upload_time = 8;
  // 创建时间戳
  int64 created_at = 9;
  // 更新时间戳
  int64 updated_at = 10;
  // 结束时间戳
  int64 end_at = 11;
  // 访问次数
  int32 visit_count = 12;
}

message CreatePosterRequest {
  // 场景: 1:DK 2:中文 3:DK6 4:july
  int32 scene = 1;
}

message UploadPosterSnapshotRequest {
  // 海报id
  int32 id = 1;
  // 截图的 uri
  string snapshot_uri = 2;
  // 场景id
  int32 scene = 3;
}

message AdminCreatePosterRequest {
  // 用户id
  int64 user_id = 1;
  // 场景: 1:DK,  2:中文 3:DK6 4:july
  int32 scene = 2;
}

message AdminGetPosterRequest {
  // 用户id
  int64 user_id = 1;
  // 场景: 1:DK 2:中文 3:DK6 4:july
  int32 scene = 2;
}

message AdminUploadPosterSnapshotRequest {
  // 用户id
  int64 user_id = 1;
  // 场景: 1:DK 2:中文 3:DK6 4:july
  int32 scene = 2;
  // 截图的 uri
  string snapshot_uri = 3;
  // 海报id
  int32 poster_id = 4;
}

message AdminPosterUploadListRequest {
  // 用户id
  int64 user_id = 1;
}

message AdminPosterUploadListResponse {
  // 海报截图补卡次数
  int64 redo_num = 1;
  // 可上传海报信息列表-当前周
  repeated AdminPosterRecord cur_poster_record = 2;
  // 可补卡海报信息列表-历史周
  repeated AdminPosterRecord pre_poster_record = 3;
}

message AdminPosterRecord {
  // 海报id
  int32 poster_id = 1;
  // 海报所属活动场景
  int32 scene = 2;
  // 海报创建时间
  int64 ct = 3;
  // 海报状态 0=未上传截图/海报已生成, 1=待审核, 2=审核通过, 3=审核驳回/审核不通过
  int32 status = 4;
  // 审核失败原因
  string fail_reason = 5;
  // 活动名称描述
  string act_name = 6;
}

message AdminPosterListRequest {
  // 场景:-99：新手任务（特例） 1:DK 2:中文 更多：https://sea.pri.ibanyu.com/rdc-admin/core/referral-list?limit=20&offset=0
  int32 scene = 1;
  // 状态：0： 海报已生成；1：截图已上传(即待审核)；2：审核通过；3：审核不通过
  repeated int32 statuses = 2;
  // 用户id
  int64 user_id = 3;
  // 创建起始时间
  int64 create_time_begin = 4;
  // 创建结束时间
  int64 create_time_end = 5;
  int64 offset = 6;
  int64 limit = 7;
}

message AdminPosterListResponse {
  repeated Poster items = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}

message PosterReviewRequest {
  // 海报id
  int32 id = 1;
  // 活动场景 (新手任务: -99  其他：转介绍活动场景)
  int32 scene = 2;
  // 是否审核通过
  bool pass = 3;
  // 不通过的原因(仅不通过时有效)
  string fail_reason = 4;
}

message UserDKAwardStatusRequest {
  // 1:dk 2:中文 3:DK6 4:july
  int32 scene = 1;
}

message UserDKAwardStatusResponse {
  // DK海报权益状态:  -1:生成海报(未创建), 0: 上传截图(已创建), 1: 审核中, 2: 已达成(审核通过，此时有权益发放记录), 3: 重新上传(审核不通过) 4: 已送完
  int32 poster_status = 1;
  // DK海报id
  int32 poster_id = 2;
  // DK体验课完课权益状态: 0: 去邀请, 1: 已达成, 2: 已送完
  int32 trial_status = 3;
  // DK正价课购买权益状态: 0: 去邀请, 1: 已达成, 2: 已送完
  int32 formal_status = 4;
  // 体验课任务完成次数
  int32 trial_task_finished_cnt = 5;
  // 正价课好友邀请进度 (邀请就算)
  int32 formal_task_finished_cnt = 6;
  // 海报创建时间
  int64 poster_ct = 7;
}

message AdminUploadStudyPlanImageRequest {
  // 学习规划需要的上传图片参数
  int64 user_id = 1;
  // 其他待办事项上传截图需要：待办事项id
  int32 todo_id = 2;
  // 注意这里使用图片 uri，而非完整的 url
  string image_uri = 3;
}

message SearchUserStudyPlanRequest {
  int64 user_id = 1;
  // 体验课班期(格式"20230102")
  string trial_course_period = 2;
  // 老师op_name。
  string teacher_op_name = 3;
  // 学习规划状态: -1=不筛选, 0=未申请, 1=已申请待规划, 2=已规划。
  // 此字段必传，不传时会被视为 0(未申请)。
  int32 study_plan_status = 4;
  int64 offset = 5;
  int64 limit = 6;
}

message SearchTodoRequest {
  int64 user_id = 1;
  // 体验课班期(格式"20230102")
  string trial_course_period = 2;
  // 老师op_name。
  string teacher_op_name = 3;
  // 完成状态：1：未完成；2：已完成
  int32 status = 4;
  // 事项类型：1：学习规划；2：转介绍
  int32 todo_type = 5;
  // 创建时间开始戳（单位：s）
  int64 begin_ts = 6;
  // 创建时间结束戳（单位：s）
  int64 end_ts = 7;
  int64 offset = 8;
  int64 limit = 9;
}

message SearchTodoResponse {
  repeated Todo todo_list = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}

message Todo {
  // todo id
  int32 id = 1;
  User user = 2;
  // 完成状态：1：未完成，2：已完成
  int32 status = 3;
  // todo 创建时间戳
  int32 apply_time = 4;
  // todo 完成时间戳
  int32 finish_time = 5;
  // todo类型：1：学习规划；2：转介绍
  int32 todo_type = 6;
  // todo描述：完成要求
  string todo_desc = 7;
  // todo备注：完成情况
  string todo_remark = 8;
  // 体验课班期(格式"20230102")
  string trial_course_period = 9;
  // 老师 op_name。
  string teacher_op_name = 10;

  // 复用字段。截图信息：todo_type=1 上传规划截图；todo_type=3 跟进截图
  string plan_image_url = 11;
}

message SearchUserStudyPlanResponse {
  repeated StudyPlan study_plans = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}

// 学习规划
message StudyPlan {
  User user = 1;
  // 学习规划状态: 0=未申请, 1=已申请待规划, 2=已规划
  int32 status = 2;
  // 申请时间戳(未申请则为 0)
  int32 apply_time = 3;
  // 规划截图 url (未申请/未上传截图则为 "")
  string plan_image_url = 4;
  // 规划截图上传时间戳 (未申请/未上传截图则为 0)
  int32 plan_image_upload_time = 5;
  // 体验课班期(格式"20230102")
  string trial_course_period = 6;
  // 老师 op_name。
  string teacher_op_name = 7;
}

message Cert {
  int32 id = 1;
  // 用户id
  int64 user_id = 2;
  // 宝贝姓名
  string name = 3;
  // 课程id
  int32 course_id = 4;
  // 课程名称
  string course_name = 5;
  // 证书编号
  int32 cert_number = 6;
  // 证书图片
  ImageResource cert_image = 7;
  // 创建时间戳
  int64 created_at = 8;
  // 更新时间戳
  int64 updated_at = 9;
}

message ValidateUserCertRequest {
  // 课程id
  int32 course_id = 1;
}

message ValidateUserCertResponse {
  // 课程id
  int32 course_id = 1;
  // 用户id
  int64 user_id = 2;
  // 是否已生成证书
  bool has_cert = 3;
  // 是否可生成证书(has_cert=false时有意义)
  bool cert_valid = 4;
}

message UserCertCreateRequest {
  // 课程id
  int32 course_id = 1;
  // 宝贝姓名
  string name = 2;
}

message UserCertUploadSnapshotRequest {
  // 证书id
  int32 cert_id = 1;
  // 证书图片uri
  string cert_uri = 2;
}

message UserCertGetByCourseRequest {
  // 课程id
  int32 course_id = 1;
}

message UserCertListRequest {
  int64 offset = 1;
  int64 limit = 2;
}

message UserCertListResponse {
  // 证书信息
  repeated Cert items = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}

message CourseCertListReq {
  int64 offset = 1;
  int64 limit = 2;
}

message CourseCertListRes {
  message CourseCert {
    // 课程id
    int32 course_id = 1;
    // 课程名称
    string course_name = 2;
    // 证书模版url
    string cert_template_url = 3;
    // 0: 未生成 1:已学完待生成 2:已生成
    int32 user_cert_status = 4;
    // 用户已生成的url
    string user_cert_image_url = 5;
    // 用户证书创建时间
    int64 user_cert_created_at = 6;
  }
  // 证书信息
  repeated CourseCert items = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}

message AdminWechatGroupLeader {
  // 用户id，创建更新群的时候，可不传
  int64 user_id = 1;
  // 企微id
  string external_user_id = 2;
  // 备注信息
  string remark = 3;
}

message WechatGroupCreateRequest {
  // 群id
  string chat_id = 1;
  // 组长信息
  repeated AdminWechatGroupLeader leaders = 2;
}

message WechatGroupUpdateRequest {
  // 群id
  string chat_id = 1;
  // 组长信息
  repeated AdminWechatGroupLeader leaders = 2;
}

message WechatGroupDeleteRequest {
  // 群id
  string chat_id = 1;
}

message AdminGetWechatGroupRequest {
  // 群id
  string chat_id = 1;
}

message AdminGetWechatGroupResponse {
  // 群id
  string chat_id = 1;
  // 群成员总数
  int32 member_count = 2;
  // 群主昵称
  string owner_nickname = 3;

  message WechatGroupMember {
    // 成员昵称
    string group_nickname = 1;
    // 企微id
    string external_user_id = 2;
  }
  repeated WechatGroupMember members = 4;
}

// 内部使用
message AdminWechatGroupQueryRequest {
  // 群id
  string chat_id = 1;
  // 组长uid
  int64 leader_uid = 2;
  int64 limit = 3;
  int64 offset = 4;
}

message AdminWechatGroupQueryResponse {
  message WechatGroup {
    // 群id
    string chat_id = 1;
    // 群名称
    string group_name = 2;
    // 最近编辑人
    string last_modify_opuser = 3;
    // 最近编辑时间戳
    int64 last_modify_ts = 4;
    // leaders信息
    repeated AdminWechatGroupLeader leaders = 5;
  }
  repeated WechatGroup wechat_groups = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}

message FuzzySearchWechatGroupRequest {
  // 模糊搜索的群名
  string group_name = 1;
}

message FuzzySearchWechatGroupResponse {
  message WechatGroup {
    // 群id
    string chat_id = 1;
    // 群名
    string group_name = 2;
  }
  repeated WechatGroup groups = 1;
}

// 外部使用：获取群列表
message QueryWechatGroupRequest {
  int64 limit = 1;
  int64 offset = 2;
}

// 外部使用：获取单个群
message GetWechatGroupDetailRequest {
  // 群id
  string chat_id = 1;
}

message WechatGroupMemberStatistics {
  // 群昵称
  string group_nickname = 1;
  // 是否绑定了uid
  bool has_binded_uid = 2;
  // 上周学习天数
  int32 study_days_last_week = 3;
  // 上周学习时长（s），这里返回总的，按分还是按秒展示前端决定
  int32 study_duration_last_week = 4;
  // 上周是否发过言
  bool has_speaked_last_week = 5;
  // 最近学习的课程id
  int32 latest_course_id = 6;
  // 最近学习的课程名
  string latest_course_name = 7;
  // 最近学习的课程的完成进度
  int32 lastest_course_finish_rate = 8;
  // 上月阅读本数
  int32 last_month_read_count = 9;
  // 本月阅读本数
  int32 this_month_read_count = 10;
  // 上月累计阅读本数
  int32 total_last_month_read_cnt = 11;
  // 本月累计阅读本数
  int32 total_this_month_read_cnt = 12;
  // 本周累计阅读本数
  int32 total_this_week_read_cnt = 13;
  // 本周阅读营
  int32 this_week_read_num = 14;
  // 上月听力熊（去重）
  int32 last_month_tinglixiong_read_num = 15;
  // 本月听力熊（去重）
  int32 this_month_tinglixiong_read_num = 16;
  // 本周听力熊（去重）
  int32 this_week_tinglixiong_read_num = 17;
  // uid
  int64 uid =18;
}

message WechatGroupStatistics {
  // 群人数
  int32 member_count = 1;
  // 近7天活跃
  int32 active_last_week_count = 2;
  // 近7天上课
  int32 study_last_week_count = 3;
  // 上月阅读本数
  int32 last_month_read_count = 4;
  // 本月阅读本数
  int32 this_month_read_count = 5;
  // 上月累计阅读本数
  int32 total_last_month_read_cnt = 6;
  // 本月累计阅读本数
  int32 total_this_month_read_cnt = 7;
  // 本周累计阅读本数
  int32 total_this_week_read_cnt = 8;
  // 上月听力熊阅读本数
  int32 last_month_tinglixiong_read_count = 9;
  // 本月听力熊阅读本数
  int32 this_month_tinglixiong_read_count = 10;
}

message WechatGroup {
  // 群id
  string chat_id = 1;
  // 群名
  string group_name = 2;
  // 群的统计信息
  WechatGroupStatistics group_stats = 3;
  // 组长昵称
  repeated string leader_nicknames = 6;
  // 更新时间
  int64 update_ts = 7;
}

message WechatGroupDetail {
  WechatGroup group = 1;
  // 学员的学习数据
  repeated WechatGroupMemberStatistics member_stats = 8;
}

message QueryWechatGroupResponse {
  repeated WechatGroup wechat_groups = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}

message AddCoursePeriodConfRequest {
  // 区间起始时间戳
  int64 begin_ts = 1;
  // 区间结束时间戳
  int64 end_ts = 2;
  // 班期时间戳
  int64 course_period = 3;
}

message UpdateCoursePeriodConfRequest {
  int32 id = 1;
  // 区间起始时间戳
  int64 begin_ts = 2;
  // 区间结束时间戳
  int64 end_ts = 3;
  // 班期时间戳
  int64 course_period = 4;
  // false: 不配置，true：废弃
  bool is_delete = 5;
}

message ListCoursePeriodConfRequest {
  int64 limit = 1;
  int64 offset = 2;
}

message ListCoursePeriodConfResponse {
  message CoursePeriodConf {
    int32 id = 1;
    // 区间起始时间戳
    int64 begin_ts = 2;
    // 区间结束时间戳
    int64 end_ts = 3;
    // 班期时间戳
    int64 course_period = 4;
    // 状态：1：待生效，2：生效中，3：已完成，4：已废弃。只有待生效和生效中的班期配置可以被修改。
    int32 status = 5;
    // 上个修改用户
    string last_modify_opuser = 6;
    // 上次修改时间戳(s)
    int64 last_modify_ts = 7;
  }
  repeated CoursePeriodConf confs = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}

message UtmSource {
  int32 id = 1;
  // 渠道名称
  string name = 2;
  // 渠道备注
  string description = 3;
  // 一级渠道id
  int32 l1_id = 4;
  // 一级渠道名称
  string l1_name = 5;
  // 二级渠道id
  int32 l2_id = 6;
  // 二级渠道名称
  string l2_name = 7;
  // 三级渠道id
  int32 l3_id = 8;
  // 三级渠道名称
  string l3_name = 9;
  // 创建人
  string op_user = 10;
  // 创建时间戳
  int64 created_at = 11;
  // 更新时间戳
  int64 updated_at = 12;
  // 渠道等级 1=S 2=A 3=B 4=C
  int32 utm_level = 13;
}

message CreateUtmSourceRequest {
  // 渠道id(仅对已有固定id的渠道支持输入id创建)
  int32 id = 1;
  // 渠道名称
  string name = 2;
  // 渠道备注
  string description = 3;
  // 一级渠道id
  int32 l1_id = 4;
  // 二级渠道id
  int32 l2_id = 5;
  // 三级渠道名称
  string l3_name = 6;
  // 渠道等级 1=S，2=A，3=B，4=C
  int64 utm_level = 7;
}

message UpdateUtmSourceRequest {
  int32 id = 1;
  // 渠道名称
  string name = 2;
  // 渠道备注
  string description = 3;
  // 三级渠道名称
  string l3_name = 4;
}

message ListUtmSourceRequest {
  // 一级渠道id
  int32 l1_id = 1;
  // 二级渠道id
  int32 l2_id = 2;
  // 渠道id
  int32 utm_source_id = 3;
  // 渠道名称
  string name = 4;
  // 创建人
  string op_user = 5;
  int64 limit = 6;
  int64 offset = 7;
  // 三级渠道id
  int32 l3_id = 8;
}

message ListUtmSourceResponse {
  repeated UtmSource utm_sources = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}

message GetUtmSourceRequest {
  // 渠道id
  int32 utm_source_id = 1;
}

message BaseSource {
  int32 id = 1;
  // 基础渠道名称
  string name = 2;
  // 基础渠道级别：1/2/3
  int32 level = 3;
  // 上级渠道id：非1级基础渠道有效(level!=1)
  int32 parent_id = 4;
  // 创建人
  string op_user = 5;
  // 创建时间戳
  int64 created_at = 6;
  // 更新时间戳
  int64 updated_at = 7;
}

message CreateBaseSourcesRequest {
  // 基础渠道级别：1/2/3
  int32 level = 1;
  // 上级渠道id：非1级基础渠道有效(level!=1)
  int32 parent_id = 2;
  // 基础渠道名称
  string name = 3;
}

message ListBaseSourcesRequest {
  // 基础渠道级别：1/2/3
  int32 level = 1;
  // 上级渠道id：非1级基础渠道有效(level!=1)
  int32 parent_id = 2;
  int64 limit = 3;
  int64 offset = 4;
}

message ListBaseSourcesResponse {
  repeated BaseSource base_sources = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}

message WPMAsrRequest {
  int32 lecture_id = 1;
  // 音频 url。建议上传到 busstype=readcamp_recording，方便管理。
  // 目前约定音频格式为 wav, 采样率为 16K。
  string audio_url = 2;
}

message WPMAsrResponse {
  // 文字结果。
  string text = 1;
}

message CallUserRequest {
  // 用户id
  int64 user_id = 1;
  // 线路选择  1、2、3 代表 线路1,2,3
  int32 call_show_type = 2;
}

message AddWebcallRemarkRequest {
  int64 user_id = 1;
  // 备注信息
  string remark = 2;
}

message GetModuleInfoRequest {
  // 需要查询的模块名：
  // 格式:ket_reading_part1, ket_writing_part2, ket_speaking_part1, ket_listening_part2
  repeated string module_names = 1;
  int32 course_id = 2;
  int32 lecture_id = 3;
}

message GetModuleInfoResponse {
  message ModuleInfo {
    // question 数量
    int32 question_cnt = 1;
    // 已完成 question 数量
    int32 finished_question_cnt = 2;
  }

  // module_name -> module_info
  map<string, ModuleInfo> module_info_map = 1;
}


message ExamPaperCreateReq {
  // PET口语练习：pet_speaking_part1
  string scene = 1;
}

message ExamPaperCreateRes {
  int64 exam_paper_id = 1;
  // 考试记录id （上报使用）
  int64 user_exam_id = 2;
}

message UserExamPaperListReq {
  // PET口语练习：pet_speaking_part1
  string scene = 1;
}

message UserExamPaperListRes {
  message UserExamPaper {
    // 考试记录id
    int64 user_exam_id = 1;
    int64 exam_paper_id = 2;
    // 试卷创建时间
    int64 ct = 3;
    // 完成时间
    int64 finished_ts = 4;
  }
  repeated UserExamPaper user_exam_papers = 1;
}

message ExamPaperQuestionsGetReq {
  // 考卷id
  int64 exam_paper_id = 1;
}

message ExamPaperQuestionsGetRes {
  // 题目列表
  repeated Question questions = 1;
  // 题目材料id映射到材料
  map<int32, Material> materials = 2;
}

message GetQuestionsRequest {
  // lecture_id 和 course_id 二选一，优先使用 lecture_id
  int32 course_id = 1;
  int32 lecture_id = 2;
  // 模块，1：课节练一练，2：课节真题，3：课程真题强化
  int32 module = 3;
  // 是否重新开始做题，默认false：false：继续上次，true：重新开始。
  bool is_restart = 4;
}

message GetQuestionsResponse {
  // 题目列表
  repeated Question questions = 1;
  // 题目材料id映射到材料
  map<int32, Material> materials = 2;
  // 记忆实体id映射到记忆实体
  map<int32, MemoryTarget> memory_targets = 3;

}

message GetQuestionAnswerListRequest {
  // 题目id列表
  repeated int32 question_ids = 1;
  // 考卷记录id
  int64 user_exam_id = 2;
}

message GetQuestionAnswerListResponse {
  message UserQuestion {
    // 答题记录id
    int32 id = 1;
    // 题目ID
    int32 question_id = 2;
    // 题目类型
    int32 type = 3;
    // 创意写作答题内容
    message CreativeWriteAnswer {
      // 分数 最大10分 如:6.4
      float score = 1;
      // 打分解析
      string analysis = 2;
      // 写作建议
      string advice = 3;
      // 原图
      ImageResource image = 4;
      // 文本
      string text = 5;
    }
    message SpokenPracticeAnswer {
      // user ｜ assistant
      string role = 1;
      // 音频文本
      string text = 2;
      // 音频url、时长秒
      AudioResource audio = 3;
    }
    // @inject_tag: json:"creative_write_answer,omitempty"
    CreativeWriteAnswer creative_write_answer = 4;
    // @inject_tag: json:"spoken_practice_answers,omitempty"
    repeated SpokenPracticeAnswer spoken_practice_answers = 5;
    // 答题时间
    int32 ct = 6;
  }
  repeated UserQuestion items = 1;
}

message Question {
  // 101: 选择题；102：阅读理解题；103：完型填空题；104：连词成句；105：连句成段 106：PET阅读理解
  // 201: 填空题；202：阅读填空题
  // 301: 听力选择题; 302: 听力理解题; 303: 听力填空题；304：听力拼写题
  // 401: 记忆类选择题; 402: 记忆类拼写题
  // 501: KET写作; 502: 创意写作题
  // 601: 口语表达; 602: 口语练习
  int32 type = 1;
  // 是否已经完成
  bool is_finished = 2;
  // @inject_tag: json:"choice,omitempty"
  ChoiceQuestion choice = 101;
  // @inject_tag: json:"reading_comprehension_choice,omitempty"
  ReadingComprehensionChoiceQuestion reading_comprehension_choice = 102;
  // @inject_tag: json:"cloze,omitempty"
  ClozeQuestion cloze = 103;
  // @inject_tag: json:"conjunctions_into_sentence,omitempty"
  ConjunctionsIntoSentenceQuestion conjunctions_into_sentence = 104;
  // @inject_tag: json:"sentences_into_paragraph,omitempty"
  SentencesIntoParagraphQuestion sentences_into_paragraph = 105;

  // @inject_tag: json:"fill_in_blank,omitempty"
  FillInTheBlankQuestion fill_in_blank = 201;
  // @inject_tag: json:"reading_fill_in_blank,omitempty"
  ReadingFillInBlackQuestion reading_fill_in_blank = 202;

  // @inject_tag: json:"listening_choice,omitempty"
  ListeningChoiceQuestion listening_choice = 301;
  // @inject_tag: json:"listening_comprehension_choice,omitempty"
  ListeningComprehensionChoiceQuestion listening_comprehension_choice = 302;
  // @inject_tag: json:"listening_fill_in_blank,omitempty"
  ListeningFillInBlackQuestion listening_fill_in_blank = 303;
  // @inject_tag: json:"listening_spell,omitempty"
  ListeningSpellQuestion listening_spell = 304;

  // @inject_tag: json:"memory_choice,omitempty"
  MemoryChoiceQuestion memory_choice = 401;
  // @inject_tag: json:"memory_spell_choice,omitempty"
  MemorySpellChoiceQuestion memory_spell_choice = 402;

  // @inject_tag: json:"write_question,omitempty"
  WriteQuestion write_question = 501;
  // @inject_tag: json:"creative_write_question,omitempty"
  CreativeWriteQuestion creative_write_question = 502;
  // @inject_tag: json:"speaking_express_question,omitempty"
  SpeakingExpressQuestion speaking_express_question = 601;
  // @inject_tag: json:"spoken_practice_question,omitempty"
  SpokenPracticeQuestion spoken_practice_question = 602;
}

message Material {
  // 101: 选择题；102：阅读理解题；103：完型填空题；
  // 201: 填空题；202：阅读填空题
  // 301: 听力选择题; 302: 听力理解题; 303: 听力填空题；304：听力拼写题
  // 501: 写作题; 502: 创意写作题
  // 601: 口语表达
  int32 question_type = 1;
  // @inject_tag: json:"reading_comprehension_choice,omitempty"
  ReadingComprehensionChoiceQuestionMaterial reading_comprehension_choice = 102;
  // @inject_tag: json:"cloze,omitempty"
  ClozeQuestionMaterial cloze = 103;
  // @inject_tag: json:"reading_fill_in_blank,omitempty"
  ReadingFillInBlackQuestionMaterial reading_fill_in_blank = 202;
  // @inject_tag: json:"listening_choice,omitempty"
  ListeningChoiceQuestionMaterial listening_choice = 301;
  // @inject_tag: json:"listening_comprehension_choice,omitempty"
  ListeningComprehensionChoiceQuestionMaterial listening_comprehension_choice = 302;
  // @inject_tag: json:"listening_fill_in_blank,omitempty"
  ListeningFillInBlackQuestionMaterial listening_fill_in_blank = 303;
  // @inject_tag: json:"listening_spell,omitempty"
  ListeningSpellQuestionMaterial listening_spell = 304;
  // @inject_tag: json:"write_question,omitempty"
  WriteQuestionMaterial write_question = 501;
  // @inject_tag: json:"creative_write_question,omitempty"
  CreativeWriteQuestionMaterial creative_write_question = 502;
  // @inject_tag: json:"speaking_express,omitempty"
  SpeakingExpressMaterial speaking_express = 601;
  // @inject_tag: json:"spoken_practice,omitempty"
  SpokenPracticeQuestionMaterial spoken_practice = 602;
}

// 填空题
message FillInTheBlankQuestion {
  // 问题id
  int32 id = 1;
  FillInTheBlank fill_in_the_blank = 2;
}

message FillInTheBlank {
  // 可选的答案，命中任何一个都可以
  repeated string answers = 1;
  // 答案分析
  AnswerAnalysis analysis = 2;
}

// 选择题
message ChoiceQuestion {
  // 问题 id
  int32 id = 1;
  Choice choice = 2;
}

message Choice {
  // 题目的图片信息，可能为空
  repeated ImageResource images = 1;
  // 题目的描述
  string title = 2;
  // 题目选项
  repeated ChoiceOption options = 3;
  // 选择题答案索引，0开始计数
  repeated int32 answer_idx = 4;
  // 是否为多选题
  bool has_multi_choice = 5;
  // 答案分析
  AnswerAnalysis analysis = 6;
  // 干扰项
  repeated ChoiceOption unrelated_options = 7;

}

message ChoiceOption {
  // 类型：1，文本选项，2，图片选项
  int32 type = 1;
  // 文本选项内容，type=1时有效；
  string text = 2;
  // 图片选项内容，type=2时有效
  ImageResource image = 3;
}

message AnswerAnalysis {
  // 分析内容
  string text = 1;
  // 涉及到的图片
  repeated ImageResource images = 2;
}

// 阅读理解题
message ReadingComprehensionChoiceQuestion {
  repeated ReadingComprehensionChoiceSubQuestion choices = 1;
  int32 material_id = 2;
}

message ReadingComprehensionChoiceSubQuestion {
  // 选项id
  int32 id = 1;
  Choice choice = 2;
  // 材料id
  int32 material_id = 3;
  // 内部序号，1开始
  int32 number = 4;
}

message ReadingComprehensionChoiceQuestionMaterial {
  // 材料内容 html 格式
  string HTML = 1;
  // 材料内容普通文本格式
  string content = 2;
}

// 完型填空题
message ClozeQuestion {
  repeated ClozeSubQuestion clozes = 1;
  // 材料id
  int32 material_id = 2;
}

message ClozeSubQuestion {
  // question_id
  int32 id = 1;
  Choice choice = 2;
  // 材料id
  int32 material_id = 3;
  // 内部序号，1开始
  int32 number = 4;
}

message ClozeQuestionMaterial {
  // 材料内容 html 格式
  string HTML = 1;
  // 材料内容普通文本格式
  string content = 2;
}

// 连词成句
message ConjunctionsIntoSentenceQuestion {
  // 问题 id
  int32 id = 1;
  Choice choice = 2;
  // 标点符号。
  // 举例，如下语句：
  // "hello world", he said.
  // 对于连词成句来说，有如下选项需要用户选择：
  // hello world he said
  // 用户看到有四个横线可以选择。而标点符号位于四个横线的两侧位置：
  // (1) _ (2) _ (3) _ (4) _ (5)
  // 如上 5 个位置是标点符号可能存在的位置。
  // 此时字段值为["\"", "", "\",", "", "."]
  repeated string punctuation_marks = 3;
}

// 连句成段
message SentencesIntoParagraphQuestion {
  // 问题 id
  int32 id = 1;
  Choice choice = 2;
}

// 阅读填空题
message ReadingFillInBlackQuestion {
  repeated ReadingFillInBlackSubQuestion fill_in_blanks = 1;
  int32 material_id = 2;
}

// 写作题
message WriteQuestion {
  // 问题id
  int32 id = 1;
  // 答案分析
  AnswerAnalysis analysis = 2;
  // 素材id
  int32 material_id = 3;
}

// 口语表达题
message SpeakingExpressQuestion {
  // 问题id
  int32 id = 1;
  // 答案分析
  AnswerAnalysis analysis = 2;
  // 素材id
  int32 material_id = 3;
  // 题目音频
  AudioResource audio = 4;
  // 题目标题
  string title = 5;
  // 题目提示
  string hint = 6;
  // 关键词
  string keywords = 7;
  // 正确答案
  string answer_text = 8;
  // 内部序号，1开始
  int32 number = 9;
}


// 口语练习题目
message SpokenPracticeQuestion {
  // 问题id
  int32 id = 1;
  // 素材id
  int32 material_id = 2;
  // 题目音频
  AudioResource audio = 3;
  // 音频英文
  string audio_text_en = 4;
  // 内部序号，1开始
  int32 number = 5;
}

message ReadingFillInBlackSubQuestion {
  int32 id = 1;
  FillInTheBlank fill_in_the_blank = 2;
  // 材料id
  int32 material_id = 3;
  // 内部序号，1开始
  int32 number = 4;
}

message ReadingFillInBlackQuestionMaterial {
  // 材料内容 html 格式
  string HTML = 1;
  // 材料内容普通文本格式
  string content = 2;
}

// 听力选择题
message ListeningChoiceQuestion {
  ListeningChoiceSubQuestion choices = 1;
  int32 material_id = 3;
}

message ListeningChoiceSubQuestion {
  int32 id = 1;
  Choice choice = 2;
  int32 material_id = 3;
}

message ListeningChoiceQuestionMaterial {
  AudioResource audio = 1;
}

// 听力阅读理解题
message ListeningComprehensionChoiceQuestion {
  repeated ListeningComprehensionChoiceSubQuestion choices = 1;
  int32 material_id = 2;
}

message ListeningComprehensionChoiceSubQuestion {
  int32 id = 1;
  Choice choice = 2;
  // 材料id
  int32 material_id = 3;
  // 内部序号，1开始
  int32 number = 4;
}

message ListeningComprehensionChoiceQuestionMaterial {
  // 材料内容 html 格式
  string HTML = 1;
  // 材料内容普通文本格式
  string content = 2;
  // 听力文件
  AudioResource audio = 3;
}

// 听力填空题
message ListeningFillInBlackQuestion {
  repeated ListeningFillInBlackSubQuestion fill_in_blanks = 1;
  int32 material_id = 3;
}

message ListeningFillInBlackSubQuestion {
  int32 id = 1;
  FillInTheBlank fill_in_blank = 2;
  // 材料id
  int32 material_id = 3;
  // 内部序号，1开始
  int32 number = 4;
}

message ListeningFillInBlackQuestionMaterial {
  // 材料内容 html 格式
  string HTML = 1;
  // 材料内容普通文本格式
  string content = 2;
  // 听力文件
  AudioResource audio = 3;
}

message WriteQuestionMaterial {
  // 材料内容 html 格式
  string HTML = 1;
  // 材料内容普通文本格式
  string content = 2;
}

message SpeakingExpressMaterial {
  // 题干内容
  string text = 1;
  // 图片
  ImageResource image = 2;
  // 听力文件
  AudioResource audio = 3;
}

message SpokenPracticeQuestionMaterial {
  // 角色
  string role = 1;
}

// 听力单词拼写题
message ListeningSpellQuestion {
  // 问题 id
  int32 id = 1;
  Choice choice = 2;
  int32 material_id = 3;
}

message ListeningSpellQuestionMaterial {
  AudioResource audio = 1;
}

// 记忆类选择题
message MemoryChoiceQuestion {
  int32 id = 1;
  Choice choice = 2;
  // 记忆实体的id
  int32 memory_id = 3;
}

// 记忆类拼写选择题-支持多选-答案有序
message MemorySpellChoiceQuestion {
  int32 id = 1;
  Choice choice = 2;
  // 记忆实体的id
  int32 memory_id = 3;
}

message MemoryTarget {
  int32 id = 1;
  // 记忆实体类型，1：单词，2：短语
  int32 target_type = 2;
  // 单词：target_type 为 1 时有效
  Word word = 3;
  // 短语：target_type 为 2 时有效
  Word phase = 4;
}

message Word {
  // 单词或者短语
  string name = 1;
  // 中文解释
  repeated string chinese = 2;
  // 英音标
  PhoneticSymbol English_phonetic_symbol = 3;
  // 美音标
  PhoneticSymbol American_phonetic_symbol = 4;
  // 例句
  repeated ExampleSentence example_sentences = 5;
  // 难度
  int32 difficulty = 6;
}

message PhoneticSymbol {
  // 音标
  string pronunciation = 1;
  // 读音
  AudioResource audio = 2;
}

message ExampleSentence {
  // 例句
  string sentence = 1;
  // 图片。将单词的图片放到例句上，这样能更好地描述单词
  repeated ImageResource images = 2;
  // 读音
  AudioResource audio = 3;
  // 例句翻译
  string sentence_chinese = 4;
}

message UpsertKnownledgePointRequest {
  // 操作类型：insert | update
  string op = 1;
  // update时，可以通过 id 或者 <type, name> 更新。
  int32 id = 2;
  // 知识点类型，从接口中获取选项
  string type = 3;
  // 知识点名字
  string name = 4;
  // 知识点描述或者解析
  string description = 5;
  // 知识点的tags。
  repeated string tags = 6;
  // 难度：1-100
  int32 difficulty = 7;
}

message ListKnownledgePointTypeRequest {}

message ListKnownledgePointTypeResponse {
  message KnownleadgeType {
    // 类型
    string type = 1;
    // 中文描述，供用户选择
    string desc = 2;
  }
  repeated KnownleadgeType types = 1;
}


// 创意写作题
message CreativeWriteQuestion {
  // 问题id
  int32 id = 1;
  // 素材id
  int32 material_id = 2;
  // 题目标题
  string title = 3;
  // 内部序号，1开始
  int32 number = 4;
}

// 创意写作题目素材
message CreativeWriteQuestionMaterial {
  // 题干文本
  string text = 1;
  // 题干图片 url
  ImageResource image = 2;
}

// 管理用Question。和用户用Question区别在于，完型填空/阅读理解之类的题目，用户看来是一个Question，在后端看来是多个题目。
message AdminQuestion {
  // 用于删除question
  int32 question_id = 1;
  // 101: 选择题；102：阅读理解题；103：完型填空题；104 连词成句；105 连句成段；
  // 201: 填空题；202：阅读填空题
  // 301: 听力选择题; 302: 听力理解题; 303: 听力填空题；304：听力拼写题
  // 401: 记忆类选择题; 402: 记忆类拼写题
  // 501: 写作题;
  int32 type = 2;
  // 题目标签
  repeated string tags = 3;
  // type=101
  ChoiceQuestion choice = 101;
  // type = 102
  ReadingComprehensionChoiceSubQuestion reading_comprehension_choice = 102;
  // type = 103
  ClozeSubQuestion cloze = 103;
  // type = 104 连词成句
  ConjunctionsIntoSentenceQuestion conjunctions_into_sentence = 104;
  // type = 105 连句成段；
  SentencesIntoParagraphQuestion sentences_into_paragraph = 105;

  // type=201
  FillInTheBlankQuestion fill_in_blank = 201;
  // type=202
  ReadingFillInBlackSubQuestion reading_fill_in_blank = 202;

  // type=301
  ListeningChoiceSubQuestion listening_choice = 301;
  // type=302
  ListeningComprehensionChoiceSubQuestion listening_comprehension_choice = 302;
  // type=303
  ListeningFillInBlackSubQuestion listening_fill_in_blank = 303;
  // type=304
  ListeningSpellQuestion listening_spell = 304;

  // type=401
  MemoryChoiceQuestion memory_choice = 401;
  // type=402
  MemorySpellChoiceQuestion memory_spell_choice = 402;
  // type=501
  WriteQuestion write_question = 501;
  // type=502
  CreativeWriteQuestion creative_write_question = 502;
  // type=601
  SpeakingExpressQuestion speaking_express_question = 601;
  // type=602
  SpokenPracticeQuestion spoken_practice_question = 602;
}

message ManagerMaterialRequest {
  // 操作类型: insert | update | delete
  string op = 1;
  // material_id。更新和删除基于id
  int32 id = 2;
  // 材料相关
  Material material = 6;
}

message ManagerMaterialResponse {
  int32 id = 1;
}

message ManageQuestionRequest {
  // 操作类型: insert | update | delete
  string op = 1;

  repeated int32 knowledge_point_ids = 2;

  // 问题详细
  AdminQuestion question = 5;
}

message MemoryTargetRecallHistory {
  // 复习时间间隔
  int32 delta_t = 1;
  // 复习结果(0:复习忘记 1:复习记得)
  int32 result = 2;
}

message UserMemoryTarget {
  int32 id = 1;
  // 用户id
  int64 user_id = 2;
  // 记忆材料(单词/短语)id
  int32 memory_target_id = 3;
  // 半衰周期
  double halflife = 4;
  // 难度
  int32 difficulty = 5;
  // 规划复习时间间隔
  int32 delta_t = 6;
  // 最后学习/复习时间
  int64 latest_study_day = 7;
  // 规划下次复习时间
  int64 next_study_day = 8;
  // 学习/复习历史列表，元素格式{delta_t:复习时间间隔,result:学习/复习结果(0:不会/忘记 1:模糊 2:会/记得)}
  repeated MemoryTargetRecallHistory memory_target_recall_history = 9;
  // 创建时间
  int64 created_at = 10;
  // 更新时间
  int64 updated_at = 11;
}

message StudyTarget {
  // 学习材料：单词/短语
  MemoryTarget memory_target = 1;
  // 用户学习数据
  UserMemoryTarget user_memory_target = 2;
}

message GetTodayMemoryTargetsByUserRequest {
  // lecture_id 和 course_id 二选一
  int32 course_id = 1;
  int32 lecture_id = 2;
}

message GetTodayMemoryTargetsByUserResponse {
  // 今日已复习
  repeated StudyTarget today_recalled_study_targets = 1;
  // 今日已新学
  repeated StudyTarget today_new_study_targets = 2;
  // 今日剩余复习
  repeated StudyTarget recall_study_targets = 3;
  // 今日剩余新词
  repeated StudyTarget new_targets = 4;
}

message UserMemoryTargetReportRequest {
  // 学习材料(单词/短语)id
  int32 memory_target_id = 1;
  // 学习/复习结果(0:不会/忘记 1:模糊 2:会/记得)
  int32 result = 2;
}

message UserMemoryTargetReportResponse {}


message ReportQuestionResultRequest {
  int32 course_id = 1;
  // courese_id和lecture_id必传一个。优先使用lecture_id
  int32 lecture_id = 2;
  // 模块，用于定位题目来源，1：课节练一练，2：课节真题，3：课程真题强化
  int32 module = 3;
  message SubQuestionAnswer {
    int32 question_id = 1;
    // 是否正确
    bool is_right = 2;
    // 选择题答案
    repeated int32 choice_answers = 3;
    // 填空题、写作题等答案
    string text_answer = 4;
    // 口语表达
    SpeakingExpressAnswer speaking_answer = 5;
    // 写作答案 (和text_answer使用,ocr识图后的提交内容)
    ImageCrtResource image_answer = 6;
    // 口语会话练习 (题目类型: 602)
    repeated SpokenAnswer spoken_answers = 7;
    // 口语会话
    message SpokenAnswer {
      // user ｜ assistant
      string role = 1;
      // 音频文本
      string text = 2;
      // 音频uri、时长秒
      AudioCrtResource audio = 3;
    }
    message SpeakingExpressAnswer {
      // 全部单词 (用户语音里的内容)
      repeated string all_words = 1;
      // 音频
      AudioCrtResource audio = 2;
    }
  }
  // 题目答案。普通选择题一条一上报。完型填空、阅读理解等批量上报
  repeated SubQuestionAnswer answers = 4;
  // 花费多久答题（单位ms）
  int32 duration_ms = 5;
  // 用户考试id
  int64 user_exam_id = 6;
}

message ReportQuestionResultResponse {
  message AnswerResult {
    // 问题id
    int32 question_id = 1;
    // 分数: 口语表达
    int32 score = 2;
    // 完整性分数
    int32 integrity_score = 3;
    // 准确性分数
    int32 accuracy_score = 4;
    // 得分分析
    string score_analysis = 5;
    // 修改建议
    string advice  = 6;
  }
  repeated AnswerResult items = 1;
}

message MemoryTargetCrtResource {
  int32 id = 1;
  // 记忆实体类型，1：单词，2：短语
  int32 target_type = 2;
  // 单词：target_type 为 1 时有效
  WordCrtResource word = 3;
  // 短语：target_type 为 2 时有效
  WordCrtResource phase = 4;
}

message WordCrtResource {
  // 单词或者短语
  string name = 1;
  // 中文解释
  repeated string chinese = 2;
  // 英音标
  PhoneticSymbolCrtResource English_phonetic_symbol = 3;
  // 美音标
  PhoneticSymbolCrtResource American_phonetic_symbol = 4;
  // 例句
  repeated ExampleSentenceCrtResource example_sentences = 5;
  // 难度
  int32 difficulty = 6;
}

message PhoneticSymbolCrtResource {
  // 音标
  string pronunciation = 1;
  // 读音
  AudioCrtResource audio = 2;
}

message ExampleSentenceCrtResource {
  // 例句
  string sentence = 1;
  // 图片。将单词的图片放到例句上，这样能更好地描述单词
  repeated ImageCrtResource images = 2;
  // 读音
  AudioCrtResource audio = 3;
  // 例句翻译
  string sentence_chinese = 4;
}

message AddOrDeleteKnowledgePointTagRequest {
  int32 knowledge_point_id = 2;
  repeated string tags = 5;
}

message ManagerMemoryTargetRequest {
  // insert | update | delete
  string op = 1;
  MemoryTargetCrtResource memory_target = 2;
  repeated string tags = 3;
}

message ListMemoryTargetsRequest {
  // 可选，类型
  int32 target_type = 1;
  // 可选，名字
  string target_name = 2;
  // 可选，模糊搜索名字
  string target_name_key = 3;
  int64 offset = 4;
  int64 limit = 5;
}

message ListMemoryTargetsResponse {
  repeated MemoryTarget memory_targets = 1;
  bool more = 2;
  int64 total = 3;
  int64 offset = 4;
}

message CreateOrderPreCheckRequest {
  // 套餐 id
  string package_id = 1;
}

message CreateOrderPreCheckResponse {
  // 检查结果: 0=通过, 1=拒绝
  int32 result = 1;
  // 拒绝原因。仅当 result=1 时有效
  string reason = 2;
}

message ClockInSceneConfig {

}
message ClockInApplication {
  int32 id = 1;
  // uid
  int64 user_id = 2;
  // 打卡场景: 1001: 30天打卡
  int32 scene = 3;
  // 打卡起始时间
  int64 start_day = 4;
  // 打卡结束时间
  int64 end_day = 5;
  // 报名目标：30/60/90
  int32 application_target = 6;
  // 订单id (区分是否实物奖牌)
  string sale_order_id = 7;
  // 商城订单id
  string shopmall_order_id = 8;
  // 状态（0:已退款 1:进行中 2:已完成）
  int32 status = 9;
  // 创建时间
  int64 created_at = 10;
  // 更新时间
  int64 updated_at = 11;
  // 课程列表 （报名指定课程）
  repeated int32 course_ids = 12;
  // 完成时间
  int64 finish_day = 13;
  // 是否已设置优先进行
  bool priority = 14;
}

message ClockInApplicationListRequest {

}

message ClockInApplicationListResponse {
  // 活动列表
  repeated ClockInApplication activity = 1;
  // 活动配置
  repeated SceneConfig configs = 2;
  // 完成信息 key:活动id value:课节数
  map<int32, int32> progress = 3;
}

message UpdateClockInApplicationReq {
  // 活动id
  int32 id = 1;
  // 是否优先 1:是 2:否
  int32 priority =  2;
}


message ClockInApplicationCreateRequest {
  // 打卡场景: 1001: 30天打卡
  int32 scene = 1;
  // 报名目标：30/60/90
  int32 application_target = 2;
  // 订单id
  string sale_order_id = 3;
  // 指定课程信息  [2,3]
  repeated int32 course_ids = 4;
}

message ClockInApplicationCancelRequest {
  // 打卡报名id
  int32 application_id= 1;
}

message ClockInApplicationUpgradeRequest {
  int32 application_id= 1;
  // 报名目标：60/90。强调比之前的大，否则会报错。
  // http 接口不支持由虚拟勋章升级为实物勋章。
  int32 application_target = 2;
  // 打卡：1001，用于校验活动时间
  int32 scene = 3;
}

message PrecheckInSceneRequest {
  // 打卡场景: 1001: 30天打卡
  int32 scene = 1;
  // 课程ids
  repeated int32 course_ids = 2;
}

message PrecheckInSceneResponse {
  // 能否参与
  bool can_participate = 1;
  // 不能参与的理由，能参与则为空
  string reason = 2;
}

message GiveReplacementCardRequest {
  // 打卡场景: 1001: 30天打卡
  int32 scene = 1;
}

message UseReplacementCardRequest {
  // 打卡场景: 1001: 30天打卡
  int32 scene = 1;
  // 补签哪一天，格式：2023-07-25
  string day = 2;
}

message GetClockinDetailRequest {
  // 打卡场景: 1001: 30天打卡
  int32 scene = 1;
}

message GetClockinDetailResponse {
  message ClockinDayInfo {
    // 打卡日期，格式：2023-07-12
    string day = 1;
    // 是否为补签
    bool is_use_replacement_card = 2;
  }
  // 为空代表用户没有报名活动
  ClockInApplication app = 1;
  // 已打卡的 day 信息
  repeated ClockinDayInfo days = 2;
  // 已完成的新书本数
  int32 books = 3;
  // 补签卡数量
  int32 replacement_card_cnt = 4;
  // 课节信息
  message ClockinLecture {
    message BaseLectureInfo {
      // 课节id
      int32 id = 1;
      // 课节序号
      int32 lecture_number = 2;
      // 课程id
      int32 course_id = 3;
      // 课节名字
      string name = 4;
    }
    // 精简课节信息
    BaseLectureInfo lecture = 1;
    // 是否已打卡
    bool is_clockin = 2;
  }
  // 课节列表
  repeated ClockinLecture lectures = 5;
  // 活动配置信息
  SceneConfig scene_config = 6;
}

message GetClockInStudyReportRequest {
  // 打卡场景: 1004
  int32 scene = 1;
  // 用户id
  int64 user_id = 2;
}

message GetClockInStudyReportResponse {
  // 开始时间 unix
  int32 start_day = 1;
  // 完成时间
  int32 finish_day = 2;
  // 阅读最多的一天
  int32 read_count_max_day = 3;
  // 阅读本数
  int32 read_book_count = 4;
  // 阅读时长 (秒)
  int32 read_duration = 5;
  // 阅读量 (词汇量)
  int32 vocabulary_count = 6;
}

message GetUserStudyReportByYearResponse {
  // 内容 json string
  string detail = 1;
  message UserProfile {
    string name = 1;
    string avatar = 2;
  }
  // 用户信息
  UserProfile user = 2;
}

message GetUserStudyReportByYearRequest {
  // 用户id
  int64 user_id = 1;
  // 年份 2023
  int32 year = 2;
}

message TelemarketingPublicSeaReasonsRequest {
}

message TelemarketingPublicSeaReasonsResponse {
  // 掉海原因列表
  repeated string reasons = 1;
}

message TelemarketingPublicSeaSearchRequest {
  message Location {
    string country = 1;  // 国家
    string province = 2; // 省
    string city = 3;     // 市
  }

  // 年龄，起。-1=不筛选
  int32 age_begin = 1;
  // 年龄，止。-1=不筛选
  int32 age_end = 2;
  // TODO: 待删除。
  Location location = 3;
  // 按位置搜索，多个位置是或的关系
  repeated Location locations = 4;

  // 累计拨打次数，起。-1=不筛选 TODO 删除
  int32 acc_call_count_begin = 5;
  // 累计拨打次数，止。-1=不筛选 TODO 删除
  int32 acc_call_count_end = 6;
  // 累计拨通次数，起。-1=不筛选。 TODO 删除
  int32 acc_call_connect_count_begin = 7;
  // 累计拨通次数，止。-1=不筛选。 TODO 删除
  int32 acc_call_connect_count_end = 8;
  // 最后拨打时间(时间戳) TODO 删除
  int64 latest_call_datetime = 9;
  // 以上 4 个关于外呼的字段，是否仅针对阅读营
  bool webcall_readcamp_only = 10;

  // 用户定级。0=未定级。不筛选时，传空数组。 TODO 删除
  repeated int32 user_levels = 11;
  // 已完课节数。不筛选时，传空数组。 TODO 删除
  repeated int32 finished_lecture_counts = 12;

  // 掉海原因搜索。
  repeated string drop_reasons = 13;

  int64 offset = 14;
  int64 limit = 15;

  // 指定uid搜索
  int64 user_id = 16;

  // 调库时间范围 [0,0]
  repeated int32 drop_sea_ts_range = 17;
  // 体验课领取时间范围 [0,0] TODO 删除
  repeated int32 trial_get_ts_range = 18;
  // 体验课二级渠道
  int32 level2_utm_source_id = 19;
  // 体验课是否完课 0:全部 1:完成 2：未完成 TODO 删除
  int32 trial_finish_status = 20;
  // 用户状态
  int32 user_status = 21;
  // 推荐查询 一级渠道： 自然量-1 转介绍-2 市场-30001 站内-60001 私域-60002 普通合作-90264 城市等级： 一线,新一线,二线,四线,三线,五线 1v1已转化
  // 一线城市+市场+1v1已转化："一线,30001,true", 新一线城市+市场+1v1已转化: "新一线,30001,true", 一线城市+市场: "一线,30001,",  新一线城市+市场: "新一线,30001,"
  repeated string query_codes = 22;
  // 用户行为
  UserEventType user_event_type = 23;
  // 用户行为时间 [0,0]
  repeated int64 user_event_ts_range = 24;
  // 掉库原因
  repeated string drop_reason = 25;
  // 累计完课 -1=不筛选
  int64 total_finish_num = 26;
  // 累计上课 -1=不筛选
  int64 total_study_num = 27;
  // 最近15天上课 -1=不筛选
  int64 last_15day_study_num = 28;
  // 最近15天完课数 -1=不筛选
  int64 last_15day_finish_num = 29;
  // ai自拼课消费金额，-1=不筛选，都不筛选时，传空数组
  repeated int64 ai_sys_course_pay_amt_range = 30;
  // 1v1 消费金额， -1=不筛选，都不筛选时，传空数组
  repeated int64 eng_total_order_amt_range = 31;
  // 绘本支付金额 -1=不筛选，都不筛选时，传空数组
  repeated int64 pic_order_amt_range = 32;
  // 阅读营支付金额，-1=不筛选，都不筛选时，传空数组
  repeated int64 rc_order_amt_range = 34;
  // 累计金额 -1=不筛选，都不筛选时，传空数组
  repeated int64 total_pay_amt_range = 35;
  // 阅读营累计通话时长 -1=不筛选，都不筛选时，传空数组
  repeated int64 readcamp_acc_call_duration_secs_range = 36;
  // 阅读营最近15天通话时长  -1=不筛选，都不筛选时，传空数组
  repeated int64 rc_last_15day_conn_duration_range = 37;
}

message TelemarketingPublicSeaSearchReponse {
  message UserBaseInfo {
    int64 user_id = 1;
    string name = 2;
    // 头像
    string avatar = 3;
    // 手机号
    string phone = 4;
    // 城市
    string city = 5;
    // 省份
    string province = 6;
  }
  message Metrics {
    // 用户定级。0=未定级
    int32 user_level = 1;
    // 体验课已完课节数 TODO 删除
    int32 finished_lecture_count = 2;

    // 累计外呼次数 TODO 删除
    int32 acc_call_count = 3;
    // 累计拨通次数 TODO 删除
    int32 acc_call_connect_count = 4;
    // 累计外呼时间(秒) TODO 删除
    int32 acc_call_duration_secs = 5;
    // 最后拨打时间(时间戳) TODO 删除
    int64 latest_call_datetime = 6;

    // 阅读营阅读营累计拨打次数 TODO 删除
    int32 readcamp_acc_call_count = 7;
    // 阅读营累计拨通次数 TODO 删除
    int32 readcamp_acc_call_connect_count = 8;
    // 阅读营累计通话时长(秒)
    int32 readcamp_acc_call_duration_secs = 9;
    // 阅读营最后拨打时间(时间戳) TODO 删除
    int64 readcamp_latest_call_datetime = 10;

    // 累计完课
    int64 total_finish_num = 11;
    // 最近15天完课
    int64 last_15day_finish_num = 12;

    // 阅读营最近15天通话时长(秒)
    int64 rc_last_15day_conn_duration = 13;

    // 1v1 消费（分）
    int64 eng_total_order_amt = 14;
    // ai自拼课消费（分）
    int64 ai_sys_course_pay_amt = 15;
    // 绘本消费（分）
    int64 pic_order_amt = 16;
    // 阅读营支付金额(分)
    int64 rc_order_amt = 17;
    // 累计站内消费（绘本+阅读营+1v1+ai自拼课）
    int64 total_pay_amt = 18;
  }
  message RemarkInfo {
    int64  ct = 1;
    string content = 2;
  }

  message PublicSeaUser {
    UserBaseInfo user_base_info = 1;
    Metrics metrics = 2;
    // 其他信息
    map<string, string> user_extra_info = 3;
    // 外呼备注信息
    string webcall_remark = 4;
    // 掉海原因
    string reason = 5;
    // 是否锁定捞取
    bool add_to_private_sea_lock = 6;
    // 最近一次用户行为
    UserEventHistory last_user_event_info = 7;
    // 最近一次跟进信息
    RemarkInfo last_remark_info = 8;
    // 渠道来源
    string source_name = 9;
  }

  repeated PublicSeaUser users = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}


message TelemarketingPrivateSeaSearchRequest {
  // uid或手机号(非+86开头)
  string key = 1;
  // 老师 op_name。必填。除此之外的字段皆可选。
  string teacher = 2;
  // 分配老师的起始时间
  int64 assign_begin_ts = 3;
  // 分配老师的结束时间
  int64 assign_end_ts = 4;
  // 累计外呼次数(多选)。取值范围: 0~5。5=5次及以上。
  repeated int32 acc_call_count = 5;
  // 是否加微：0=不做筛选；1=已添加；2=未添加
  int32 has_added_teacher = 6;
  // 已完课节数。取值范围: 0~4。
  repeated int32 finish_lecture_counts = 7;

  int64 offset = 8;
  int64 limit = 9;
}

message TelemarketingPrivateSeaSearchResponse {
  message UserBaseInfo {
    int64 user_id = 1;
    string name = 2;
    // 头像
    string avatar = 3;
    // 微信昵称
    string wechat_nickname = 4;
    // 手机号
    string phone = 5;
  }

  message Metrics {
    // 已完成的自己级别的课节数
    int32 finish_lecture_count = 1;
    // 累计外呼次数
    int32 acc_call_count = 2;
    // 累计学习时长(单位:秒)
    int32 study_duration = 3;
  }

  message PrivateSeaUser {
    // 用户基本信息
    UserBaseInfo user_base_info = 1;
    // 老师op_name
    string teacher = 2;
    // 是否已添加老师微信
    bool has_added_teacher = 3;
    Metrics metrics = 4;
    // 其他信息
    map<string, string> user_extra_info = 5;
    // 外呼备注信息
    string webcall_remark = 6;
  }

  repeated PrivateSeaUser users = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}

message TelemarketingBatchAddToPrivateSeaRequest {
  repeated int64 user_ids = 1;
}

message TelemarketingAddToPrivateSeaCheckReq {
  // 用户id
  int64 uid = 1;
}

message TelemarketingAddToPrivateSeaRequest {
  int64 user_id = 1;
  // 体验课课程id
  int32 course_id = 2;
}

message TelemarketingDropToPublicSeaRequest {
  int64 user_id = 1;
  repeated int64 user_ids = 2;
}

message CheckPayWithdrawQualificationRequest {
  // 场景: 1:0811满减活动
  int32 scene = 1;
}

message CheckPayWithdrawQualificationResponse {
  int64 user_id = 1;
  // 打款提现资格状态: 0: 无资格 1：已申请 2：未申请
  int32 status = 2;
  // 打款提现资格id（status=2时有效）
  int32 qualification_id = 3;
  // 打款提现金额（status=2时有效，单位：分）
  int32 withdraw_amount = 4;
}

message ApplyPayWithdrawRequest {
  // 打款提现资格id
  int32 qualification_id = 1;
  // 提现账户类型：1：支付宝 3：银行卡
  int32 account_type = 2;
  // 收款人姓名
  string account_name = 3;
  // 支付宝账号或银行卡号
  string account_id = 4;
  // 收款银行id(提现账户类型为银行卡时有效)
  int32 bank = 5;
  // 支行(提现账户类型为银行卡时有效)
  string sub_bank = 6;
  // 身份证号(提现账户类型为银行卡时有效)
  string cert_no = 7;
}

message ApplyPayWithdrawResponse {}

message PayWithdrawOrderExtraInfo {
  // 订单id
  string order_id = 1;
  // 订单应退金额（单位：分）
  int32 withdraw_amount = 2;
  // 订单总金额（单位：分）
  int32 order_amount = 3;
}

message PayWithdrawQualification {
  int32 id = 1;
  // 场景
  int32 scene = 2;
  // uid
  int64 user_id = 3;
  // 手机号
  string phone = 4;
  // 应退总金额（单位：分）
  int32 withdraw_amount = 5;
  // 订单总金额（单位：分）
  int32 orders_amount = 6;
  // 订单金额
  repeated PayWithdrawOrderExtraInfo orders_extra = 7;
  // 提现账户类型：1：支付宝 3：银行卡
  int32 account_type = 8;
  // 收款人姓名
  string account_name = 9;
  // 支付宝账号或银行卡号
  string account_id = 10;
  // 收款银行id(提现账户类型为银行卡时有效)
  int32 bank = 11;
  // 支行(提现账户类型为银行卡时有效)
  string sub_bank = 12;
  // 身份证号(提现账户类型为银行卡时有效)
  string cert_no = 13;
  // 创建时间
  int64 created_at = 14;
  // 更新时间
  int64 updated_at = 15;
}

message CreatePayWithdrawQualificationRequest {
  // 手机号
  string phone = 1;
  // 场景
  int32 scene = 2;
  // 订单金额
  repeated PayWithdrawOrderExtraInfo orders_extra = 3;
}

message UpdatePayWithdrawQualificationRequest {
  // 手机号
  string phone = 1;
  // 场景
  int32 scene = 2;
  // 订单金额
  repeated PayWithdrawOrderExtraInfo orders_extra = 3;
}

message DeletePayWithdrawQualificationRequest {
  // 手机号
  string phone = 1;
  // 场景
  int32 scene = 2;
}

message ReviewPayWithdrawApplyRequest {
  // uid
  int64 uid = 1;
  // 工单id
  string rid = 2;
  // 审批结果: true: 通过 false: 驳回
  string pass = 3;
  // 结果/备注
  string reason = 4;
}

message ReviewPayWithdrawApplyResponse {}

message UpdatePayWithdrawRequest {
  // uid
  int64 uid = 1;
  // 场景
  int32 scene = 2;
  // 打款交易id（按需填入，status=1时有效）
  string trade_id = 3;
  // 提现交易id（按需填入，status=1时有效）
  string expend_id = 4;
  // 备注
  string remark = 5;
  // 更新状态：1成功 2失败
  int32 status = 6;
}

message UpdatePayWithdrawResponse {}

message UserTeacherCoursePeriodBatchUpdateReq {
  // 用户id列表
  repeated int64 user_ids = 1;
  // 顾问op_name(名字+工号)
  string teacher_op_name = 2;
  // 班期
  int32 course_period = 3;
  // 转移好友 仅在 teacher_op_name 生效
  bool enabled_transfer_friend = 4;
}

message UserTeacherCoursePeriodBatchUpdateResponse {
  //班期修改结果
  BatchOpsResult change_period_result = 1;
  //改老师结果
  BatchOpsResult change_teacher_result = 2;
  //改好友关系结果
  BatchOpsResult change_qw_friend_result = 3;
}

message CourseUserBatchAddRequest {
  // 课程id
  int32 course_id = 1;
  // 用户id列表(用户id和手机号二选一)
  repeated int64 user_ids = 2;
  // 用户手机号列表(用户id和手机号二选一)
  repeated string phones = 3;
}

message ResInfo {
  // uid
  int64 user_id = 1;
  // 手机号
  string phone = 2;
  // msg
  string msg = 3;
}

message BatchOpsResult {
  // 成功结果
  repeated ResInfo success_results = 1;
  // 失败结果
  repeated ResInfo failed_results = 2;
}

message CourseUserBatchImportOrderRequest {
  // 用户id列表(用户id和手机号二选一)
  repeated int64 user_ids = 1;
  // 用户手机号列表(用户id和手机号二选一)
  repeated string phones = 2;
  // 套餐id
  string package_id = 3;
  // 邀请人id(选填)
  int64 inviter_id = 4;
  // 渠道id(选填)
  int32 utm_source = 5;
  // koc_id(选填)
  int64 koc_id = 6;
}

message GetUserAssetsRequest {
  int64 user_id = 1;
}

message GetUserAssetsResponse {
  repeated UserAsset items = 1;
}

message UserAsset {
  // 资产名，比如：欧美课程
  string equity_type_desc = 1;
  // 资产归属业务线。阅读营统一返回「阅读营」
  string equity_busi_source_desc = 2;
  // 资产单位
  string equity_unit_des = 3;
  // 资产数量
  int32 num = 4;
  // 到期时间
  int64 end_time = 5;
  // 查看该种资产剩余数量的后台链接地址
  string href = 6;
}

message UserKetWordLearnDetailRequest {
  // 用户id
  int64 uid = 1;
  // 课程id
  int32 course_id = 2;
}
message UserKetWordLearnDetailResponse {
  // 累计学词
  int32 total_learned_words = 1;
  // 单词记忆
  int32 word_memory_count = 2;
  // 单词拼写
  int32 word_spell_count = 3;
  // 单词拼写
  int32 word_exercise_count = 4;
  // 单词对应的模块
  message WordInModule {
    // 单词
    string name = 1;
    // 学习模块 二进制 或运算 0001: 单词记忆 0010：单词拼写 0100：单词习题
    int32 modules = 2;
  }
  // 累计单词学习
  repeated WordInModule words = 5;
}



message InviteActivity {
  int32 id = 1;
  // 名称
  string name = 2;
  // 图片url
  string pic_url = 3;
  // 体验课完课用户数
  int32 trial_threshold = 4;
  // 活动权益总数
  int32 award_count = 5;
  // 商品id
  int64 gid = 6;
  // 库存标识
  string sku = 7;
  // 起始时间
  int64 start_at = 8;
  // 结束时间
  int64 end_at = 9;
  // 创建时间
  int64 created_at = 10;
  // 更新时间
  int64 updated_at = 11;
}

message UserInviteActivity {
  // 转介绍活动
  InviteActivity invite_activity = 1;
  // 状态: 0:未参与 1:进行中  2:已送完 3:已完成
  int32 status = 2;
}

message InviteOuterData {
  // 转介绍id
  int32 invitation_id = 1;
  // 被邀请人uid
  int64 invitee = 2;
  // 被邀请人脱敏手机号
  string phone = 3;
  // 完课状态: 0:未完课 1:完课
  int32 status = 4;
}

message InviteJob {
  int32 id = 1;
  // uid
  int64 user_id = 2;
  // 活动id
  int32 activity_id = 3;
  // 转介绍邀请和完课数据
  repeated InviteOuterData outer_extra = 4;
  // 状态: 0=已生成, 1=终止, 2=超时, 3=已邀请(待发放), 4=发放成功, 5=失败
  int32 status = 5;
  // 商城订单id，发放成功才有
  int64 eid = 6;
  // 失败原因，失败才有
  string fail_reason = 7;
  // 结束时间
  int64 end_at = 8;
  // 创建时间
  int64 created_at = 9;
  // 更新时间
  int64 updated_at = 10;
}

message CreateInviteJobRequest {
  // 活动id
  int32 activity_id = 1;
}

message CancelInviteJobRequest {
  // 转介绍任务id
  int32 invite_job_id = 1;
}

message CancelInviteJobResponse{}

message UserInviteActivityListRequest {}

message UserInviteActivityListResponse {
  // uid
  int64 user_id = 1;
  // 最近任务
  InviteJob invite_job = 2;
  // 转介绍活动
  repeated UserInviteActivity user_invite_activities = 3;
}

message UserInviteJobListRequest {
  int64 offset = 1;
  int64 limit = 2;
}

message UserInviteJobListResponse {
  // uid
  int64 user_id = 1;
  // 任务列表
  repeated InviteJob invite_jobs = 2;
}

message GetInviteJobRequest {
  // 转介绍任务id
  int32 invite_job_id = 1;
}

message GetInProgressReferralActivityRequest {}

message ReferralActivity {
  // 活动id
  int32 id = 1;
  // 场景
  uint32 scene = 2;
  // 活动描述
  string description = 3;
  // 活动状态 0:初始化 1: 进行中 2:结束
  int32 status = 4;
  // 活动开始时间
  int64 start_time = 5;
  // 活动结束时间
  int64 end_time = 6;
  // 奖励最大数量
  int32 award_max_count = 7;
  // 奖励开始时间
  int64 award_st = 8;
  // 奖励结束时间
  int64 award_et = 9;
  // 创建时间
  int64 ct = 10;
  // 修改时间
  int64 ut = 11;
  // 星币
  int64 coin = 12;
}

message GetPosterUploadListRequest {}

message PosterUploadListResp {
  // 海报截图补卡次数
  int64 redo_num = 1;
  // 可补卡海报信息列表
  repeated PosterRecord poster_record = 2;
}

message PosterRecord {
  // 海报id
  int32 poster_id = 1;
  // 海报所属活动场景
  int32 scene = 2;
  // 海报创建时间
  int64 ct = 3;
  // 海报状态 0: 分享未上传 3: 审核失败
  int32 status = 4;
}

message AdminReferralActivity {
  // 活动id (id为0 代表创建)
  int32 id = 1;
  // 场景
  uint32 scene = 2;
  // 场景
  uint32 status = 3;
  // 活动描述
  string description = 4;
  // 活动开始时间
  int64 start_time = 5;
  // 活动结束时间
  int64 end_time = 6;
  // 奖励最大数量
  int32 award_max_count = 7;
  // 奖励开始时间
  int64 award_st = 8;
  // 奖励结束时间
  int64 award_et = 9;
  // 星币
  int64 coin = 10;
}

message ListReferralActivityRequest {
  int64 limit = 2;
  int64 offset = 3;
}

message ListReferralActivityResponse {
  repeated ReferralActivity items = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}

message ListFormalCourseUserRequest {
  int64 limit = 1;
  int64 offset = 2;
  // 可选，是否添加老师微信：0：不做筛选；1：已添加；2：未添加
  int32 has_added_teacher = 3;
}

message ListFormalCourseUserResponse {
  message FormalUser {
    // 用户id
    int64 user_id = 1;
    // 用户备注
    string remark = 2;
    string external_user_id = 3;
    // 周周有礼剩余次数
    int32 weekly_gift_remain_count = 4;
    // 手机号
    string phone = 5;
    // 是否加微
    bool add_qw = 6;
  }
  int64 offset = 1;
  int64 total = 2;
  bool more = 3;
  repeated FormalUser items = 4;
}


message ListUserRecordInFollowRequest {
  // 课节id
  int32 lecture_id = 1;
}

message ListUserRecordInFollowResponse {
  // 用户所有录音
  repeated AudioResource user_records = 1;
  // 跟读录音
  AudioResource follow_record = 2;
  // 跟读录音md5
  string follow_record_md5 = 3;
}

message UserLectureFollowRecordUpdateRequest {
  // 课节id
  int32 lecture_id = 1;
  // 跟读音频md5 （app校验是否需要重新合成）
  string follow_record_md5 = 2;
  // 跟读音频
  AudioCrtResource follow_record = 3;
}
message UserLectureFollowRecordUpdateResponse {}

message UserRewardOPRequest {
  // 用户id
  int64 uid = 1;
  // 操作类型 1 冻结账户增加 2 冻结账户减少 3 从可提现到冻结账户 4 从冻结到可提现 5 可提现账户扣减 6 可提现账户增加
  int32 event_type = 2;
  // 金额 分
  int32 amount = 3;
  // 备注
  string remark = 4;
}
message UserCoinOPResponse {
  repeated int64 success_uids = 1;
  repeated ResInfo failed_results = 2;
}

message UserCoinOPRequest {
  // 用户id
  repeated int64 uids = 1;
  // op_action = "add" 或 “subtract”
  string op_action = 2;
  // 变化量
  int32 count = 3;
  // 备注 【阅读营积分转星币】【阅读营直播预约】【阅读营周周有礼活动】【阅读营好友购课】【阅读营好友退费】【阅读营邀请任务】【组长奖励】
  string remark = 4;
}

message GetKocDailyListRes {
  message DailyStatistics {
    // 日期 uninx stamp
    int32 date = 1;
    // 领课人数
    int32 receive_course_people_cnt = 2;
    // 转化人数
    int32 formal_course_bought_people_cnt = 3;
    // 加微人数
    int32 qw_add_cnt = 4;
    // 定级人数
    int32 has_level_cnt = 5;
    // D1完课人数
    int32 day1_finished_people_cnt = 6;
    // D2完课人数
    int32 day2_finished_people_cnt = 7;
    // 订单GMV（分）
    int64 order_gmv = 8;
    // 退费人数
    int32 refund_people_cnt = 9;
    // 退费金额(分)
    int32 refund_amount = 10;

  }
  repeated DailyStatistics items = 1;
  int64 total = 2;
}

message GetKocDailyListReq {
  int64 kocid = 1;
  // 从1开始
  int64 page = 2;
  // 每页条目
  int64 size = 3;
  // 开始时间
  int32 begintts = 4;
  // 结束时间
  int32 endtts = 5;
}

message GetKocDailyDetailReq {
  // 日期时间戳 取当天凌晨
  int32 date = 1;
  int64 kocid = 2;
  // 从1开始
  int64 page = 3;
  // 每页条目
  int64 size = 4;

}

message GetKocDailyDetailRes {
  message KocUser {
    int64 uid = 1;
    // 微信昵称
    string wechat_name = 2;
    // 上课设备 设备类型 0 安卓 1 iOS -1 未知
    int32 device_type = 3;
    // 开课日期
    int32 course_start_ts = 4;
    // 是否加微
    bool qw_add = 5;
    // 是否定级
    bool has_level = 6;
    // D1是否完课
    bool day1_finished = 7;
    // D2是否完课
    bool day2_finished = 8;
    // 订单金额
    int32 order_amount = 9;
    // 退费金额
    int32 refund_amount = 10;
  }
  repeated KocUser items = 1;
  int64 total = 2;
}
message AdminShopCommodityListReq {
  // 中台商品id
  int64 commodity_id = 1;
  // 商品名称
  string name = 2;
  int64 limit = 3;
  int64 offset = 4;
}

message AdminShopCommodityListRes {
  message Commodity {
    int64 id = 1;
    // 中台商品id
    int64 commodity_id = 2;
    // 权重 影响展示优先级
    int32 rank = 3;
    // 类别
    int32 category_id = 4;
    // 状态 0:下架 1:上架
    int32 status = 5;
    // 售卖截止时间
    int32 sale_deadline = 6;
    // 绑定权益(开课等)
    int32 gift_id = 7;
    // 商品名称
    string name = 8;
    // 创建人
    string creator = 9;
    // 创建时间
    int32 ct = 10;
    // 更新时间
    int32 ut = 11;
  }
  int64 offset = 1;
  int64 total = 2;
  bool more = 3;
  repeated Commodity items = 4;
}

message AdminShopCommodityEditReq {
  // 为0:创建商品 非0:修改商品
  int32 id = 1;
  // 中台商品id
  int64 commodity_id = 2;
  // 权重 默认值传0
  int32 rank = 3;
  // 类别
  int32 category_id = 4;
  // 状态 0:下架 1:上架
  int32 status = 5;
  // 售卖截止时间
  int32 sale_deadline = 6;
  // 绑定权益(开课等)
  int32 gift_id = 7;
  // 商品名称 (根据中台信息回填)
  string name = 8;
}

message AdminGiftConfigListRes {
  message GiftConfig {
    // id
    int32 id = 1;
    // 枚举类型 1:开课 其他暂定
    int32 gift_type = 2;
    // 描述
    string gift_desc = 3;
    // 具体配置 类型为开课时,存储开课信息课程id逗号分隔. 其他类型暂定为 json string
    string details = 4;
  }
  int64 offset = 1;
  int64 total = 2;
  bool more = 3;
  repeated GiftConfig items = 4;
}

message AdminGiftConfigEditReq {
  // 为0:创建配置 非0:修改配置
  int32 id = 1;
  // 类型 创建后不支持修改
  int32 gift_type = 2;
  // 描述
  string gift_desc = 3;
  // 详情
  string details = 4;
}

message AdminCRMUserReq {
  int64 limit = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
  // 用户uid或手机号
  string key = 5;
  // 老师op_name,迁移到 teacher_op_names 后废弃
  string teacher_op_name = 6;
  // 分配时间区间 unix时间
  repeated int64 assign_ts_range = 7;
  // 用户行为时间 [0,0]
  repeated int64 user_event_ts_range = 8;
  // 添加企微状态 1:未加微 2:已加微 3:已删微
  int64 add_qw_state = 9;
  // ai自拼课消费金额，-1=不筛选，都不筛选时，传空数组
  repeated int64 ai_sys_course_pay_amt_range = 10;
  // 1v1 消费金额， -1=不筛选，都不筛选时，传空数组
  repeated int64 eng_total_order_amt_range = 11;
  // 绘本支付金额 -1=不筛选，都不筛选时，传空数组
  repeated int64 pic_order_amt_range = 12;
  // 阅读营支付金额，-1=不筛选，都不筛选时，传空数组
  repeated int64 rc_order_amt_range = 13;
  // 累计金额 -1=不筛选，都不筛选时，传空数组
  repeated int64 total_pay_amt_range = 14;
  // 排序方式 private_time:分配时间、intention:付费意愿或意向、next_followup_ts:下次跟进时间
  string order_by_field = 15;
  // 默认为false 按照从大到小
  bool asc = 16;
  // 省市
  repeated string address_list = 17;
  // 渠道来源
  repeated int64 utm_source_ids = 18;
  // 意向度
  repeated int64 intention = 19;
  // 查询类型 1-未转化 2-已转化 3-部分退 4-全额退 5-进库待拨打<3 6-进库未接通 7-进库拨打<=3 8-未到课 9-完课待跟进 10-完课未转化 11-今日上课 12-今日待跟进 13-本周截图未上传 14-预计今日掉库 15-进库待拨打<9
  int64 query_type = 20;
  // 捞取后上课数
  int64 last_bind_study_num = 21;
  // 累计上课数
  int64 total_study_num = 22;
  // 捞取后完课数
  int64 last_bind_finish_num = 23;
  // 累计完课数
  int64 total_finish_num = 24;
  // 阅读营累计通话次数[0,0]
  repeated int64 readcamp_acc_call_count = 25;
  // 阅读营累计通话时长(秒)[0,0]
  repeated int64 readcamp_acc_call_duration_secs = 26;
  // 用户事件
  UserEventType user_event_type = 27;
  // 标签筛选 线索保护、勿扰库、no_tags
  string query_tag = 28;
  // 最近掉海时间筛选
  repeated int64 lately_drop_ts_range = 29;
  // 老师op_name列表
  repeated string teacher_op_names = 30;
  // 分配原因
  string assign_reason = 31;
}
message AdminCRMUserRes {
  message RemarkInfo {
    int64 last_remark_ct = 1;
    string content = 2;
  }
  message UserEventInfo {
    UserEventType event_type = 1;
    int64 ct = 2;
  }

  message CRMUsers {
    int64 user_id = 1;
    // 用户名
    string name = 2;
    // 微信名
    string qw_name= 3;
    // 微信备注
    string qw_remark = 4;
    // 分配时间 unix
    int64 assign_ts= 5;
    // 最近一次支付时间
    int64 recent_course_buy_ts = 6;
    // 意向度 5:决定购买 4:意向高 3:意向一般 2:暂无意向 1:未接通
    int32 intention = 7;
    // 渠道来源
    string utm_source_name = 8;
    // 中台设备信息
    string device_info = 9;
    // 完课时间
    int64 finish_trial_ts = 10;
    // 下次跟进时间
    int64 next_followup_ts = 11;
    // crm备注
    string crm_remark = 12;
    // 领课时间
    int64 trial_course_receive_ts = 13;
    // 试听时间
    int64 audition_ts = 14;
    // 备注类型
    int32 remark_type =15;
    // 上课时间
    int32 trial_start_ts = 16;
    // 手机号
    string phone = 17;
    // 城市
    string city = 18;
    // 省份
    string province = 19;
    // 标签
    repeated string tags = 20;
    // 微信头像
    string qw_avatar = 21;
    // 是否加微
    bool add_qw_teacher = 22;
    // 累计完课数
    int64 total_finish_num = 23;
    // 捞取后完课数
    int64 last_bind_finish_num = 24;
    // 跟进信息
    RemarkInfo remark_info = 25;
    // 掉公海时间
    int64 down_public_sea_ts = 26;
    // 转化情况 1-未转化 2-已转化 3-部分退 4-全退
    int64 transform_type = 27;
    // 用户事件
    UserEventInfo user_event_info = 28;
    // 阅读营累计通话次数
    int64 readcamp_acc_call_count = 29;
    // 阅读营累计通话时长(秒)
    int64 readcamp_acc_call_duration_secs = 30;
    // 添加企微状态 1:未加微 2:已加微 3:已删微
    int64 add_qw_state = 31;
    // 1v1 消费（分）
    int64 eng_total_order_amt = 32;
    // ai自拼课消费（分）
    int64 ai_sys_course_pay_amt = 33;
    // 绘本消费（分）
    int64 pic_order_amt = 34;
    // 阅读营支付金额(分)
    int64 rc_order_amt = 35;
    // 累计站内消费（绘本+阅读营+1v1+ai自拼课）
    int64 total_pay_amt = 36;
    // 绑定后企微外呼次数
    int64 bind_qw_call_num = 37;
    // 绑定后企微通话时长，秒
    int64 bind_qw_duration = 38;
    // 绑定后完课时长 秒
    int64 bind_finish_course_duration = 39;
    // 累计完课时长
    int64 total_finish_course_duration = 40;
    // 渠道备注信息
    string utm_description = 41;
    // 分配原因
    string assign_reason = 42;
    // teacher 信息
    Teacher teacher_info = 43;
  }
  int64 offset = 1;
  int64 total = 2;
  bool more = 3;
  repeated CRMUsers items = 4;
  AdminCRMUserStatisticsRes statistics_info = 5;
}

message AdminCRMUserFollowUpEditReq {
  int64 user_id = 1;
  // 备注类型 1:课前 2:课后 3:其他
  int32 remark_type =2;
  // 备注内容
  string content = 3;
  // 意向度 5:决定购买 4:意向高 3:意向一般 2:暂无意向 1:未接通
  int32 intention = 4;
  // 上课时间
  int64 trial_start_ts = 5;
  // 下次跟进时间
  int64 next_followup_ts = 6;
}

message AdminCRMUserFollowUpListReq {
  int64 user_id = 1;
  int64 limit = 2;
  int64 offset = 3;
}

message AdminCRMUserFollowUpListRes {
  message FollowUpInfo {
    int64 id = 1;
    int64 uid = 2;
    // 类型 1-课前 2-课后 3-其他
    int64 remark_type = 3;
    // 上课时间
    int64 trial_start_ts = 4;
    // 下次跟进时间
    int64 next_followup_ts = 5;
    // 意向度 2-低 3-中 4-高
    int64 intention = 6;
    string content = 7;
    int64 ct = 8;
    string teacher_opname = 9;
  }
  int64 offset = 1;
  int64 total = 2;
  bool more = 3;
  repeated FollowUpInfo items = 4;
}

message AdminCRMUserTagsUpdateReq {
  int64 user_id = 1;
  // 标签
  repeated string tags = 2;
}

// 待下线
message AdminCRMUserStatisticsReq {
  // 未付费和付费用户 1是付费 2是未付费
  int32 is_paid_user = 1;
  // 查询某个顾问
  string teacher_op_name = 2;
  // 查询某一批顾问
  repeated string teacher_op_names =3;
}
message AdminCRMUserStatisticsRes {
  message CRMClueInfo {
    // 线索保护数量
    int64 clue_protection_num = 1;
    // 线索上限
    int64 total_clue_limit = 2;
    // 当前线索数量
    int64 cur_clue_num = 3;
  }

  // 新进库待拨打
  int32 after_assign_no_dial = 1;
  // 新进库未接通
  int32 after_assign_no_answer = 2;
  // 完课后待拨打
  int32 finish_class_no_dial = 3;
  // 未接通 < 3
  int32 no_answer_less_than3 = 4;
  // 未到课
  int32 no_attend_ts = 5;
  // 未转化/未付费学员
  int32 no_assign = 6;
  // 已转化/已付费学员
  int32 has_assign = 7;
  // 部分退
  int32 refund_part = 8;
  // 全额退
  int32 refund_all = 9;
  // 今日上课
  int32 today_class = 10;
  // 今日待跟进
  int32 today_follow_up = 11;
  // 本周截图未上传
  int32 has_assign_week_no_screenshot = 12;
  // 完课未转化
  int32 finish_class_no_assign = 13;
  // 线索信息
  CRMClueInfo crm_clue_info = 14;
  // 预计今日掉库
  int32 predict_drop_sea_today = 15;
  // 进库待拨打< 9
  int32 no_answer_less_than9 = 16;
}
message AdminKOCUserBindReq {
  int64 user_id = 1;
  int64 koc_id = 2;
  int64 bind_st = 3;
}
message AdminWorkOrderOrderGetReq {
  string order_id = 1;
}
message AdminWorkOrderOrderGetRes {
  int64 uid = 1;
  // 当前归属销售
  string cur_sale_name = 2;
  string package_name = 3;
  // 首购时间
  int32 first_bought_ts = 4;
  // 购买级别 (套餐包含的课程数)
  int32 buy_level = 5;
  // 总课时数 (阅读营课节数)
  int32 total_unit_cnt = 6;
  // 已消耗课时 (阅读营到课)
  int32 consumed_unit_cnt = 7;
  // 剩余课时
  int32 remain_unit_cnt = 8;
  // 支付金额
  int32 pay_amount = 9;
}
message AdminWorkOrderOrderRefundReq {
  // 退课级别 "1" | "2" | "3"
  repeated string levels = 1;
  // 用户id
  int64 uid = 2;
  // 退款金额 (单位：分)
  int64 amount = 3;
  // 工单id
  string work_order_id = 4;
  // 订单id（站内）
  string sale_order_id = 5;
  // 操作类型 (1:退费 2:返现)
  int32 action_type = 6;
}
message AdminWorkOrderPreCheckReq {
  // 工单模板Id
  string pid = 1;
  // 订单id（站内）
  string sale_order_id = 2;
}
message AdminWorkOrderSaleOrderAssignUpdateReq {
  // 订单id (站内)
  string sale_order_id = 1;
  // 老师 (名字+工号)
  string assign_teacher_opname = 2;
  // 工单id
  string work_order_id = 3;
}
message AdminClockInSceneConfigListReq {
  int64 limit = 1;
  int64 offset = 2;
}
message SceneConfig {
  // 活动场景
  int32 scene = 1;
  // 活动名称
  string name = 2;
  // 场景类别 同一类别只能参加一次
  int32 scene_catetory = 3;
  // 活动开始时间
  int64 st = 4;
  // 活动结束时间
  int64 et = 5;
  // 报名开始时间
  int64 apply_st = 6;
  // 报名结束时间
  int64 apply_et = 7;
  // 套餐 id
  int64 package_id = 8;
  // 补签最大数量
  int32 replenishment_max_cnt = 9;
  // 前置检查 枚举 has_formal:有正式课 has_course_ids:有课程
  string precheck_strategy = 10;
  // 前置检查 has_course_ids:有课程 生效
  repeated int32 precheck_strategy_course_ids = 11;
  // 打卡完成策略 枚举 first_study_finished:首次学习 study_finished:学习完成
  string clockin_finished_strategy = 12;
  // 场景完成策略 枚举 dayCount_and_newBooks:天数和新书数 applicationAssignCourse:报名课程完成阅读 bookCount:本数
  string scene_finished_strategy = 13;
  // 持续天数 用于生成活动结束时间
  int32 continue_day_cnt = 14;
  // 奖牌id
  int64 medal_id = 15;
  // 奖牌 sku
  int64 medal_sku = 16;
  // 奖牌商品 id
  int64 medal_gid = 17;
  // 创建时间
  int64 ct = 18;
  // 更新时间
  int64 ut = 19;
  // id
  int32 id = 20;
}
message AdminClockInSceneConfigListRes {
  repeated SceneConfig items = 1;
  int64 offset = 2;
  int64 total = 3;
  bool more = 4;
}
message AdminClockInSceneConfigEditReq {
  // 配置 id 0:新增 非0:修改
  int64 id = 1;
  // 活动场景
  int32 scene = 2;
  // 场景名
  string name = 3;
  // 场景类别 同一类别只能参加一次
  int32 scene_catetory = 4;
  // 活动开始时间
  int64 st = 5;
  // 活动结束时间
  int64 et = 6;
  // 报名开始时间
  int64 apply_st = 7;
  // 报名结束时间
  int64 apply_et = 8;
  // 套餐 id
  int64 package_id = 9;
  // 补签最大数量
  int32 replenishment_max_cnt = 10;
  // 前置检查 枚举 has_formal:有正式课 has_course_ids:有课程
  string precheck_strategy = 11;
  // 前置检查 has_course_ids:有课程 生效
  repeated int32 precheck_strategy_course_ids = 12;
  // 打卡完成策略 枚举 first_study_finished:首次学习 study_finished:学习完成
  string clockin_finished_strategy = 13;
  // 场景完成策略 枚举 dayCount_and_newBooks:天数和新书数 applicationAssignCourse:报名课程完成阅读 bookCount:本数
  string scene_finished_strategy = 14;
  // 持续天数 用于生成活动结束时间
  int32 continue_day_cnt = 15;
  // 奖牌id
  int32 medal_id = 16;
  // 奖牌 sku
  int64 medal_sku = 17;
  // 奖牌商品 id
  int64 medal_gid = 18;
}

message BindOuterOrderReq {
  // 订单id
  string order_id = 1;
  // 订单来源
  OrderSource source = 2;
  // 收货人姓名
  string receiver_name = 3;
  // 收货人手机号
  string receiver_tel = 4;
  // 省
  string delivery_province = 5;
  // 市
  string delivery_city = 6;
  // 区
  string delivery_district = 7;
  // 详细地址
  string delivery_address = 8;
}

message ChatGPTMessage {
  // enum: assistant | user | system
  string role = 1;
  string content = 2;
}

message GetGPTChatReq {
  // 场景来源
  enum Scene {
    UNKNOWN = 0;
    // 口语练习 入参： course_id, question_id
    SpokenQuestion = 1;
  }
  Scene scene = 1;
  repeated ChatGPTMessage messages = 2;
  // 课程id
  int32 course_id = 3;
  // 课节id
  int32 lecture_id = 4;
  // 问题id
  int64 question_id = 5;
}

message AdminBatchDecodeOuterOrderAddrReq {
  // 订单来源
  OrderSource source = 1;
  // 订单Id
  repeated string order_ids = 2;
}

// 暂支持流式
message GetGPTChatRes {
}

message AdminSaleOrderMqBatchReEnterReq {
  // 中台订单消息
  repeated string mq_msgs = 1;
}

// 绘本列表
message PicturebookListReq {
  int64 offset = 1;
  int64 limit = 2;
  string readcamp_level = 3;
  repeated int64 book_types = 4;
}

message PicturebookInfo {
  int64 firstclassifyid = 1;
  // 语音类型
  int64 voicetype = 2;
  string listenvideo = 3;
  // 是否vip绘本
  bool isvip = 4;
  // 0：不支持打分，1:支持打分
  int64 score = 5;
  // vip 绘本专辑
  int64 topicid = 6;
  // 难度等级 1-26
  int64 difficulty = 7;
  // 封面
  PicturebookCoverInfo cover = 8;
  // vip 绘本专辑置顶值
  int64 topicbookindex = 9;
  int64 ut = 10;
  int64 resid = 11;
  // 0 不能出题 1 能出题
  int64 topicstate = 12;
  // 审核状态
  int64 state = 13;
  // 出版社id
  int64 pressid = 14;
  string bg_picture = 15;
  repeated string words = 16;
  int64 paytype = 17;
  // 标题
  string title = 18;
  // 屏幕方向 0竖屏 1横屏
  int64 screen = 19;
  int64 reprice = 20;
  string explainvideo = 21;
  int64 top = 22;
  bool vipbubble = 23;
  string bookprice = 24;
  int64 listenvideostate = 25;
  int64 flag = 26;
  int64 pagecount = 27;
  bool readbubble = 28;
  string writer = 29;
  int64 avescore = 30;
  string translator = 31;
  int64 explainvideostate = 32;
  repeated int64 levellist = 33;
  int64 recordstate = 34;
  int64 createrid = 35;
  int64 sort = 36;
  int64 recordbubble = 37;
  int64 bookid = 38;
  string illustrator = 39;
  string difficultyname = 40;
  // 绘本标签
  repeated string tags = 41;
  int64 booktype = 42;
  int64 secondclassifyid = 43;
  int64 lastupdateid = 44;
  int64 playcount = 45;
  string domain = 46;
  int64 downloads = 47;
  // 绘本等级
  int64 level = 48;
  bool isstoproll = 49;
  // 绘本词汇量
  int64 vocabulary = 50;
  // 0：纯图片版本；1：图片+文字版本
  int64 version = 51;
  bool newbubble = 52;
  string bgm = 53;
  int64 onlinetime = 54;
  int64 lock = 55;
  // 绘本简介
  string introduction = 56;
  bool notinpicgallery = 57;
  int64 ct = 58;
  repeated int64 learnlink = 59;
  PicturebookReadcampInfo readcamp_info = 60;
}

message PicturebookReadcampInfo {
  // 绘本学习完成状态
  int64 study_state = 1;
  // 阅读天数
  int64 read_day_num = 2;
  // 阅读本数
  int64 read_book_num = 3;
}

message PicturebookCoverInfo {
  int64 w = 1;
  int64 h = 2;
  // 小图uri
  string tiny = 3;
  // 原图 uri
  string origin = 4;
}

message PicturebookListRes {
  repeated PicturebookInfo items = 1;
  int64 offset = 2;
  bool more = 3;
}

message GetPicturebookDetailReq {
  int64 book_id = 1;
}

message GetPicturebookDetailRes {
  PicturebookInfo bookinfo = 1;
}

message PicturebookPageListReq {
  int64 linktype = 1;
  int64 bookid = 2;
}

message PicturebookPageInfo {
  bool is_open_rp = 1;
  string explainrecordurl = 2;
  string scoretext = 3;
  bool hasrecord = 4;
  string recordtext_pinyin = 5;
  PicturebookCoverInfo picture = 6;
  string listentext = 7;
  bool hasteach = 8;
  string ext = 9;
  string translation = 10;
  string listenofficialurl = 11;
  int64 pageid = 12;
  string recordtext = 13;
  string listentext_pinyin = 14;
  bool is_open_lp = 15;
  PicturebookEvaluationInfo listenofficialevaluation = 16;
}

message PicturebookEvaluationInfo {
  int64 recordid = 1;
  PicturebookScoreInfo totalscore = 2;
  repeated PicturebookScoreInfo wordscore = 3;
  int64 productid = 4;
  int64 ut = 5;
}

message PicturebookScoreInfo {
  string content = 1;
  int64 score = 2;
  int64 rank = 3;
  int64 index = 4;
  int64 startts = 5;
  int64 endts = 6;
}

message PicturebookPageListRes {
  int64 bookid = 1;
  int64 explainproductid = 2;
  string bmg = 3;
  int64 officialproductid = 4;
  int64 booktype = 5;
  repeated PicturebookPageInfo pageinfos = 6;
}

message PicturebookStudyReportReq {
  int64 book_id = 1;
  int64 link_type = 2;
}


message UserReadRecordLearnCalendarReq {
  // 时间区间范围
  repeated int64 days_range = 1;
}

message UserReadRecordLearnCalendarRes {
  repeated UserLearnCalendar calendar = 1;
  // 学习天数
  int64 learn_days = 2;
}

message UserLearnCalendar {
  // 20000901
  int64 date_day = 1;
  // 是否已学习
  bool has_learned = 2;
}

message UserReadRecordLearnInfoReq {
  // 时间区间范围
  repeated int64 days_range = 1;
  string scene_type = 2;
  int64 offset = 3;
  int64 limit = 4;
}

message UserReadRecordLearnInfoRes {
  // 新读绘本数
  int64 read_num = 1;
  // 磨耳朵时长
  int64 practice_duration = 2;
  // 学习时长
  int64 learn_duration = 3;
  // 课程信息
  repeated LearnLectureItem lecture_list = 4;
  // 磨耳朵书名
  repeated PraticeBookInfo practice_book_infos = 5;
  bool more = 6;
  int64 offset = 7;
}

message LearnLectureItem {
  int32 id = 1;
  // 课程名称
  string name = 2;
  // 课程头图信息
  ImageResource front_picture = 3;
  // 来源 阅读营：readcamp 听力熊：inbp
  string source = 4;
  // 课节Id
  int64 lecture_id = 5;
}

message PraticeBookInfo {
  // 磨耳朵书名
  string name = 1;
  // 书来源 阅读营：readcamp 听力熊：inbp
  string source = 2;
}

message AdminShopMallOrderExchangeReq {
  // 商城订单id: eid
  int64 eid = 1;
  // 新商品id: gid
  int64 gid = 2;
  // 备注
  string remark = 3;
}

message AdminShopMallOrderApplySendReq {
  // 商城订单
  int64 eid = 1;
  // 备注
  string remark = 2;
}

message AdminWechatCourseAddrGetReq {
  // 用户id
  int64 uid = 1;
}

message AdminOpenCourseInAdvanceReq {
  // 用户uid
  int64 user_id = 1;
  // 开课课程id
  int64 course_id = 2;
  // 站内订单id
  string sale_order_id = 3;
}

message AdminOpenCourseListReq {
  string sale_order_id = 1;
  int64 user_id = 2;
}

message AdminOpenCourseListRes{
  repeated Course open_course_list = 1;
  repeated Course noopen_course_list = 2;
}


message AdminChangeCourseListReq {
  int64 course_id = 1;
  int64 user_id = 2;
}

message AdminChangeCourseListRes {
  repeated Course open_course_list = 1;
  repeated Course noopen_course_list = 2;
}

message AdminSaleOrderOpenCourseInfoReq {
  string sale_order_id = 1;
  int64 user_id = 2;
}

message AdminSaleOrderOpenCourseInfoRes{
  message Course {
    int32 id = 1;
    string name = 2;
    int64 created_at = 3;
    // 开课备注
    string remark = 4;
    // 课程完成度
    int32 finished_rate = 5;
    // 当前完成度，定义为：已学完的课节中，max(lecture_number) / count(lectures)
    int32 curr_finished_rate = 6;
    // 平均每日学习的课节数
    int32 avg_daily_lectures = 7;
    // 平均每日学习的时长
    int32 avg_daily_duration_s = 8;
    // 是否可调课
    bool can_change_course = 9;
  }
  repeated Course course_infos = 1;
}

message BookList {
  // id
  int32 id = 1;
  // 书单名
  string name = 2;
  // 创建时间
  int64 ct = 3;
  // 更新时间
  int64 ut = 4;
}

message UserBookListListRes {
  int64 offset = 1;
  int64 total = 2;
  bool more = 3;
  repeated BookList items = 4;
}

message UserBookListGetReq {
  // 书单id
  int32 booklist_id = 1;
  int64 limit = 2;
  int64 offset = 3;
}

message UserBookListGetRes {
  int64 offset = 1;
  int64 total = 2;
  bool more = 3;
  // 课节信息
  repeated Lecture items = 4;
}

message UserBookListDeleteReq {
  // 要删除的书单id
  repeated int64 booklist_ids = 1;
}

message UserBookListCreateReq {
  // 书单名
  string name = 1;
}

message UserBookListCreateRes {
  BookList booklist = 1;
}

message UserBookListUpdateReq {
  // 书单id
  int64 booklist_id = 1;
  // 书单名
  string name = 2;
}

message UserBookListUpdateRes {
  BookList booklist = 1;
}


message UserBookListAddLectureReq {
  int64 booklist_id = 1;
  repeated int64 lecture_ids = 2;
}

message UserBookListDelLectureReq {
  int64 booklist_id = 1;
  repeated int64 lecture_ids = 2;
}

enum StudyRecordSource {
  // 上课
  InClass = 0;
  // 磨耳朵
  Practice = 1;
  // 听力熊
  ListenBear = 2;
}
message PlaylistGetReq {
  StudyRecordSource source = 1;
}
message PlaylistGetRes {
  message Lecture {
    // 课节id
    int32 id = 1;
    // 课节名称
    string name = 2;
    // 课程id
    int32 course_id = 3;
    // 封面
    ImageResource front_picture = 4;
    // 导读资源信息
    MediaResource guide_resource = 5;
    // 原音资源信息
    MediaResource original_resource = 6;
  }
  message Course {
    // 课程id
    int32 id = 1;
    // 课程分类 ["中文","英文","阅读主线营","阅读拓展营","学术考试营"]
    repeated string category_tags = 2;
  }
  repeated Lecture lectures = 1;
  repeated Course courses = 2;
}

message ActivityUserChangeReq {
  // 活动id，排行榜=1
  int64 activity_id = 1;
  // 用户id
  int64 uid = 2;
  // 动作 action 参加=1 退出=2
  int64 action_type = 3;
}

message ActivityRankUser {
  message UserInfo {
    // 头像
    string avatar = 1;
    // 昵称
    string nickname = 2;
  }
  int64 id = 1;
  // 用户id
  int64 uid = 2;
  // 活动id 1=排行榜
  int64 activity_id = 3;
  // 状态 1=参加 2=不参加
  int64 state = 4;
  // 等级 1-青铜,2-白银,3-黄金,4-蓝宝石,5-红宝石,6-绿宝石,7-紫水晶,8-珍珠
  int64 level = 5;
  // 上周等级
  int64 last_level = 6;
  // 累计经验
  int64 total_exp = 7;
  // 分组id
  int64 group_id = 8;
  // 用户基础信息
  UserInfo user_info = 9;
  // 上周组内排名
  int64 last_week_group_rank = 10;
}

message GetActivityReq {
  // 活动ID 1=排行榜
  int64 activity_id = 1;
}

message GetActivityRankRes {
  // 排行榜信息
  repeated ActivityRankUser rank_users = 1;
  // 活动结算时间
  int64 end_ts = 2;
  // 倒计时(秒)
  int64 countdown_sec = 3;
}

message AdminUpsertActivityReq {
  // 新增时不需要
  int64 id = 1;
  // 活动名称
  string name = 2;
  // 状态 0:初始化 1:上线 2:下线
  int64 state = 3;
  // 活动类型 1-长期活动
  int64 activity_type = 4;
  // 配置信息
  string conf = 5;
  // 用户筛选配置
  string user_query_conf = 6;
}

message AdminAddActivityUserReq {
  int64 activity_id = 1;
  repeated int64 uids = 2;
}

message AdminQueryLeadsFlowLogReq {
  int64 uid = 1;
  int64 offset = 2;
  int64 limit = 3;
}

message AdminQueryLeadsFlowLogRes {
  message LeadsFlowLogInfo {
    // 流转前
    string before = 1;
    // 流转后
    string after = 2;
    // 流转原因
    string reason = 3;
    // 操作人
    string opuser = 4;
    // 创建时间
    int64 ct = 5;
  }
  repeated LeadsFlowLogInfo flow_logs = 1;
  int64 total = 2;
  bool more = 3;
  int64 offset = 4;
}

message AdminLeadsBindSearchReq {
  // 手机号列表
  repeated string phone_list = 1;
  // 渠道
  int64 utm_source = 2;
}

message AdminLeadsBindSearchRes{
  message LeadsBindSearchInfo {
    string phone = 1;
    string source_name = 2;
    string utm_source_id = 3;
  }
  repeated LeadsBindSearchInfo items = 4;
}

message UserIosAdReportReq {
  // 归因值。
  bool attribution = 1;
  // 拥有该⼴告系列的组织标识符。
  int64 org_id = 2;
  // ⼴告系列的唯⼀标识符。
  int64 campaign_id = 3;
  // 转化类型
  string conversion_type = 4;
  // ⼴告组的标识符
  int64 adGroup_id = 5;
  // 关键字的标识符。
  int64 keyword_id = 6;
  // 表示⼴告对象和⼴告组之间分配关系的标识符。
  int64 ad_id = 7;
}

service ReadCampHttpService {
  // 用户-IOS侧渠道广告来源上报
  // `midware:"Auth"`
  rpc UserIosAdReport(UserIosAdReportReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/base/readcamp/user_ios_ad/report'
    };
  }
  // 用户-学习信息上报
  // `midware:"Auth"`
  rpc LectureStudyReport(LectureStudyReportRequest) returns (LectureStudyReportResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/user_lecture_study/report'
    };
  }
  // 用户-课节学习上报（用于统计学习次数）
  // `midware:"Auth"`
  rpc BeginStudyingLecture(BeginStudyingLectureRequest) returns (BeginStudyingLectureResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/user_lecture/begin_studying'
    };
  }
  // 用户-获取统计信息-分享
  // `midware:"Auth"`
  rpc GetUserStudyStatisticsShare(GetUserStudyStatisticsShareRequest) returns (GetUserStudyStatisticsShareResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/user_statistics/share'
    };
  }
  // 用户-获取统计信息
  // `midware:"Auth"`
  rpc GetUserStudyStatistics(GetUserStudyStatisticsRequest) returns (UserStudyStatistics) {
    option (google.api.http) = {
      post: '/base/readcamp/user_study/statistics'
    };
  }
  // 用户-获取统计信息-(区分中英文)
  // `midware:"Auth"`
  rpc GetUserStudyStatisticsDetail(GetUserStudyStatisticsDetailReq) returns (UserStudyStatisticsDetail) {
    option (google.api.http) = {
      post: '/base/readcamp/user_study/statistics/detail'
    };
  }
  // 用户-获取用户老师相关信息
  // `midware:"Auth"`
  rpc GetUserTeacher(GetUserTeacherRequest) returns (GetUserTeacherResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/user_teacher/get'
    };
  }
  // 用户-获取用户状态信息
  // `midware:"Auth"`
  rpc GetUserStatus(GetUserStatusRequest) returns (GetUserStatusResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/user_status/get'
    };
  }
  // 用户-获取学习时长信息
  // `midware:"Auth"`
  rpc GetUserStudyDuration(GetUserStudyDurationRequest) returns (GetUserStudyDurationResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/user_study/duration'
    };
  }
  // 用户-获取已购买课程列表
  // `midware:"Auth"`
  rpc GetUserCourses(GetUserCoursesRequest) returns (GetUserCoursesResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/user_course/list'
    };
  }
  // 用户-课程详细信息
  // `midware:"Auth"`
  rpc GetUserCourseDetail(GetUserCourseDetailRequest) returns (UserCourseDetail) {
    option (google.api.http) = {
      post: '/base/readcamp/user_course/detail'
    };
  }
  // 用户-体验课学习状态信息
  // `midware:"Auth"`
  rpc GetUserTrialCourseStatus(GetUserTrialCourseStatusRequest) returns (GetUserTrialCourseStatusResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/user_trial_course/status'
    };
  }
  // 用户-获取课程内部子课程列表
  // `midware:"Auth"`
  rpc LectureList(LectureListRequest) returns (GetUserLecturesResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/user_lecture/list'
    };
  }

  // 用户-获取用户正在学习的课节
  // `midware:"Auth"`
  rpc GetUserStudyingLecture(GetUserStudyingLectureRequest) returns (UserLecture) {
    option (google.api.http) = {
      post: '/base/readcamp/user_studying_lecture/get'
    };
  }

  // 用户-查询功能
  // `midware:"Auth"`
  rpc Search(SearchRequest) returns (SearchResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/search'
    };
  }

  // 用户-喜欢课节
  // `midware:"Auth"`
  rpc LikeLecture(LikeLectureRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/base/readcamp/lecture/like'
    };
  }

  // 用户-取消喜欢课节
  // `midware:"Auth"`
  rpc CancelLikeLecture(CancelLikeLectureRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/base/readcamp/lecture/cancel_like'
    };
  }

  // 用户-获取书架中书籍(课节)列表
  // `midware:"Auth"`
  rpc GetBookshelfLectureList(GetBookshelfLectureListRequest) returns (GetBookshelfLectureListResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/bookshelf/lecture/list'
    };
  }
  // 用户-直播列表是否预约查询
  rpc QueryBookLivecasts(QueryBookLivecastsRequest) returns (QueryBookLivecastsResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/user/livecasts/query'
    };
  }
  // 用户-查询包含source的直播预约列表
  rpc QueryBookLivecastsWithSource(QueryBookLivecastsWithSourceRequest) returns (QueryBookLivecastsWithSourceResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/user/livecasts_with_source/query'
    };
  }
  // 用户-预约直播接口
  rpc BookLivecast(BookLivecastRequest) returns (BookLivecastResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/user/livecast/book'
    };
  }
  // 用户-领取积分接口
  // `midware:"Auth"`
  rpc OwnCoins(OwnCoinsRequest) returns (OwnCoinsResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/user/coins/own'
    };
  }
  // 用户-获取积分总量接口
  // `midware:"Auth"`
  rpc GetUserCoinSummary(GetUserCoinSummaryRequest) returns (GetUserCoinSummaryResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/user/coins/summary'
    };
  }
  // 用户-获取积分明细接口
  // `midware:"Auth"`
  rpc GetUserCoinDetail(GetUserCoinDetailRequest) returns (GetUserCoinDetailResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/user/coins/detail'
    };
  }
  // 用户-查询邀请列表接口
  // `midware:"Auth"`
  rpc InvitationList(InvitationListRequest) returns (InvitationListResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/user/invitations/list'
    };
  }
  // 训练营-获取训练营信息
  rpc CampGet(CampGetRequest) returns (CampGetResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/camp/get/id'
    };
  }
  // 训练营-获取训练营列表
  rpc CampList(CampListRequest) returns (CampListResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/camp/list'
    };
  }
  // 课程-获取课程信息
  // `midware:"Auth"`
  rpc CourseGet(CourseGetRequest) returns (UserCourse) {
    option (google.api.http) = {
      post: '/base/readcamp/course/get/id'
    };
  }
  // 课程-获取课程列表
  // `midware:"OptionalAuth"`
  rpc CourseList(CourseListRequest) returns (GetUserCoursesResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/course/list'
    };
  }
  // 课节-获取课节信息
  // `midware:"Auth"`
  rpc LectureGet(LectureGetRequest) returns (UserLecture) {
    option (google.api.http) = {
      post: '/base/readcamp/lecture/get/id'
    };
  }
  // 课节-获取课节信息(含所属课程信息)
  // `midware:"Auth"`
  rpc LectureGetWithCourseInfo(LectureGetRequest) returns (UserLectureWithCourse) {
    option (google.api.http) = {
      post: '/base/readcamp/lecture/get_with_course/id'
    };
  }
  // 用户-课节详情-课节模块信息
  // `midware:"Auth"`
  rpc GetAppLectureModules(GetAppLectureModulesReq) returns (GetAppLectureModulesRes) {
    option (google.api.http) = {
      post: '/base/readcamp/lecture/modules/list'
    };
  }
  // 用户-课节模块-上报模块学习进度
  // `midware:"Auth"`
  rpc ReportLectureModuleProgress(ReportLectureModuleProgressReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/base/readcamp/lecture/modules/progress_report'
    };
  }
  // 用户-课节模块-相关课程模块信息
  // `midware:"Auth"`
  rpc BatchGetLectureOrPictureBook(BatchGetLectureOrPicBookReq) returns (BatchGetLectureOrPicBookRes) {
    option (google.api.http) = {
      post: '/base/readcamp/lecture/modules/related_get'
    };
  }
  // 课节-免费课节获取
  // `midware:"Auth"`
  rpc FreeLectureGet(FreeLectureGetRequest) returns (UserLecture) {
    option (google.api.http) = {
      post: '/base/readcamp/free_lecture/get'
    };
  }

  // 上课-录音评分
  // `midware:"Auth"`
  rpc EvaluateRecording(EvaluateRecordingRequest) returns (EvaluateRecordingResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/recording/evaluation'
    };
  }

  // 上课-「跟读」数据获取
  // `midware:"Auth"`
  rpc GetUserLectureFollowMe(GetUserLectureFollowMeRequest) returns (UserLectureFollowMe) {
    option (google.api.http) = {
      post: '/base/readcamp/user_lecture_follow_me/get'
    };
  }

  // 上课-「练一练」数据获取
  // `midware:"Auth"`
  rpc GetUserLectureExercise(GetUserLectureExerciseRequest) returns (UserLectureExercise) {
    option (google.api.http) = {
      post: '/base/readcamp/user_lecture_exercise/get'
    };
  }

  // 上课-「练一练」进度上报
  // `midware:"Auth"`
  rpc ReportUserLectureExercisePos(ReportUserLectureExercisePosRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/base/readcamp/user_lecture_exercise_pos/report'
    };
  }

  // 上课-小程序体验课各个部分学习进度
  // `midware:"Auth"`
  rpc GetLectureProgress(GetLectureProgressRequest) returns (GetLectureProgressResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/user_lecture_progress/get'
    };
  }

  // 上课-app各个部分学习进度
  // `midware:"Auth"`
  rpc GetAppLectureProgress(GetUserLectureProgressRequest) returns (GetUserLectureProgressResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/user_lecture/progress'
    };
  }

  // 上课-app内课前准备的学习进度
  // `midware:"Auth"`
  rpc GetLecturePrepareProgress(GetUserLecturePrepareProgressRequest) returns (GetUserLecturePrepareProgressResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/user_lecture_prepare/progress'
    };
  }

  // 上课-app内「练一练」、「玩一玩」进度上报
  // `midware:"Auth"`
  rpc ReportUserLectureExercise(ReportUserLectureExerciseRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/base/readcamp/user_lecture_exercise/report'
    };
  }

  // 获取uid对应的token
  // `midware:"Auth"`
  rpc GetUidToken(GetUidTokenRequest) returns (GetUidTokenResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/uid_token/get'
    };
  }

  // 上课-录音上报
  // `midware:"Auth"`
  rpc ReportRecording(ReportRecordingRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/base/readcamp/recording/report'
    };
  }

  // 上课-学习报告
  rpc GetStudyReport(GetStudyReportRequest) returns (GetStudyReportResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/study_report/get'
    };
  }

  // 打卡-获取打卡列表
  // `midware:"Auth"`
  rpc CheckinList(CheckinListRequest) returns (CheckinListResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/checkin/list'
    };
  }
  // 打卡-获取用户打卡历史
  // `midware:"Auth"`
  rpc UserCheckinList(UserCheckinListRequest) returns (UserCheckinListResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/user_checkin/list'
    };
  }
  // 打卡-提交打卡
  // `midware:"Auth"`
  rpc PostCheckin(PostCheckinRequest) returns (Checkin) {
    option (google.api.http) = {
      post: '/base/readcamp/checkin/add'
    };
  }
  // 打卡-根据 id 获取单条打卡
  // `midware:"Auth"`
  rpc GetCheckinById(GetCheckinByIdRequest) returns (UserCheckin) {
    option (google.api.http) = {
      post: '/base/readcamp/checkin/get'
    };
  }
  // 打卡-点赞
  // `midware:"Auth"`
  rpc LikeCheckin(LikeCheckinRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/base/readcamp/checkin/like'
    };
  }
  // 打卡-取消点赞
  // `midware:"Auth"`
  rpc CancelLikeCheckin(CancelLikeCheckinRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/base/readcamp/checkin/cancel_like'
    };
  }
  // 打卡-分享
  // `midware:"Auth"`
  rpc ShareCheckin(ShareCheckinRequest) returns (ShareCheckinResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/checkin/share'
    };
  }
  // 勋章-首页-查看要展示的勋章
  // `midware:"Auth"`
  rpc GetUserMedalsToShow(GetUserMedalsToShowRequest) returns (GetUserMedalsToShowResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/user_medals/to_show'
    };
  }
  // 勋章-我的所有勋章
  // `midware:"Auth"`
  rpc GetUserMedals(GetUserMedalsRequest) returns (GetUserMedalsResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/user_medals/get'
    };
  }
  // 落地页回调-字节广告落地页转化回调
  rpc CallbackByteDanceForAdPageConversion(ByteDanceAdPageConversionCallbackRequest) returns (ByteDanceAdPageConversionCallbackResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/byte_dance_callback/ad_page_conversion'
    };
  }

  // 上报-交互讲解选择题选择结果上报
  // `midware:"Auth"`
  rpc ReportInteractionMultipleChoiceResult(ReportInteractionMultipleChoiceResultRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/base/readcamp/interaction_multiple_choice/report'
    };
  }

  // 用户-用户事件上报
  // `midware:"Auth"`
  rpc ReportUserEvent(ReportUserEventRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/base/readcamp/user_event/report'
    };
  }

  // 用户定级-用户level上报
  // `midware:"Auth"`
  rpc ReportUserLevel(ReportUserLevelRequest) returns (ReportUserLevelResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/user_level/report'
    };
  }
  // 用户定级-查询用户 level
  // `midware:"Auth"`
  rpc QueryUserLevel(QueryUserLevelRequest) returns (QueryUserLevelResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/user_level/get'
    };
  }
  // 老师-获取老师动态二维码
  // `midware:"Auth"`
  rpc GetTeacherDynamicQrcode(GetTeacherDynamicQrcodeRequest) returns (GetTeacherDynamicQrcodeResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/teacher_dynamic_qrcode/get'
    };
  }
  // 订单-下单前检查
  // `midware:"Auth"`
  rpc CreateOrderPreCheck(CreateOrderPreCheckRequest) returns (CreateOrderPreCheckResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/order/precheck'
    };
  }
  // 订单-获取订单列表
  // `midware:"Auth"`
  rpc OrderList(OrderListRequest) returns (OrderListResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/order/list'
    };
  }
  // 订单-获取待确认地址信息
  // `midware:"Auth"`
  rpc GetOrderToConfirmAddressDetail(GetOrderToConfirmAddressDetailRequest) returns (GetOrderToConfirmAddressDetailResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/order/to_confirm_address/detail'
    };
  }
  // 订单-确认地址
  // `midware:"Auth"`
  rpc ConfirmAddress(ConfirmAddressRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/base/readcamp/order/confirm_address'
    };
  }
  // weekly plan - get
  // `midware:"Auth"`
  rpc GetWeeklyPlan(GetWeeklyPlanRequest) returns (GetWeeklyPlanResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/weekly_plan/get'
    };
  }
  // weekly plan - set
  // `midware:"Auth"`
  rpc SetWeeklyPlan(WeeklyPlan) returns (SetWeeklyPlanResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/weekly_plan/set'
    };
  }
  // 用户-推荐列表
  // `midware:"Auth"`
  rpc GetUserRecommendList(GetUserRecommendListRequest) returns (GetUserRecommendListResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/user_recommend/list'
    };
  }
  // 用户-课程分类
  // `midware:"Auth"`
  rpc GetCourseCategoryTags(GetCourseCategoryTagsRequest) returns (GetCourseCategoryTagsResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/course_category_tags/list'
    };
  }
  // 用户-课程复习列表
  // `midware:"Auth"`
  rpc GetUserCourseReviewList(GetUserCourseReviewListRequest) returns (GetUserCourseReviewListResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/user_course_review/list'
    };
  }
  // 用户-app首页配置
  // `midware:"Auth"`
  rpc GetAppMainPageConfig(GetAppMainPageConfigRequest) returns (GetAppMainPageConfigResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/app/main_page/config'
    };
  }
  // 用户-用户级配置设置
  // `midware:"Auth"`
  rpc SetUserSettings(SetUserSettingsRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/base/readcamp/user_settings/set'
    };
  }
  // 磨耳朵-获取课程列表
  // `midware:"Auth"`
  rpc ListPracticeCourses(ListPracticeCoursesRequest) returns (ListPracticeCoursesResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/practice/courses/list'
    };
  }
  // 磨耳朵-获取课节列表
  // `midware:"Auth"`
  rpc ListPracticeLectures(ListPracticeLecturesRequest) returns (ListPracticeLecturesResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/practice/lectures/list'
    };
  }
  // 10 元返现-申请
  rpc ApplyCashback(ApplyCashbackRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/base/readcamp/cashback/apply'
    };
  }
  // 用户-获取用户书单核验列表
  // `midware:"Auth"`
  rpc ListUserVerificationBooks(ListUserVerificationBooksRequest) returns (ListUserVerificationBooksResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/user_verification_book/list'
    };
  }
  // 用户-创建用户书单核验条目
  // `midware:"Auth"`
  rpc CreateUserVerificationBook(CreateUserVerificationBookRequest) returns (UserVerificationBook) {
    option (google.api.http) = {
      post: '/base/readcamp/user_verification_book/create'
    };
  }
  // 周周有礼-获取当前有效记录
  // `midware:"Auth"`
  rpc GetCurrentWeeklyGift(GetCurrentWeeklyGiftRequest) returns (WeeklyGift) {
    option (google.api.http) = {
      post: '/base/readcamp/weekly_gift/current_get'
    };
  }
  // 周周有礼-获取剩余有效次数
  // `midware:"Auth"`
  rpc GetWeeklyGiftLeftCount(WeeklyGiftLeftCountRequest) returns (WeeklyGiftLeftCountResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/weekly_gift/left_count'
    };
  }
  // 周周有礼-创建
  // `midware:"Auth"`
  rpc CreateWeeklyGift(CreateWeeklyGiftRequest) returns (WeeklyGift) {
    option (google.api.http) = {
      post: '/base/readcamp/weekly_gift/create'
    };
  }
  // 周周有礼-上传截图
  // `midware:"Auth"`
  rpc UploadWeeklyGiftSnapshot(UploadWeeklyGiftSnapshotRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/base/readcamp/weekly_gift/upload_snapshot'
    };
  }
  // 周周有礼-海报访问上报
  rpc WeeklyGiftVisitReport(WeeklyGiftVisitReportRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/base/readcamp/weekly_gift/visit_report'
    };
  }
  // 转介绍-海报访问上报
  rpc ReferralPosterVisitReport(ReferralPosterVisitReportRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/base/readcamp/referral_poster/visit_report'
    };
  }
  // 周周有礼-获取列表
  // `midware:"Auth"`
  rpc WeeklyGiftList(WeeklyGiftListRequest) returns (WeeklyGiftListResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/weekly_gift/list'
    };
  }
  // 用户-书签排行榜列表
  // `midware:"Auth"`
  rpc BookmarkRankList(BookmarkRankListRequest) returns (BookmarkRankListResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/bookmark_rank/list'
    };
  }
  // 书签和奖品轮播列表
  rpc BookmarkAndDrawList(BookmarkAndDrawListRequest) returns (BookmarkAndDrawListResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/bookmark_and_draw/list'
    };
  }
  // 用户-书签历史列表
  // `midware:"Auth"`
  rpc BookmarkList(BookmarkHistoryListRequest) returns (BookmarkHistoryListResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/bookmark_history/list'
    };
  }
  // 用户-奖励列表
  // `midware:"Auth"`
  rpc BookmarkDrawList(BookmarkDrawListRequest) returns (BookmarkDrawListResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/bookmark_draw/list'
    };
  }
  // 用户-单次抽奖
  // `midware:"Auth"`
  rpc BookmarkDrawOnce(BookmarkDrawRequest) returns (BookmarkDraw) {
    option (google.api.http) = {
      post: '/base/readcamp/bookmark_draw/once'
    };
  }
  // 用户-一键抽奖
  // `midware:"Auth"`
  rpc BookmarkDrawAll(BookmarkDrawAllRequest) returns (BookmarkDrawAllResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/bookmark_draw/all'
    };
  }
  // 用户-填写收款信息
  // `midware:"Auth"`
  rpc CreateUserPayInfo(UserPayInfoCreateRequest) returns (UserPayInfo) {
    option (google.api.http) = {
      post: '/base/readcamp/user_pay_info/create'
    };
  }
  // 用户-获取收款信息
  // `midware:"Auth"`
  rpc GetUserPayInfo(UserPayInfoGetRequest) returns (UserPayInfo) {
    option (google.api.http) = {
      post: '/base/readcamp/user_pay_info/get'
    };
  }
  // 反馈-获取我的反馈列表
  // `midware:"Auth"`
  rpc FeedbackList(UserFeedbackListRequest) returns (UserFeedbackListResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/user_feedback/list'
    };
  }
  // 反馈-提交反馈
  // `midware:"Auth"`
  rpc AddFeedback(AddFeedbackRequest) returns (Feedback) {
    option (google.api.http) = {
      post: '/base/readcamp/feedback/add'
    };
  }
  // 用户-创建优惠券
  // `midware:"Auth"`
  rpc CreateUserCoupon(UserCouponCreateRequest) returns (UserCouponCreateResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/user_coupon/create'
    };
  }
  // 用户-获取兑换码信息
  // `midware:"Auth"`
  rpc GetCode(GetCodeRequest) returns (GetCodeResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/code/get'
    };
  }
  // 用户-获取正价课套餐课程关联列表
  // `midware:"Auth"`
  rpc UserFormalPackageCourseList(UserFormalPackageCoursListRequest) returns (UserFormalPackageCourseListResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/user_package_course/list'
    };
  }
  // 微信客服-获取客服信息
  // `midware:"Auth"`
  rpc WechatCustomerService(WechatCustomerServiceRequest) returns (WechatCustomerServiceResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/wechat_customer_service/get'
    };
  }
  // wpm结果上报
  // `midware:"Auth"`
  rpc ReportWpmResult(WPMResult) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/base/readcamp/lecture/wpm_result/report'
    };
  }
  // wpm 语音转文字
  // `midware:"Auth"`
  rpc WPMAsr(WPMAsrRequest) returns (WPMAsrResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/lecture/wpm_asr'
    };
  }
  // 测评-测评上报
  // `midware:"Auth"`
  rpc ReportLectureEvaluation(ReportLectureEvaluationRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/base/readcamp/lecture_evaluation/report'
    };
  }
  // 测评-课程内测评列表
  // `midware:"Auth"`
  rpc ListCourseEvaluations(ListCourseEvaluationsRequest) returns (ListCourseEvaluationsResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/course_evaluation/list'
    };
  }
  // 测评-获取评测报告(无需鉴权，方便分享)
  rpc GetEvaluationReporter(GetEvaluationReporterRequest) returns (GetEvaluationReporterResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/course_evaluation/reporter'
    };
  }
  // 微信客服-获取 chatGPT promt 设置
  rpc GetCustomerServiceChatGPTPromt(GetCustomerServiceChatGPTPromtRequest) returns (GetCustomerServiceChatGPTPromtResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/wechat_customer_service/chatgpt_prompt/get'
    };
  }
  // 微信客服-设置 chatGPT prompt
  rpc SetCustomerServiceChatGPTPromt(SetCustomerServiceChatGPTPromtRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/wechat_customer_service/chatgpt_prompt/set'
    };
  }
  // 用户-获取拼团活动详情
  // `midware:"Auth"`
  rpc GetGrouponActivityById(GetGrouponActivityRequest) returns (GrouponActivity) {
    option (google.api.http) = {
      post: '/base/readcamp/groupon_activity/get'
    };
  }
  // 用户-团长获取拼团详情
  // `midware:"Auth"`
  rpc GetGroupon(GetGrouponByCreatorRequest) returns (Groupon) {
    option (google.api.http) = {
      post: '/base/readcamp/groupon/get'
    };
  }
  // 用户-团员获取拼团详情
  // `midware:"Auth"`
  rpc GetGrouponById(GetGrouponByIdRequest) returns (Groupon) {
    option (google.api.http) = {
      post: '/base/readcamp/groupon/get/id'
    };
  }
  // 用户-获取拼团带参二维码
  // `midware:"Auth"`
  rpc GetGrouponQrCode(GetGrouponQrCodeRequest) returns (GetGrouponQrCodeResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/groupon/qr_code'
    };
  }
  // 用户-成团轮播
  // `midware:"Auth"`
  rpc RecentSuccessGrouponList(RecentSuccessGrouponRequest) returns (RecentSuccessGrouponResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/groupon/recent_success/list'
    };
  }
  // 用户-判断当前用户是否可参团
  // `midware:"Auth"`
  rpc CheckUserJoinGroupon(CheckUserJoinGrouponRequest) returns (CheckUserJoinGrouponResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/groupon/user_join_check'
    };
  }
  // 用户-判断当前用户是否可开团
  // `midware:"Auth"`
  rpc CheckUserCanCreateGroupon(CheckUserCanCreateGrouponRequest) returns (CheckUserCanCreateGrouponResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/groupon/user_create_check'
    };
  }
  // 用户-获取拼团团长老师的teacher_id
  // `midware:"Auth"`
  rpc GetGrouponCreatorTeacherByMember(GetGrouponCreatorTeacherByMemberRequest) returns (GetGrouponCreatorTeacherByMemberResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/groupon/creator/teacher_id'
    };
  }
  // 日历-获取体验课日历 url
  // `midware:"Auth"`
  rpc GetTrialCourseCalendarUrl(GetTrialCourseCalendarUrlRequest) returns (GetTrialCourseCalendarUrlResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/trial_course_calendar_url/get'
    };
  }
  // 智能学习-获取题目列表
  // `midware:"Auth"`
  rpc GetQuestions(GetQuestionsRequest) returns (GetQuestionsResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/questions/list'
    };
  }
  // 智能学习-试卷题目获取
  // `midware:"Auth"`
  rpc ExamPaperQuestionsGet(ExamPaperQuestionsGetReq) returns (ExamPaperQuestionsGetRes) {
    option (google.api.http) = {
      post: '/base/readcamp/exam/paper/questions/get'
    };
  }
  // 智能学习-创建考试
  // `midware:"Auth"`
  rpc ExamPaperCreate(ExamPaperCreateReq) returns (ExamPaperCreateRes) {
    option (google.api.http) = {
      post: '/base/readcamp/exam/paper/create'
    };
  }
  // 智能学习-考试历史
  // `midware:"Auth"`
  rpc UserExamPaperList(UserExamPaperListReq) returns (UserExamPaperListRes) {
    option (google.api.http) = {
      post: '/base/readcamp/user/exam/paper/list'
    };
  }
  // 智能学习-答题历史记录
  // `midware:"Auth"`
  rpc GetQuestionAnswerList(GetQuestionAnswerListRequest) returns (GetQuestionAnswerListResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/question/answer/list'
    };
  }
  // 智能学习-模块题目信息
  // `midware:"Auth"`
  rpc GetModuleInfo(GetModuleInfoRequest) returns (GetModuleInfoResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/module/info'
    };
  }
  // 智能学习-查询用户单词学习详情
  // `midware:"Auth"`
  rpc GetUserKetWordLearnDetail(UserKetWordLearnDetailRequest) returns (UserKetWordLearnDetailResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/user_ket_word/learn/detail'
    };
  }
  // 用户-查看用户在阅读营的课程状态
  // `midware:"Auth"`
  rpc GetUserCourseStatus(GetUserCourseStatusRequest) returns (GetUserCourseStatusResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/user_course/status'
    };
  }
  // tmk 召回用户下单(无需登录)
  rpc TmkRecallCreateOrder(TmkRecallCreateOrderRequest) returns (TmkRecallCreateOrderResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/tmk_recall/create_order'
    };
  }
  // 学习规划-申请
  // `midware:"Auth"`
  rpc StudyPlanApply(StudyPlanApplyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/base/readcamp/study_plan/apply'
    };
  }
  // 海报-创建
  // `midware:"Auth"`
  rpc CreatePoster(CreatePosterRequest) returns (Poster) {
    option (google.api.http) = {
      post: '/base/readcamp/poster/create'
    };
  }
  // 海报-上传截图
  // `midware:"Auth"`
  rpc UploadPosterSnapshot(UploadPosterSnapshotRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/base/readcamp/poster/upload_snapshot'
    };
  }
  // dk活动-获取活动状态
  // `midware:"Auth"`
  rpc GetUserDKAwardStatus(UserDKAwardStatusRequest) returns (UserDKAwardStatusResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/dk/status'
    };
  }
  // 结营证书-校验用户是否可生成结营证书
  // `midware:"Auth"`
  rpc UserCertValidate(ValidateUserCertRequest) returns (ValidateUserCertResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/cert/validate'
    };
  }
  // 结营证书-生成结营证书
  // `midware:"Auth"`
  rpc UserCertCreate(UserCertCreateRequest) returns (Cert) {
    option (google.api.http) = {
      post: '/base/readcamp/cert/create'
    };
  }
  // 结营证书-上传结营证书截图
  // `midware:"Auth"`
  rpc UserCertUpload(UserCertUploadSnapshotRequest) returns (Cert) {
    option (google.api.http) = {
      post: '/base/readcamp/cert/upload'
    };
  }
  // 结营证书-获取课程的结营证书
  // `midware:"Auth"`
  rpc UserCertGetByCourse(UserCertGetByCourseRequest) returns (Cert) {
    option (google.api.http) = {
      post: '/base/readcamp/cert/get_by_course'
    };
  }
  // 结营证书-获取用户全部结营证书
  // `midware:"Auth"`
  rpc UserCertList(UserCertListRequest) returns (UserCertListResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/cert/list'
    };
  }
  // 结营证书-获取全部的课程证书
  // `midware:"Auth"`
  rpc CourseCertList(CourseCertListReq) returns (CourseCertListRes) {
    option (google.api.http) = {
      post: '/base/readcamp/course_cert/list'
    };
  }
  // 社群-查询群列表
  // `midware:"Auth"`
  rpc QueryWechatGroup(QueryWechatGroupRequest) returns (QueryWechatGroupResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/wechat_group/list'
    };
  }
  // 社群-获取单个群信息
  // `midware:"Auth"`
  rpc GetWechatGroup(GetWechatGroupDetailRequest) returns (WechatGroupDetail) {
    option (google.api.http) = {
      post: '/base/readcamp/wechat_group/get'
    };
  }
  // 单词强化-获取用户今日单词列表
  // `midware:"Auth"`
  rpc GetTodayMemoryTargetsByUser(GetTodayMemoryTargetsByUserRequest) returns (GetTodayMemoryTargetsByUserResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/user_today_memory_target/list'
    };
  }
  // 单词强化-上报用户单词学习信息
  // `midware:"Auth"`
  rpc ReportUserMemoryTarget(UserMemoryTargetReportRequest) returns (UserMemoryTargetReportResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/user_memory_target/report'
    };
  }
  // 智能学习-上报做题结果
  // `midware:"Auth"`
  rpc ReportQuestionResult(ReportQuestionResultRequest) returns (ReportQuestionResultResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/question_report/report'
    };
  }
  // 智能学习-GPT回复
  // `midware:"Auth"`
  rpc GetGPTChat(GetGPTChatReq) returns (GetGPTChatRes) {
    option (google.api.http) = {
      post: '/base/readcamp/gpt/chat'
    };
  }
  // 用户-阅读打卡活动列表
  // `midware:"Auth"`
  rpc GetClockInApplicationList(ClockInApplicationListRequest) returns (ClockInApplicationListResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/clock_in_application/list'
    };
  }
  // 用户-阅读打卡设置优先挑战
  // `midware:"Auth"`
  rpc UpdateClockInApplication(UpdateClockInApplicationReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/base/readcamp/clock_in_application/update'
    };
  }
  // 用户-打卡报名
  // `midware:"Auth"`
  rpc ClockInApplicationCreate(ClockInApplicationCreateRequest) returns (ClockInApplication) {
    option (google.api.http) = {
      post: '/base/readcamp/clock_in_application/create'
    };
  }
  // 用户-打卡取消
  // `midware:"Auth"`
  rpc ClockInApplicationCancel(ClockInApplicationCancelRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/base/readcamp/clock_in_application/cancel'
    };
  }
  // 用户-打卡目标升级
  // `midware:"Auth"`
  rpc ClockInApplicationUpgrade(ClockInApplicationUpgradeRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/base/readcamp/clock_in_application/upgrade'
    };
  }
  // 用户-打卡详情获取
  // `midware:"Auth"`
  rpc GetClockinDetail(GetClockinDetailRequest) returns (GetClockinDetailResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/clock_in/detail'
    };
  }
  // 用户-获取活动学习报告
  rpc GetClockInStudyReport(GetClockInStudyReportRequest) returns (GetClockInStudyReportResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/clock_in/study_report/get'
    };
  }
  // 用户-获取用户年度报告
  rpc GetUserStudyReportByYear(GetUserStudyReportByYearRequest) returns (GetUserStudyReportByYearResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/study_report/by_year'
    };
  }
  // 用户-使用补签卡
  // `midware:"Auth"`
  rpc UseReplacementCard(UseReplacementCardRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/base/readcamp/replacement_card/use'
    };
  }
  // 用户-发放补签卡
  // `midware:"Auth"`
  rpc GiveReplacementCard(GiveReplacementCardRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/base/readcamp/replacement_card/give'
    };
  }
  // 用户-scene活动用户校验
  // `midware:"Auth"`
  rpc PrecheckInScene(PrecheckInSceneRequest) returns (PrecheckInSceneResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/scene_user/precheck'
    };
  }
  // 用户-打款提现资格校验
  // `midware:"Auth"`
  rpc CheckPayWithdrawQualification(CheckPayWithdrawQualificationRequest) returns (CheckPayWithdrawQualificationResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/pay_withdraw_qualification/check'
    };
  }
  // 用户-申请打款提现
  // `midware:"Auth"`
  rpc ApplyPayWithdraw(ApplyPayWithdrawRequest) returns (ApplyPayWithdrawResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/pay_withdraw/apply'
    };
  }
  // 用户-用户转介绍活动列表
  // `midware:"Auth"`
  rpc ListUserInviteActivities(UserInviteActivityListRequest) returns (UserInviteActivityListResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/invite_activity/list'
    };
  }
  // 用户-用户转介绍任务列表
  // `midware:"Auth"`
  rpc ListUserInviteJobs(UserInviteJobListRequest) returns (UserInviteJobListResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/invite_job/list'
    };
  }
  // 用户-用户转介绍任务创建
  // `midware:"Auth"`
  rpc CreateInviteJob(CreateInviteJobRequest) returns (InviteJob) {
    option (google.api.http) = {
      post: '/base/readcamp/invite_job/create'
    };
  }
  // 用户-用户转介绍任务取消
  // `midware:"Auth"`
  rpc CancelInviteJob(CancelInviteJobRequest) returns (CancelInviteJobResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/invite_job/cancel'
    };
  }
  // 用户-用户转介绍任务详情
  // `midware:"Auth"`
  rpc GetInviteJob(GetInviteJobRequest) returns (InviteJob) {
    option (google.api.http) = {
      post: '/base/readcamp/invite_job/get'
    };
  }
  // 用户-当前正在进行的转介绍活动
  // `midware:"Auth"`
  rpc GetInProgressReferralActivity(GetInProgressReferralActivityRequest) returns (ReferralActivity) {
    option (google.api.http) = {
      post: '/base/readcamp/referral_activity/in_progress/get'
    };
  }
  // 用户-当前转介绍活动的补卡相关信息
  // `midware:"Auth"`
  rpc GetPosterUploadList(GetPosterUploadListRequest) returns (PosterUploadListResp) {
    option (google.api.http) = {
      post: '/base/readcamp/poster/upload/list'
    };
  }
  // 用户-课节跟读模块的录音
  // `midware:"Auth"`
  rpc GetUserRecordsInFollow(ListUserRecordInFollowRequest) returns (ListUserRecordInFollowResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/user_follow_record/list'
    };
  }
  // 用户-保存我的作品
  // `midware:"Auth"`
  rpc UpdateUserLectureFollowRecord(UserLectureFollowRecordUpdateRequest) returns (UserLectureFollowRecordUpdateResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/user_lecture/follow_record/set'
    };
  }
  // 听力熊-获取已购买的课程列表 (所有BP缩写目前仅听力熊在用)
  // `midware:"Auth"`
  rpc BPGetUserCourses(GetUserCoursesRequest) returns (BPGetUserCoursesResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/bp/user_course/list'
    };
  }
  // 听力熊-获取课节列表
  // `midware:"Auth"`
  rpc BPGetUserLectureList(BPGetUserLectureListRequest) returns (BPGetUserLectureListResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/bp/user_lecture/list'
    };
  }
  // 听力熊-获取用户信息
  // `midware:"Auth"`
  rpc BPGetUserProfile(google.protobuf.Empty) returns (BPGetUserProfileResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/bp/user_profile/get'
    };
  }
  // 听力熊-批量上报学习信息
  // `midware:"Auth"`
  rpc BPBatchReportUserStudy(BPBatchReportUserStudyReq) returns (BPBatchReportUserStudyResponse) {
    option (google.api.http) = {
      post: '/base/readcamp/bp/user_study/batch_report'
    };
  }
  // 商务合作-获取小程序绑定码
  rpc BPAuthQRCode(BPAuthQRCodeReq) returns (BPAuthQRCodeRes) {
    option (google.api.http) = {
      post: '/base/readcamp/bp/auth/qrcode'
    };
  }
  // KOC-获取KOC的日报列表数据
  // `midware:"Auth"`
  rpc GetKocDailyList(GetKocDailyListReq) returns (GetKocDailyListRes) {
    option (google.api.http) = {
      post: '/base/readcamp/koc/daily/list'
    };
  }
  // KOC-获取KOC的日报明细数据
  // `midware:"Auth"`
  rpc GetKocDailyDetail(GetKocDailyDetailReq) returns (GetKocDailyDetailRes) {
    option (google.api.http) = {
      post: '/base/readcamp/koc/daily/detail'
    };
  }
  // 用户-查询单个outer_order订单信息
  // `midware:"Auth"`
  rpc GetOuterOrder(GetOuterOrderReq) returns (GetOuterOrderRes) {
    option (google.api.http) = {
      post: '/base/readcamp/outer_order/get'
    };
  }

  // 用户-绑定外部订单
  // `midware:"Auth"`
  rpc BindOuterOrder(BindOuterOrderReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/base/readcamp/outer_order/bind'
    };
  }

  // 用户-阅读营绘本列表
  // `midware:"Auth"`
  rpc GetPicturebookList(PicturebookListReq) returns (PicturebookListRes) {
    option (google.api.http) = {
      post: '/base/readcamp/picturebook/book/list'
    };
  }
  // 用户-阅读营绘本详情
  // `midware:"Auth"`
  rpc GetPicturebookDetail(GetPicturebookDetailReq) returns (GetPicturebookDetailRes) {
    option (google.api.http) = {
      post: '/base/readcamp/picturebook/book/detail'
    };
  }
  // 用户-阅读营绘本页列表
  // `midware:"Auth"`
  rpc GetPicturebookPageList(PicturebookPageListReq) returns (PicturebookPageListRes) {
    option (google.api.http) = {
      post: '/base/readcamp/picturebook/book/page/list'
    };
  }
  // 用户-阅读营绘本学习完成上报
  // `midware:"Auth"`
  rpc PicturebookStudyReport(PicturebookStudyReportReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/base/readcamp/picturebook/book/study/report'
    };
  }
  // 用户-阅读记录-学习日历
  // `midware:"Auth"`
  rpc UserReadRecordLearnCalendar(UserReadRecordLearnCalendarReq) returns (UserReadRecordLearnCalendarRes) {
    option (google.api.http) = {
      post: '/base/readcamp/readrecord/learn_calendar'
    };
  }
  // 用户-阅读记录-学习信息
  // `midware:"Auth"`
  rpc UserReadRecordLearnInfo(UserReadRecordLearnInfoReq) returns (UserReadRecordLearnInfoRes) {
    option (google.api.http) = {
      post: '/base/readcamp/readrecord/learn_info'
    };
  }
  // 用户-市场投放-动态渠道
  rpc GetDynamicUtmSource(GetDynamicUtmSourceReq) returns (GetDynamicUtmSourceRes) {
    option (google.api.http) = {
      post: '/base/readcamp/utm_source/dynamic/get'
    };
  }
  // 用户-市场投放-监测回传
  rpc MarketMonitorTrack(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      get: '/base/readcamp/market/track/:source'
    };
  }
  // 用户-市场投放-vivoapi
  rpc MarketVivoAPIAuthCode(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      get: '/base/readcamp/market/vivoapi/authcode'
    };
  }
  // 用户-市场投放-应用宝授权回调
  rpc MarketTencentMyAppAuthCode(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      get: '/base/readcamp/market/yingyongbaoapi/authcode'
    };
  }
  // 用户-书单-列表
  // `midware:"Auth"`
  rpc UserBookListList(GeneralPagination) returns (UserBookListListRes) {
    option (google.api.http) = {
      post: '/base/readcamp/booklist/list'
    };
  }
  // 用户-书单-获取
  // `midware:"Auth"`
  rpc UserBookListGet(UserBookListGetReq) returns (UserBookListGetRes) {
    option (google.api.http) = {
      post: '/base/readcamp/booklist/get'
    };
  }
  // 用户-书单-删除
  // `midware:"Auth"`
  rpc UserBookListDelete(UserBookListDeleteReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/base/readcamp/booklist/delete'
    };
  }
  // 用户-书单-创建
  // `midware:"Auth"`
  rpc UserBookListCreate(UserBookListCreateReq) returns (UserBookListCreateRes) {
    option (google.api.http) = {
      post: '/base/readcamp/booklist/create'
    };
  }
  // 用户-书单-修改
  // `midware:"Auth"`
  rpc UserBookListUpdate(UserBookListUpdateReq) returns (UserBookListUpdateRes) {
    option (google.api.http) = {
      post: '/base/readcamp/booklist/update'
    };
  }
  // 用户-书单-加书
  // `midware:"Auth"`
  rpc UserBookListAddLecture(UserBookListAddLectureReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/base/readcamp/booklist/lecture/add'
    };
  }
  // 用户-书单-删书
  // `midware:"Auth"`
  rpc UserBookListDelLecture(UserBookListDelLectureReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/base/readcamp/booklist/lecture/delete'
    };
  }
  // 用户-播放列表-获取
  // `midware:"Auth"`
  rpc PlaylistGet(PlaylistGetReq) returns (PlaylistGetRes) {
    option (google.api.http) = {
      post: '/base/readcamp/playlist/list'
    };
  }
  // 用户-活动-是否参加
  // `midware:"Auth"`
  rpc ActivityUserChange(ActivityUserChangeReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/base/readcamp/activity/user/change'
    };
  }
  // 用户-活动-排行榜信息
  // `midware:"Auth"`
  rpc GetActivityRank(GetActivityReq) returns (GetActivityRankRes) {
    option (google.api.http) = {
      post: '/base/readcamp/activity/rank/get'
    };
  }

  // 管理-训练营-创建训练营
  rpc CampCreate(CampCrtRequest) returns (CampGetResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/camp/create'
    };
  }
  // 管理-训练营-修改训练营信息
  rpc CampUpdateInfo(CampUptRequest) returns (CampGetResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/camp/update/info'
    };
  }
  // 管理-训练营-上架/下架训练营
  rpc CampUpdateStatus(CampUptStatusRequest) returns (CampGetResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/camp/update/status'
    };
  }
  // 管理-课程-获取课程列表
  rpc AdminCourseList(AdminCourseListRequest) returns (AdminCourseListResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/course/list'
    };
  }
  // 管理-课程-获取单个课程
  rpc AdminCourseGet(AdminCourseGetRequest) returns (Course) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/course/get'
    };
  }
  // 管理-课程-创建课程
  rpc CourseCreate(CourseCrtRequest) returns (CourseGetResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/course/create'
    };
  }
  // 管理-课程-修改课程信息
  rpc CourseUpdateInfo(CourseUptRequest) returns (CourseGetResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/course/update/info'
    };
  }
  // 管理-课节-获取课节列表
  rpc AdminLectureList(AdminLectureListRequest) returns (AdminLectureListResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/lecture/list'
    };
  }
  // 管理-课节-获取单个课节
  rpc AdminLectureGet(AdminLectureGetRequest) returns (Lecture) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/lecture/get'
    };
  }
  // 管理-课节-创建课节
  rpc LectureCreate(LectureCrtRequest) returns (LectureGetResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/lecture/create'
    };
  }
  // 管理-课节-修改课节信息
  rpc LectureUpdateInfo(LectureUptRequest) returns (LectureGetResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/lecture/update/info'
    };
  }
  // 管理-课节-解锁课节
  rpc LectureUnlock(LectureUnlockRequest) returns (LectureGetResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/lecture/unlock'
    };
  }
  // 管理-课节-批量解锁课节
  rpc LectureBatchUnlock(LectureBatchUnlockRequest) returns (LectureBatchUnlockResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/lecture/unlock/batch'
    };
  }
  // 管理-课节extra信息更新
  rpc UpdateLectureExtra(UpdateLectureExtraRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/lecture_extra/update'
    };
  }
  // 管理-课节模块-批量新增修改
  rpc BatchUpsertLectureModules(BatchUpsertLectureModulesReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/lecture_module/batch_upsert'
    };
  }
  // 管理-课节模块-查询模块列表
  rpc GetLectureModules(GetLectureModulesReq) returns (GetLectureModulesRes) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/lecture_module/list'
    };
  }
  // 管理-审计日志-列表
  rpc AuditLogList(AuditLogListRequest) returns (AuditLogListResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/auditlog/list'
    };
  }
  // 管理-审计日志-详情
  rpc AuditLogGet(AuditLogGetRequest) returns (AuditLogGetResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/auditlog/get/id'
    };
  }
  // 管理-通过uid授权课程到用户
  rpc CourseUserIdAdd(CourseUserIdAddRequest) returns (CourseMember) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/course_user/add/uid'
    };
  }
  // 管理-通过uid取消用户的授权课程
  rpc CourseUserIdDelete(CourseUserIdDeleteRequest) returns (CourseMember) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/course_user/delete'
    };
  }
  // 管理-调整用户课程
  rpc CourseUserChange(CourseUserChangeReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/course_user/change'
    };
  }
  // 管理-站内订单-提前开课
  rpc AdminOpenCourseInAdvance(AdminOpenCourseInAdvanceReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/course_user/open/in_advance'
    };
  }
  // 管理-提前开课列表
  rpc AdminOpenCourseList(AdminOpenCourseListReq) returns (AdminOpenCourseListRes) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/course_user/open/course_list'
    };
  }
  // 管理-调换课程列表
  rpc AdminChangeCourseList(AdminChangeCourseListReq) returns (AdminChangeCourseListRes) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/course_user/change/course_list'
    };
  }
  // 管理-开课信息
  rpc AdminSaleOrderOpenCourseInfo(AdminSaleOrderOpenCourseInfoReq) returns (AdminSaleOrderOpenCourseInfoRes){
    option (google.api.http) = {
      post: '/admin/base/readcamp/course_user/course_infos'
    };
  }

  // 管理-创建套餐课程关联
  rpc PackageCourseAdd(PackageCourseAddRequest) returns (PackageCourse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/package_course/add'
    };
  }
  // 管理-更新套餐课程关联
  rpc PackageCourseUpdate(PackageCourseUpdateRequest) returns (PackageCourse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/package_course/update'
    };
  }
  // 管理-获取套餐课程关联详情
  rpc PackageCourseGet(PackageCoursGetRequest) returns (PackageCourse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/package_course/get'
    };
  }
  // 管理-通过套餐获取套餐课程关联详情
  rpc PackageCourseGetByPackage(PackageCoursGetByPackageRequest) returns (PackageCourse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/package_course/get/package'
    };
  }
  // 管理-获取套餐课程关联列表
  rpc PackageCourseList(PackageCoursListRequest) returns (PackageCourseListResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/package_course/list'
    };
  }
  // 管理-删除套餐课程关联
  rpc PackageCourseDelete(PackageCoursDelRequest) returns (PackageCourse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/package_course/del'
    };
  }
  // 管理-套餐课程tag列表
  rpc PackageCourseTagList(PackageCourseTagListRequest) returns (PackageCourseTagListResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/package_course_tag/list'
    };
  }
  // 管理-设置用户班期(注意，此班期只对应购买时间，与 AI 课的班期无关)
  rpc CourseUserSetPeriod(CourseUserSetPeriodRequest) returns (CourseUserSetPeriodResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/course_user/set_period'
    };
  }
  // 管理-侧边栏-企微右侧查询用户信息
  rpc GetQWUserInfo(GetQWUserInfoRequest) returns (GetQWUserInfoResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/qw_user/get'
    };
  }
  // 管理-侧边栏-老师修改学生的定级
  rpc SetUserLevel(SetUserLevelRequest) returns (SetUserLevelResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/user_level/set'
    };
  }
  // 管理-侧边栏-获取老师班期列表
  rpc GetTeacherCoursePeriods(GetTeacherCoursePeriodsRequest) returns (GetTeacherCoursePeriodsResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/teacher_course_periods/list'
    };
  }
  // 管理-侧边栏-获取一个班级内的学生列表
  rpc GetStudentsInClass(GetStudentsInClassRequest) returns (GetStudentsInClassResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/class_students/list'
    };
  }
  // 管理-侧边栏-给用户发短信
  rpc SendAddWechatSms(SendAddWechatSmsRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/add_wechat_sms/send'
    };
  }
  // 管理-侧边栏-群发短信
  rpc BatchSendAddWechatSms(BatchSendAddWechatSmsRequest) returns (BatchSendAddWechatSmsResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/add_wechat_sms/batch_send'
    };
  }
  // 管理-侧边栏-发券
  rpc GiveCoupon(GiveCouponRequest) returns (GiveCouponResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/coupon/give'
    };
  }
  // 管理-侧边栏-发赠品
  rpc GiveFreeGift(GiveFreeGiftRequest) returns (GiveFreeGiftResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/free_gift/give'
    };
  }
  // 管理-侧边栏-查看订单物流信息
  rpc AdminGetShopmallOrders(AdminGetShopmallOrdersRequest) returns (AdminGetShopmallOrdersResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/shopmall_orders/get'
    };
  }
  // 积分-创建新的积分类型
  rpc CreateCoinType(CreateCoinTypeRequest) returns (CreateCoinTypeResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/coin/create'
    };
  }
  rpc BanCheckin(BanCheckinRequest) returns (BanCheckinResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/checkin/ban'
    };
  }
  rpc UnBanCheckin(UnBanCheckinRequest) returns (UnBanCheckinResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/checkin/unban'
    };
  }
  // 管理-查询有赞订单
  rpc QueryYouzanOrders(QueryYouzanOrdersRequest) returns (QueryYouzanOrdersResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/youzan_order/query'
    };
  }
  // 管理-查询 outer_order 订单
  rpc QueryOuterOrders(QueryOuterOrderReq) returns (QueryOuterOrderRes) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/outer_order/query'
    };
  }
  // 管理-outerorder订单管理-重发短信
  rpc ResendOuterOrderSMS(ResendOuterOrderSMSReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/outer_order/resend_sms'
    };
  }
  // 管理-上传有赞订单密文excel
  rpc UploadYouzanOrderExcel(UploadYouzanOrderExcelRequest) returns (UploadYouzanOrderExcelResponse){
    option (google.api.http) = {
      post: '/admin/base/readcamp/youzan_order/upload_excel'
    };
  }
  // 管理-outerorder 订单管理-上传excel更新收货信息
  rpc UploadOuterOrderExcel(UploadOuterOrderExcelReq) returns(google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/outer_order/upload_excel'
    };
  }
  // 管理-有赞订单更换老师
  rpc UpdateYouzanOrderTeacher(UpdateYouzanOrderTeacherRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/youzan_order_teacher/update'
    };
  }
  // 管理-outerorder 订单更换老师
  rpc UpdateOuterOrderTeacher(UpdateOuterOrderTeacherReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/outer_order/teacher/update'
    };
  }
  // 管理-查询有赞返现订单
  rpc ListYouzanCashbackOrders(YouzanCashbackListRequest) returns (YouzanCashbackOrders) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/youzan_cashback_order/list'
    };
  }
  // 管理-有赞返现订单详情
  rpc GetYouzanCashbackOrder(YouzanCashbackGetRequest) returns (YouzanCashbackOrder) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/youzan_cashback_order/get'
    };
  }
  // 管理-有赞阅读营订单置无效
  rpc DisableYouzanScienceCashbackOrder(YouzanCashbackGetRequest) returns (YouzanCashbackOrder) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/youzan_science_cashback_order/disable'
    };
  }
  // 管理-增加有赞白名单手机号
  rpc AddYouzanWhitePhone(YouzanWhitePhoneRequest) returns (YouzanWhitePhoneResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/youzan_white_phone/add'
    };
  }
  // 管理-勋章列表
  rpc GetAllMedalList(GetAllMedalListReq) returns (GetAllMedalListRes) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/medal/list'
    };
  }
  // 管理-插入或者更新勋章
  rpc InsertOrUpdateMedal(Medal) returns (Medal) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/medal/update'
    };
  }
  // 管理-创建书单核验条目
  rpc CreateVerificationBook(CreateVerificationBookRequest) returns (VerificationBook) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/verification_book/create'
    };
  }
  // 管理-更新书单核验条目
  rpc UpdateVerificationBook(UpdateVerificationBookRequest) returns (VerificationBook) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/verification_book/update'
    };
  }
  // 管理-获取书单核验条目列表
  rpc ListVerificationBooks(ListVerificationBooksRequest) returns (ListVerificationBooksResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/verification_book/list'
    };
  }
  // 管理-删除书单核验条目
  rpc DeleteVerificationBookById(GetVerificationBookRequest) returns (VerificationBook) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/verification_book/delete/id'
    };
  }
  // 管理-订单管理-查询内部订单
  rpc QueryOrderAssign(QueryOrderAssignRequest) returns (QueryOrderAssignResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/order_assign/query'
    };
  }
  // 管理-订单管理-回填单号
  rpc SetSaleOrderExported(SetSaleOrderExportedRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/sale_order_export/set'
    };
  }
  // 管理-订单管理-设置备注
  rpc UpdateSaleOrderRemark(UpdateSaleOrderRemarkRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/sale_order_remark/update'
    };
  }
  // 管理-订单管理-更改货物列表
  rpc AdminOrderProductList(AdminOrderProductListRequest) returns (AdminOrderProductListResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/order_products/list'
    };
  }

  // 管理-订单管理-更改货物
  rpc AdminUpdateShopmallOrderProduct(AdminUpdateShopmallOrderProductRequest) returns (AdminUpdateShopmallOrderProductResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/shopmall_order_product/change'
    };
  }
  // 管理-订单管理-更新老师或leads uid
  rpc UpdateSaleOrderAssign(UpdateSaleOrderAssignRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/sale_order_assign/update'
    };
  }
  // 管理-订单管理-延缓发货
  rpc UpdateLogisticsOrderDelayDelivery(UpdateLogisticsOrderDelayDeliveryRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/logistics_order_delay_delivery/update'
    };
  }
  // 管理-订单管理-获取有赞商品对应套餐信息（逐渐切换到新接口）
  rpc GetYouzanPackagesInfo(GetYouzanPackagesInfoRequest) returns (GetYouzanPackagesInfoResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/youzan_packages_info/get'
    };
  }
  // 管理-订单管理-获取outerorder对应套餐信息
  rpc GetOuterOrderPackagesInfo(GetOuterOrderPackagesInfoReq) returns (GetOuterOrderPackagesInfoRes) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/outer_order/packages/get'
    };
  }
  // 管理-订单管理-有赞商品下单
  rpc PlaceYouzanSaleOrder(PlaceYouzanSaleOrderRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/youzan_sale_order/place'
    };
  }
  // 管理-订单管理-外部订单-确认套餐
  rpc ConfirmOuterOrderPackage(ConfirmOuterOrderPackageReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: '/admin/base/readcamp/outer_order/confirm_package'
    };
  }
  // 管理-订单管理-设置有赞商品对应的套餐信息
  rpc UpdateYouzaItemPackage(UpdateYouzaItemPackageRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/youzan_item_package/update'
    };
  }
  // 管理-订单管理-下单过程中订单源选择
  rpc ListOrderSources(ListOrderSourcesRequest) returns (ListOrderSourcesResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/order_sources/list'
    };
  }
  // 管理-订单管理-下单过程中package_id信息选择
  rpc ListPlaceSaleOrderPackages(PlaceSaleOrderPackagesRequest) returns (PlaceSaleOrderPackagesResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/place_sale_order_packages/list'
    };
  }
  // 管理-订单管理-获取订单操作历史
  rpc ListOrderActions(ListOrderActionsRequest) returns (ListOrderActionsResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/order_actions/list'
    };
  }
  // 管理-订单管理-下单
  rpc PlaceSaleOrder(PlaceSaleOrderRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/sale_order/place'
    };
  }
  // 管理-配置管理-新增sku-package映射
  rpc AddSkuPackageMapping(AddSkuPackageMappingRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/sku_package_mapping/add'
    };
  }
  // 管理-配置管理-查看sku-package映射
  rpc ListSkuPackageMapping(ListSkuPackageMappingRequest) returns (ListSkuPackageMappingResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/sku_package_mapping/list'
    };
  }
  // 管理-配置管理-查询兑换码批次描述信息
  rpc GetCategory(GetCategoryRequest) returns (OrderCategory) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/findealer_category/get'
    };
  }
  // 管理-周周有礼-查询
  rpc AdminListWeeklyGift(AdminWeeklyGiftListRequest) returns (AdminWeeklyGiftListResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/weekly_gift/list'
    };
  }
  // 管理-周周有礼-审核
  rpc WeeklyGiftReview(WeeklyGiftReviewRequest) returns (WeeklyGift) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/weekly_gift/review'
    };
  }
  // 管理-周周有礼-获取用户当前有效记录
  rpc AdminGetCurrentWeeklyGift(AdminGetCurrentWeeklyGiftRequest) returns (WeeklyGift) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/weekly_gift/current_get'
    };
  }
  // 管理-周周有礼-创建
  rpc AdminCreateWeeklyGift(AdminCreateWeeklyGiftRequest) returns (WeeklyGift) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/weekly_gift/create'
    };
  }
  // 管理-周周有礼-上传截图
  rpc AdminUploadWeeklyGiftSnapshot(AdminUploadWeeklyGiftSnapshotRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/weekly_gift/upload_snapshot'
    };
  }
  // 管理-反馈-列表
  rpc AdminFeedbackList(AdminFeedbackListRequest) returns (AdminFeedbackListResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/feedback/list'
    };
  }
  // 管理-反馈-添加回复
  rpc AdminReplyFeedback(AdminReplyFeedbackRequest) returns (Feedback) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/feedback/reply'
    };
  }
  // 管理-搜索用户
  rpc AdminUserSearch(AdminUserSearchRequest) returns (AdminUserSearchResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/user_search'
    };
  }
  // 管理-搜索用户-每日学习详情
  rpc AdminUserStudyDaily(AdminUserStudyDailyRequest) returns (AdminUserStudyDailyResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/user_daily_study/detail'
    };
  }
  // 管理-搜索用户-每日学习时长
  rpc AdminUserStudyDurationDaily(AdminUserStudyDurationDailyRequest) returns (AdminUserStudyDurationDailyResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/user_daily_study/duration'
    };
  }
  // 管理-搜索用户-课程学习详情
  rpc AdminUserCourseLecturesDetail(AdminUserCourseLecturesDetailRequest) returns (AdminUserCourseLecturesDetailResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/user_course_lectures/detail'
    };
  }
  // 管理-正价课用户中心搜索
  rpc AdminQueryFormalUserCenter(AdminQueryFormalUserCenterRequest) returns (AdminQueryFormalUserCenterResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/formal_user_center/query'
    };
  }
  // 管理-关联uid
  rpc AdminAssociateUid(AdminAssociateUidRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/uid/associate'
    };
  }
  // 管理-交互讲解配置更新
  rpc UpdateInteractionConf(UpdateInteractionConfRequest) returns (UpdateInteractionConfResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/interaction_conf/add'
    };
  }
  // 管理-获取阅读营老师列表
  rpc ListReadcampTeacher(ListReadcampTeacherRequest) returns (ListReadcampTeacherResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/teacher/list'
    };
  }
  // 管理-用户聚合信息列表
  rpc ListUserAggregateInfo(ListUserAggregateInfoRequest) returns (ListUserAggregateInfoResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/user_aggregate_info/list'
    };
  }
  // 管理-获取 app 版本更新配置
  rpc GetAppUpdateConfig(GetAppUpdateConfigRequest) returns (GetAppUpdateConfigResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/app_update_config/get'
    };
  }
  // 管理-更新 app 版本更新配置
  rpc SetAppUpdateConfig(SetAppUpdateConfigRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/app_update_config/set'
    };
  }
  // 管理-老师列表
  rpc TeacherList(TeacherListRequest) returns (TeacherListResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/teacher/list/v2'
    };
  }
  // 管理-添加老师
  rpc AddTeacher(AddTeacherRequest) returns (TeacherInfo) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/teacher/add'
    };
  }
  // 管理-删除老师
  rpc DeleteTeacher(DeleteTeacherRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/teacher/delete'
    };
  }
  // 管理-管理老师
  rpc ManagerTeacher(ManagerTeacherRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/teacher/manager'
    };
  }
  // 管理-用户转移
  rpc TransferTeacherUser(TransferTeacherUserRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/teacher/transfer_user'
    };
  }
  // 管理-正价课待分配顾问列表
  rpc ListConfirmingTeacherUsers(ListConfirmingTeacherUsersRequest) returns (ListConfirmingTeacherUsersResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/teacher_user/confirming/list'
    };
  }
  // 管理-人工确认分配的老师
  rpc ConfirmUserTeacher(ConfirmUserTeacherRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/teacher_user/confirm'
    };
  }
  // 管理-更改老师
  rpc ChangeUserTeacher(ChangeUserTeacherRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/teacher_user/change'
    };
  }
  // 管理-体验营leads订单搜索列表
  rpc SearchReadcampLeadsOrder(SearchLeadsOrderRequest) returns (SearchLeadsOrderResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/leads_order/search'
    };
  }

  // 管理-体验营leads订单数据聚合信息
  rpc GetLeadsOrderSummary(LeadsOrderSummaryRequest) returns (LeadsOrderSummaryResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/leads_order/summary'
    };
  }

  // 管理- chatgpt 调试，获取调试设置
  rpc GetChatGPTDebugSettings(GetChatGPTDebugSettingsResquest) returns (GetChatGPTDebugSettingsResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/chatgpt/settings/get'
    };
  }
  // 管理- chatgpt 调试，删除语料
  rpc DeleteChatGPTCorpus(DeleteChatGPTCorpusRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/chatgpt/corpus/del'
    };
  }
  // 管理- chatgpt 调试，获取历史消息
  rpc GetChatGPTDebugHistoryMessages(GetChatGPTDebugHistoryMessagesRequest) returns (GetChatGPTDebugHistoryMessagesResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/chatgpt/history_messages/get'
    };
  }
  // 管理- chatgpt 调试，发送消息
  rpc ChatGPTSendMessage(ChatGPTSendMessageRequest) returns (ChatGPTDebugMessage) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/chatgpt/history_messages/add'
    };
  }
  // 管理- 创建课节测评
  rpc CreateLectureEvaluation(CreateLectureEvaluationRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/lecture_evaluation/create'
    };
  }
  // 管理- 测评列表
  rpc ListLectureEvaluation(ListLectureEvaluationRequest) returns (ListLectureEvaluationResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/lecture_evaluation/list'
    };
  }
  // 管理- 修改测评
  rpc ModifyLectureEvaluation(ModifyLectureEvaluationRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/lecture_evaluation/modify'
    };
  }
  // 管理- 修改测评元信息
  rpc ModifyLectureEvaluationDetail(ModifyLectureEvaluationDetailRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/lecture_evaluation_detail/modify'
    };
  }
  // 管理-海报-创建
  rpc AdminCreatePoster(AdminCreatePosterRequest) returns (Poster) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/poster/create'
    };
  }
  // 管理-海报-上传截图
  rpc AdminUploadPosterSnapshot(AdminUploadPosterSnapshotRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/poster/upload_snapshot'
    };
  }
  // 管理-海报-上传列表&补卡信息
  rpc AdminPosterUploadList(AdminPosterUploadListRequest) returns (AdminPosterUploadListResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/poster/upload/list'
    };
  }
  // 管理-海报-获取用户海报
  rpc AdminGetPoster(AdminGetPosterRequest) returns (Poster) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/poster/get'
    };
  }
  // 管理-海报-列表
  rpc AdminListPoster(AdminPosterListRequest) returns (AdminPosterListResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/poster/list'
    };
  }
  // 管理-海报-审核
  rpc PosterReview(PosterReviewRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/poster/review'
    };
  }
  // 管理-上传学习规划截图
  rpc AdminUploadStudyPlanImage(AdminUploadStudyPlanImageRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/study_plan/upload_image'
    };
  }
  // 管理-学习规划列表
  rpc SearchUserStudyPlan(SearchUserStudyPlanRequest) returns (SearchUserStudyPlanResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/study_plan/list'
    };
  }
  // 管理-待办事项列表
  rpc SearchTodo(SearchTodoRequest) returns (SearchTodoResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/todo/list'
    };
  }
  // 管理-社群-获取群信息
  rpc AdminQueryWechatGroup(AdminWechatGroupQueryRequest) returns (AdminWechatGroupQueryResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/wechat_group/list'
    };
  }
  // 管理-社群-创建群
  rpc AdminCreateWechatGroup(WechatGroupCreateRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/wechat_group/create'
    };
  }
  // 管理-社群-删除群
  rpc AdminDeleteWechatGroup(WechatGroupDeleteRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/wechat_group/delete'
    };
  }
  // 管理-社群-更新群
  rpc AdminUpdateWechatGroup(WechatGroupUpdateRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/wechat_group/update'
    };
  }
  // 管理-社群-获取群信息
  rpc AdminGetWechatGroup(AdminGetWechatGroupRequest) returns (AdminGetWechatGroupResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/wechat_group/get'
    };
  }
  // 管理-社群-模糊搜索群信息
  rpc FuzzySearchWechatGroup(FuzzySearchWechatGroupRequest) returns (FuzzySearchWechatGroupResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/wechat_group/fuzzy_search'
    };
  }
  // 管理-班期配置-新增
  rpc AddCoursePeriodConf(AddCoursePeriodConfRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/course_period_conf/add'
    };
  }
  // 管理-班期配置-修改
  rpc UpdateCoursePeriodConf(UpdateCoursePeriodConfRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/course_period_conf/update'
    };
  }
  // 管理-班期配置-查询
  rpc ListCoursePeriodConf(ListCoursePeriodConfRequest) returns (ListCoursePeriodConfResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/course_period_conf/list'
    };
  }
  // 管理-渠道管理-渠道创建
  rpc CreateUtmSource(CreateUtmSourceRequest) returns (UtmSource) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/utm_source/create'
    };
  }
  // 管理-渠道管理-渠道更新
  rpc UpdateUtmSource(UpdateUtmSourceRequest) returns (UtmSource) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/utm_source/update'
    };
  }
  // 管理-渠道管理-渠道列表
  rpc ListUtmSource(ListUtmSourceRequest) returns (ListUtmSourceResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/utm_source/list'
    };
  }
  // 管理-渠道管理-渠道详情
  rpc GetUtmSource(GetUtmSourceRequest) returns (UtmSource) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/utm_source/get'
    };
  }
  // 管理-渠道管理-渠道删除
  rpc DeleteUtmSource(GetUtmSourceRequest) returns (UtmSource) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/utm_source/delete'
    };
  }
  // 管理-渠道管理-基础渠道创建
  rpc CreateBaseSource(CreateBaseSourcesRequest) returns (BaseSource) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/base_source/create'
    };
  }
  // 管理-渠道管理-基础渠道列表
  rpc ListBaseSources(ListBaseSourcesRequest) returns (ListBaseSourcesResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/base_source/list'
    };
  }
  // 管理-给用户打电话
  rpc CallUser(CallUserRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/webcall'
    };
  }
  // 管理-给用户打电话-添加备注
  rpc AddWebcallRemark(AddWebcallRemarkRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/webcall_remark/add'
    };
  }
  // 管理-新增/更新知识点
  rpc UpsertKnownledgePoint(UpsertKnownledgePointRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/knowledge_point/upsert'
    };
  }
  // 管理-知识点类型列表
  rpc ListKnownledgePointTypes(ListKnownledgePointTypeRequest) returns (ListKnownledgePointTypeResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/knownledge_point_type/list'
    };
  }
  // 管理-新增/更新/删除材料
  rpc ManagerMaterial(ManagerMaterialRequest) returns (ManagerMaterialResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/question_material/op'
    };
  }
  // 管理-新增/更新/删除问题
  rpc ManagerQuestion(ManageQuestionRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/question/op'
    };
  }
  // 管理-新增/更新/删除单词等
  rpc ManagerMemoryTarget(ManagerMemoryTargetRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/memory_target/op'
    };
  }
  // 管理-新增/删除知识点tag
  rpc AddOrDeleteKnowledgePointTag(AddOrDeleteKnowledgePointTagRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/knowledge_point_tag/op'
    };
  }
  // 管理-获取memory_target列表
  rpc ListMemoryTargets(ListMemoryTargetsRequest) returns (ListMemoryTargetsResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/memory_target/list'
    };
  }

  // 管理-电销-公海掉海原因列表
  rpc TelemarketingPublicSeaReasons(TelemarketingPublicSeaReasonsRequest) returns (TelemarketingPublicSeaReasonsResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/telemarketing/public_sea/reasons'
    };
  }

  // 管理-电销-公海搜索
  rpc TelemarketingPublicSeaSearch(TelemarketingPublicSeaSearchRequest) returns (TelemarketingPublicSeaSearchReponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/telemarketing/public_sea/search'
    };
  }
  // 管理-电销-私海搜索
  rpc TelemarketingPrivateSeaSearch(TelemarketingPrivateSeaSearchRequest) returns (TelemarketingPrivateSeaSearchResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/telemarketing/private_sea/search'
    };
  }
  // 管理-电销-捞取到私海前检查
  rpc TelemarketingAddToPrivateSeaCheck(TelemarketingAddToPrivateSeaCheckReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/telemarketing/add_to_private_sea/check'
    };
  }
  // 管理-电销-捞取到私海
  rpc TelemarketingAddToPrivateSea(TelemarketingAddToPrivateSeaRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/telemarketing/add_to_private_sea'
    };
  }
  // 管理-电销-批量捞取到私海
  rpc TelemarketingBatchAddToPrivateSea(TelemarketingBatchAddToPrivateSeaRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/telemarketing/batch_add_to_private_sea'
    };
  }
  // 管理-电销-主动掉到公海
  rpc TelemarketingDropToPublicSea(TelemarketingDropToPublicSeaRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/telemarketing/drop_to_public_sea'
    };
  }
  // 管理-打款提现-导入资格
  rpc CreatePayWithdrawQualification(CreatePayWithdrawQualificationRequest) returns (PayWithdrawQualification) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/pay_withdraw_qualification/create'
    };
  }
  // 管理-打款提现-更新资格
  rpc UpdatePayWithdrawQualification(UpdatePayWithdrawQualificationRequest) returns (PayWithdrawQualification) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/pay_withdraw_qualification/update'
    };
  }
  // 管理-打款提现-删除资格
  rpc DeletePayWithdrawQualification(DeletePayWithdrawQualificationRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/pay_withdraw_qualification/delete'
    };
  }
  // 管理-打款提现-审批
  rpc ReviewPayWithdrawApply(ReviewPayWithdrawApplyRequest) returns (ReviewPayWithdrawApplyResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/pay_withdraw/review'
    };
  }
  // 管理-打款提现-更新结果为成功
  rpc UpdatePayWithdraw(UpdatePayWithdrawRequest) returns (UpdatePayWithdrawResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/pay_withdraw/update'
    };
  }
  // 管理-批量开课
  rpc CourseUserBatchAdd(CourseUserBatchAddRequest) returns (BatchOpsResult) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/course_user/batch_add'
    };
  }
  // 管理-批量变更归属、班期
  rpc UserTeacherCoursePeriodBatchUpdate(UserTeacherCoursePeriodBatchUpdateReq) returns (UserTeacherCoursePeriodBatchUpdateResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/user_teacher_course_period/batch_update'
    };
  }
  // 管理-批量导入订单
  rpc CourseUserBatchImportOrder(CourseUserBatchImportOrderRequest) returns (BatchOpsResult) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/sale_order/batch_import'
    };
  }
  // 管理-查询用户资产
  rpc GetUserAssets(GetUserAssetsRequest) returns (GetUserAssetsResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/user_assets/get'
    };
  }
  // 管理-转介绍活动列表
  rpc ListReferralActivity(ListReferralActivityRequest) returns (ListReferralActivityResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/referral_activity/list'
    };
  }
  // 管理-创建或更新转介绍活动
  rpc UpsertReferralActivity(AdminReferralActivity) returns (ReferralActivity) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/referral_activity/upsert'
    };
  }
  // 管理-正式课用户列表
  rpc GetFormalCourseUserList(ListFormalCourseUserRequest) returns (ListFormalCourseUserResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/formal_course_user/list'
    };
  }
  // 管理-奖励金操作
  rpc AdminUserRewardOP(UserRewardOPRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/user_reward/op'
    };
  }
  // 管理-星币操作
  rpc AdminUserCoinOP(UserCoinOPRequest) returns (UserCoinOPResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/user_coin/op'
    };
  }
  // 管理-商品列表
  rpc AdminShopCommodityList(AdminShopCommodityListReq) returns (AdminShopCommodityListRes) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/shop_commodity/list'
    };
  }
  // 管理-商品编辑
  rpc AdminShopCommodityEdit(AdminShopCommodityEditReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/shop_commodity/edit'
    };
  }
  // 管理-权益赠品配置列表
  rpc AdminGiftConfigList(GeneralPagination) returns (AdminGiftConfigListRes) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/gift_config/list'
    };
  }
  // 管理-权益赠品配置编辑
  rpc AdminGiftConfigEdit(AdminGiftConfigEditReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/gift_config/edit'
    };
  }
  // 管理-CRM用户查询
  rpc AdminCRMUserList(AdminCRMUserReq) returns (AdminCRMUserRes) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/crm_user/list'
    };
  }
  // 管理-CRM用户标签更新
  rpc AdminCRMUserTagsUpdate(AdminCRMUserTagsUpdateReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/crm_user/tags/update'
    };
  }
  // 管理-CRM用户跟进记录-更新
  rpc AdminCRMUserFollowUpEdit(AdminCRMUserFollowUpEditReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/crm_user/followup/edit'
    };
  }
  // 管理-CRM用户跟进记录-历史
  rpc AdminCRMUserFollowUpList(AdminCRMUserFollowUpListReq) returns (AdminCRMUserFollowUpListRes) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/crm_user/followup/list'
    };
  }
  // 管理-CRM用户统计
  rpc AdminCRMUserStatistics(AdminCRMUserStatisticsReq) returns (AdminCRMUserStatisticsRes) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/crm_user/statistics'
    };
  }
  // 管理-KOC用户绑定
  rpc AdminKOCUserBind(AdminKOCUserBindReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/koc_user/bind'
    };
  }
  // 管理-工单查询订单信息
  rpc AdminWorkOrderOrderGet(AdminWorkOrderOrderGetReq) returns (AdminWorkOrderOrderGetRes) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/work-order/order/get'
    };
  }
  // 管理-工单退费回调
  rpc AdminWorkOrderOrderRefund(AdminWorkOrderOrderRefundReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/work-order/order/refund'
    };
  }
  // 管理-工单前置校验
  rpc AdminWorkOrderPreCheck(AdminWorkOrderPreCheckReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/work-order/pre_check'
    };
  }
  // 管理-工单业绩改判
  rpc AdminWorkOrderSaleOrderAssignUpdate(AdminWorkOrderSaleOrderAssignUpdateReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/work-order/sale_order_assign/update'
    };
  }
  // 管理-打卡场景配置列表
  rpc AdminClockInSceneConfigList(AdminClockInSceneConfigListReq) returns (AdminClockInSceneConfigListRes) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/clockin/list'
    };
  }
  // 管理-打卡场景配置编辑
  rpc AdminClockInSceneConfigEdit(AdminClockInSceneConfigEditReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/clockin/edit'
    };
  }
  // 管理-订单消息批量重新进入 (补数据)
  rpc AdminSaleOrderMqBatchReEnter(AdminSaleOrderMqBatchReEnterReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/sale_order/mq/reenter'
    };
  }
  // 管理-订单管理-更换订单sku_id
  rpc AdminChangeOuterOrderSku(ChangeOuterOrderSkuReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/outer_order/sku_change'
    };
  }
  // 订单管理-批量解密订单 addr 信息
  rpc AdminBatchDecodeOuterOrderAddr(AdminBatchDecodeOuterOrderAddrReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/outer_order/addr/batch_decode'
    };
  }
  // 管理-用户详情-获取星币量
  rpc AdminGetUserCoinSummary(AdminGetUserCoinSummaryRequest) returns (GetUserCoinSummaryResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/user/coin/summary'
    };
  }
  // 管理-用户详情-获取星币详情
  rpc AdminGetUserCoinDetail(AdminGetUserCoinDetailRequest) returns (GetUserCoinDetailResponse) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/user/coin/detail'
    };
  }
  // 管理-站内订单-下单换货
  rpc AdminShopMallOrderExchange(AdminShopMallOrderExchangeReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/shopmall/order/exchange'
    };
  }
  // 管理-站内订单-申请发货
  rpc AdminShopMallOrderApplySend(AdminShopMallOrderApplySendReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/shopmall/order/applysend'
    };
  }
  // 管理-站内订单-获取地址
  rpc AdminWechatCourseAddrGet(AdminWechatCourseAddrGetReq) returns (LogisticsAddressInfo) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/wechatcourse/address/get'
    };
  }
  // 管理-用户详情-用户事件历史
  rpc AdminQueryUserEventHistory(AdminQueryUserEventHisReq) returns (AdminQueryUserEventHisRes) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/user/user_event_history/query'
    };
  }
  // 管理-用户详情-流转日志
  rpc AdminQueryLeadsFlowLog(AdminQueryLeadsFlowLogReq) returns(AdminQueryLeadsFlowLogRes){
    option (google.api.http) = {
      post: '/admin/base/readcamp/user/leads_flow_log/query'
    };
  }
  // 管理-活动-增加活动用户
  rpc AdminAddActivityUser(AdminAddActivityUserReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/activity/user/add'
    };
  }
  // 管理-活动-新增编辑活动
  rpc AdminUpsertActivity(AdminUpsertActivityReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: '/admin/base/readcamp/activity/upsert'
    };
  }
  // 管理-线索-查询线索绑定渠道
  rpc AdminLeadsBindSearch(AdminLeadsBindSearchReq) returns (AdminLeadsBindSearchRes) {
    option (google.api.http) = {
      post: '/admin/base/readcamp/leads/bind_search'
    };
  }
}
