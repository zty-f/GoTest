package base

import (
	"encoding/json"
	"fmt"
	"github.com/spf13/cast"
	"strings"
	"testing"
	"time"
)

func TestNilStruct(t *testing.T) {
	type User struct {
		Name string
	}

	var u *User
	if u == nil {
		t.Log("u is nil")
	} else {
		t.Error("u should be nil")
	}

	u = &User{}

	fmt.Println(u.Name)
	fmt.Println(u.Name)
	fmt.Println(u.Name)
	fmt.Println(cast.ToString(0))

}

func TestThreeMonthAgo(t *testing.T) {
	// 获取当前时间
	now := time.Now()

	// 计算三个月前的时间
	threeMonthsAgo := now.AddDate(0, -3, 0)

	// 打印结果
	fmt.Println("当前时间:", now)
	fmt.Println("三个月前的时间:", threeMonthsAgo)
}

type UserReportConfig struct {
	Reasons []string `json:"reasons"`
}

func TestMarshal(t *testing.T) {
	config := UserReportConfig{
		Reasons: []string{"1", "2", "3"},
	}
	marshal, _ := json.Marshal(config)
	fmt.Printf("%+v\n", string(marshal))
	// {
	//			ReportType: 1,
	//			Reasons:    []string{"垃圾营销", "人身攻击", "淫秽色情", "发布违规内容", "发布其他不适当内容"},
	//		},
	configs := map[int]UserReportConfig{
		1: {
			Reasons: []string{"垃圾营销", "人身攻击", "淫秽色情", "发布违规内容", "发布其他不适当内容"},
		},
	}
	marshal, _ = json.Marshal(configs)
	fmt.Printf("%+v\n", string(marshal))
}

type PrivacyType int64

type PrivacyConfig struct {
	Id   int64  `json:"id"`
	Name string `json:"name"`
}

func TestPrivacyTypeMarshal(t *testing.T) {
	config := map[PrivacyType][]*PrivacyConfig{
		1: {
			{Id: 1, Name: "学习时长"},
			{Id: 2, Name: "关注列表"},
			{Id: 3, Name: "关注者列表"},
			{Id: 4, Name: "毕业证书"},
		},
	}
	marshal, _ := json.Marshal(config)
	fmt.Printf("%+v\n", string(marshal))
	x := &PrivacyConfig{}
	fmt.Println(x.Id)
	fmt.Println(x.Name)

	fmt.Println(cast.ToInt64("1234567890")) // 1234567890
	fmt.Println(cast.ToInt64("nh"))         // 0
	fmt.Println(cast.ToInt64("忘记"))         // 0
	dayTime := cast.ToInt64(time.Now().AddDate(0, -1, 0).Format("20060102"))
	fmt.Println(dayTime)
}

func TestMapRange(t *testing.T) {
	m := map[string]int{
		"apple":  1,
		"banana": 2,
		"cherry": 3,
	}
	for key, value := range m {
		fmt.Printf("Key: %s, Value: %d\n", key, value)
	}

	for key := range m {
		fmt.Printf("Key: %s\n", key)
	}
	fmt.Println(len(aaa()))
	uidsStr := "3280367737,27293710,3275164075,3280464804,3282575848,3204359228,3275270528,3294291967,22371315,3256764636,3291968063,20769577,3288347355,3131208689,3279487219,3291111357,47892302,2852457406,19342558,3292038465,3289794815,3293372097,3288034035,3288341022,3282349135,3294451576,3251814745,3257901846,2961143459,3294612376,3289047868,3281295627,2894935857,2900411600,3282693355,3294029666,3295221503,3243291770,3294940007,3288833780,3289044209,27049009,3272592297,3241502643,3293370801,44252554,3221595497,3290001068,3282672464,38865913,3292498338,3268675124,3288326699,3257874991,3293394134,3270193239,3295112606,3273001326,3291941143,3288675151,3292359126,3289049279,3280122192,3288791719,3283481633,3282567430,28650955344,3283845641,32793336869,3279082662,3294782914,3245884659,3107403052,3280907674,2934674056,46934422,21200782,3289039041,10738187,3054035056,3282860965,3279321163,2997436510,101728935,3249303996,2930174561,3291967221,3071019513,152875556,28072482,3256544870,90032042,56957812,3273032862,3280657698,3221582966,3288290900,3282656671,3149482286,3272849807,3207674195,3282565970,3279415742,3289250414,3144559074,3282528316,17432552,17411440,3279424093,3289070915,3288830574,3232123025,22027102,3277389113,3289045661,3293786196,26288428,3290358117,3286625793,3282494900,3294136071,97339087,11134388,3289045437,3282567530,23829095,102907758,40191040,3280457754,3282777196,3283773102,3283799211,3292160652,3280993729,30458690,3279767923,3283432728,3293037956,3279695562,3288672852,3260485041,3293307448,3293702144,3289991522,3278606802,3245445148,45031649,3225615203,3274064885,3291944543,3289034563,3293802607,3246625984,2440858416,2926381236,3288885309,7609702,2979760075,3281070077,25763378,2986870656,13874060,2916690436,3293034727,20425291,17307194,70847695,2940279823,328449780,3284726222,3280803562,3282342282,3278830097,54461358,3289045947,2878235825,2889555804,3293736124,3287833640,3294371861,16369991,3254139058,66298630,3283179127,3293441906,2989614214,3282574703,2919921382,3284282878,3281306423,27026574,3290575536,3275165006,3071287117,2994301702,47141174,3282743453,3248661725,3294650631,2892527280,3286899293,3057973994,23905072,3290365134,3286149785,1693143,3293658591,3282393033,3235983377,3050550111,3290459716,3024113897,3281847203,3242910989,3282872196,3242358810,3282952872,3282393033,3024113897,3291668836,3290503630,3293741894,13105918,3280662166,3279369130,3291277281"
	uids := strings.Split(uidsStr, ",")
	fmt.Println(uids)
}

func aaa() []int {
	return nil
}

func TestBase5(t *testing.T) {
	var beginTime, endTime *time.Time
	fmt.Println(beginTime)
	fmt.Println(endTime)
	if beginTime == nil {
		fmt.Println("nil")
	}
	fmt.Println(time.Now().AddDate(0, 0, -1).Unix())
}
